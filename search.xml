<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>持之以恒 VS 半途而废</title>
      <link href="/2019/09/21/quotations-persevere-vs-halfway-up/"/>
      <url>/2019/09/21/quotations-persevere-vs-halfway-up/</url>
      
        <content type="html"><![CDATA[<h1 id="持之以恒-VS-半途而废"><a href="#持之以恒-VS-半途而废" class="headerlink" title="持之以恒 VS 半途而废"></a>持之以恒 VS 半途而废</h1><p>如何长久地坚持下去：</p><ul><li>动机：动机十分不纯</li><li>目标：目标非常容易达成</li><li>自我评价：对自己的评价高到离谱</li><li>进度管理：进度要求适度宽松</li><li>对于结果：努力追求乐趣</li></ul><p>如何半途而废：</p><ul><li>动机：动机高尚</li><li>目标：目标很远大</li><li>自我评价：冷静客观的自我评价</li><li>进度管理：进度要求一丝不苟</li><li>对于结果：对结果百分百执着</li></ul><p>好好琢磨下，有没有Get到关键点😏😏😏</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法学习笔记</title>
      <link href="/2019/09/18/markdown-syntax-learn-note/"/>
      <url>/2019/09/18/markdown-syntax-learn-note/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-语法学习笔记"><a href="#Markdown-语法学习笔记" class="headerlink" title="Markdown 语法学习笔记"></a>Markdown 语法学习笔记</h1><blockquote><p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档”。[4]这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p></blockquote><blockquote><p>由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。甚至Markdown能被使用来撰写电子书。</p></blockquote><h2 id="1-基础语法"><a href="#1-基础语法" class="headerlink" title="1 基础语法"></a>1 基础语法</h2><h3 id="1-1-分级标题"><a href="#1-1-分级标题" class="headerlink" title="1.1 分级标题"></a>1.1 分级标题</h3><p><strong>语法说明：</strong></p><ul><li>在想要设置为标题的文字前面加<code>#</code>来表示</li><li>一个<code>#</code>是一级标题，二个<code>#</code>是二级标题，以此类推。支持六级标题。</li><li>标准语法一般在<code>#</code>后跟个空格再写文字</li></ul><pre><code># H1 一级标题## H2 二级标题### H3 三级标题#### H4 四级标题##### H5 五级标题###### H6 六级标题</code></pre><p><strong>显示效果如下：</strong></p><p><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190926190713.png" alt=""></p><h3 id="1-2-文本样式"><a href="#1-2-文本样式" class="headerlink" title="1.2 文本样式"></a>1.2 文本样式</h3><p><strong>语法说明：</strong></p><ul><li>加粗：要加粗的文字左右分别用两个<code>*</code>号包起来</li><li>斜体：要倾斜的文字左右分别用一个<code>*</code>号包起来（或用下划线<code>_</code>包裹）</li><li>斜体加粗：要倾斜和加粗的文字左右分别用三个<code>*</code>号包起来</li><li>删除线：要加删除线的文字左右分别用两个<code>~~</code>号包起来</li></ul><pre><code>~~这里是删除线~~**字体加粗***字体倾斜*_字体倾斜_***倾斜加粗***</code></pre><p><strong>显示效果如下：</strong></p><p><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190926192820.png" alt=""></p><h3 id="1-3-列表"><a href="#1-3-列表" class="headerlink" title="1.3 列表"></a>1.3 列表</h3><p><strong>语法说明：</strong></p><ul><li>无序列表：用<code>-</code>、<code>+</code>、<code>*</code>任何一种都可以，和内容之间都要有<code>一个空格</code></li><li>有序列表：数字后加<code>.</code>，序号跟内容之间要有<code>空格</code></li><li>列表嵌套：上一级和下一级之间敲<code>三个空格</code>即可</li></ul><pre><code>1. 一级有序列表   * 二级无序列表   * 二级无序列表      1. 三级有序列表      2. 三级有序列表         - 四级无序列表         - 四级无序列表   * 无序列表2. 一级有序列表3. 一级有序列表</code></pre><p><strong>显示效果如下：</strong></p><p><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190926190712.png" alt=""></p><h3 id="1-4-插入-链接-图片"><a href="#1-4-插入-链接-图片" class="headerlink" title="1.4 插入 链接/图片"></a>1.4 插入 链接/图片</h3><p>Markdown 支持两种形式的链接语法： <code>Inline-style</code>(行内式)和<code>Reference-style</code>(参考式)两种形式，行内式一般使用较多。</p><h4 id="1-4-1-行内式"><a href="#1-4-1-行内式" class="headerlink" title="1.4.1 行内式"></a>1.4.1 行内式</h4><p><strong>语法说明：</strong></p><ul><li><code>[ ]</code>里写链接文字，<code>( )</code>里写链接地址，<code>( )</code>中的<code>" "</code>中可以为链接指定<code>title</code>属性，<code>title</code>属性可加可不加。</li><li><code>title</code>属性的效果，是鼠标悬停在链接上会出现指定的<code>title</code>文字。</li><li>链接地址与链接标题前有一个空格。</li></ul><pre><code>欢迎访问[＆娴敲棋子＆'s Blog](https://HGzhao.github.io/)欢迎访问[＆娴敲棋子＆'s Blog](https://HGzhao.github.io/ "＆娴敲棋子＆'s Blog")</code></pre><p><strong>显示效果如下：</strong></p><p>欢迎访问<a href="https://HGzhao.github.io/">＆娴敲棋子＆’s Blog</a></p><p>欢迎访问<a href="https://HGzhao.github.io/" title="＆娴敲棋子＆'s Blog">＆娴敲棋子＆’s Blog</a></p><h4 id="1-4-2-参考式"><a href="#1-4-2-参考式" class="headerlink" title="1.4.2 参考式"></a>1.4.2 参考式</h4><p>参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p><p><strong>语法说明：</strong></p><ul><li>参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。</li><li>如果链接文字本身可以做为链接标记，你也可以写成[链接文字][] [链接文字]：链接地址的形式，见代码的最后一行。</li></ul><pre><code>网站推荐[Github][1]、[＆娴敲棋子＆'s Blog][2]、[＆娴敲棋子＆'s Blog][]。[1]:https://github.com/[2]:https://HGzhao.github.io/ "＆娴敲棋子＆'s Blog"[＆娴敲棋子＆'s Blog]:https://HGzhao.github.io/</code></pre><p><strong>显示效果如下：</strong></p><p>网站推荐<a href="https://github.com/" target="_blank" rel="noopener">Github</a>、<a href="https://HGzhao.github.io/" title="＆娴敲棋子＆'s Blog">＆娴敲棋子＆’s Blog</a>、<a href="https://HGzhao.github.io/">＆娴敲棋子＆’s Blog</a>。</p><h4 id="1-4-3-自动链接"><a href="#1-4-3-自动链接" class="headerlink" title="1.4.3 自动链接"></a>1.4.3 自动链接</h4><p><strong>语法说明：</strong></p><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre><code>&lt;http://example.com/&gt;&lt;address@example.com&gt;</code></pre><p><strong>显示效果如下：</strong></p><p><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a><br><a href="mailto:address@example.com" target="_blank" rel="noopener">address@example.com</a></p><h4 id="1-4-4-插入图片"><a href="#1-4-4-插入图片" class="headerlink" title="1.4.4 插入图片"></a>1.4.4 插入图片</h4><p>图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。</p><p>语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。</p><pre><code>![图片alt](图片地址 ''图片title'')图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加Inline-style: ![alt text](https://d233eq3e3p3cv0.cloudfront.net/fit/c/256/256/0*njGaeIRG6IiQJqNX.jpeg “Logo Title Text 1")Reference-style: ![alt text][logo][logo]: https://d233eq3e3p3cv0.cloudfront.net/fit/c/256/256/0*njGaeIRG6IiQJqNX.jpeg “Logo Title Text 2"</code></pre><h3 id="1-5-代码块和语法高亮"><a href="#1-5-代码块和语法高亮" class="headerlink" title="1.5 代码块和语法高亮"></a>1.5 代码块和语法高亮</h3><p>Blocks of code are either fenced by lines with three back-ticks ```, or are indented with four spaces. I recommend only using the fenced code blocks — they’re easier and only they support syntax highlighting.</p><p><strong>语法说明：</strong></p><p><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190926195729.png" alt=""></p><p><strong>显示效果如下：</strong><br>javascript</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> “JavaScript syntax highlighting”<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>python</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> “Python syntax highlighting”<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>HTML</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span>orange</span><span class="token punctuation">></span></span>背景色是：orange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>不指定语言</p><pre><code>No language indicated, so no syntax highlighting. But let’s throw in a &lt;b&gt;tag&lt;/b&gt;.</code></pre><h3 id="1-6-表格"><a href="#1-6-表格" class="headerlink" title="1.6 表格"></a>1.6 表格</h3><p><strong>语法说明：</strong></p><pre><code>| 左对齐标题 | 右对齐标题 | 居中对齐标题 || :------| ------: | :------: || 短文本 | 中等文本 | 稍微长一点的文本 || 稍微长一点的文本 | 短文本 | 中等文本 |*字体倾斜* | `语法高亮` | **字体加粗**-- | -- | --1 | 2 | 3</code></pre><ul><li>第二行用于分割表头和内容。</li><li><code>-</code>有一个就行，为了对齐，多加了几个<ul><li><code>:---</code>表示所在列的内容居<code>左</code>对齐</li><li><code>:--:</code>表示所在列的内容<code>居中</code>对齐</li><li><code>---:</code>表示所在列的内容居<code>右</code>对齐</li></ul></li><li>此外，最外侧的管道符可以省略。</li></ul><p><strong>显示效果如下：</strong> （第一个表格）</p><p><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190926190708.png" alt=""></p><h3 id="1-7-引用"><a href="#1-7-引用" class="headerlink" title="1.7 引用"></a>1.7 引用</h3><p><strong>语法说明：</strong></p><ul><li>在引用的文字前加<code>&gt;</code>即可。</li><li>引用也可以嵌套，如加两个<code>&gt;&gt;</code>，三个<code>&gt;&gt;&gt;</code>，n个…这可以一直加下去。</li></ul><pre><code>&gt; 这是引用的内容&gt;&gt; 这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 这是引用的内容</code></pre><p><strong>显示效果如下：</strong></p><p><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190926193336.png" alt=""></p><p>或是如下这种显示方式：</p><blockquote><p>这是第一级引用的内容</p><blockquote><p>这是第二级引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是第八级引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h3 id="1-8-分割线"><a href="#1-8-分割线" class="headerlink" title="1.8 分割线"></a>1.8 分割线</h3><p><strong>语法说明：</strong></p><ul><li>三个或者三个以上的<code>-</code>或者<code>*</code>即可作出分割线。</li></ul><pre><code>-------*******</code></pre><p><strong>显示效果如下：</strong>（此处仅拿其中一种写法做为展示）</p><p><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190926190711.png" alt=""></p><h2 id="2-进阶技巧"><a href="#2-进阶技巧" class="headerlink" title="2 进阶技巧"></a>2 进阶技巧</h2><h3 id="2-1-缩进"><a href="#2-1-缩进" class="headerlink" title="2.1 缩进"></a>2.1 缩进</h3><p><strong>语法说明：</strong></p><ul><li>不断行的空白格 </li><li>半角的空格</li><li>全角的空格</li></ul><h3 id="2-2-换行"><a href="#2-2-换行" class="headerlink" title="2.2 换行"></a>2.2 换行</h3><p><strong>语法说明：</strong></p><ul><li>方法1: 连续两个以上空格+回车</li><li>方法2：使用html语言换行标签：<code>&lt;br&gt;</code></li></ul><h3 id="2-3-链接的高级技巧"><a href="#2-3-链接的高级技巧" class="headerlink" title="2.3 链接的高级技巧"></a>2.3 链接的高级技巧</h3><h4 id="2-3-1-注脚"><a href="#2-3-1-注脚" class="headerlink" title="2.3.1 注脚"></a>2.3.1 注脚</h4><p><strong>语法说明：</strong></p><ul><li>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。</li><li>脚注自动被搬运到最后面，请到文章末尾查看，并且脚注后方的链接可以直接跳转回到加注的地方。</li></ul><h4 id="2-3-2-内容目录"><a href="#2-3-2-内容目录" class="headerlink" title="2.3.2 内容目录"></a>2.3.2 内容目录</h4><p><strong>语法说明：</strong></p><ul><li>关于目录生成，只要文章是按照markdown语法写作的。在需要生成目录的地方写<code>[TOC]</code>即可。</li><li>注意，在<code>[TOC]</code>上下需要空出一行。</li><li>有些Markdown编辑器需要使用<code>@[TOC]</code>语法。</li></ul><h4 id="2-3-3-锚点"><a href="#2-3-3-锚点" class="headerlink" title="2.3.3 锚点"></a>2.3.3 锚点</h4><p><strong>名词解释：</strong><br>锚点是是网页制作中超级链接的一种，又叫命名锚记。命名锚记像一个迅速定位器一样是一种页面内的超级链接，运用相当普遍。<br>英文名：anchor<br>使用命名锚记可以在文档中设置标记，这些标记通常放在文档的特定主题处或顶部。然后可以创建到这些命名锚记的链接，这些链接可快速将访问者带到指定位置。<br>创建到命名锚记的链接的过程分为两步。首先，创建命名锚记，然后创建到该命名锚记的链接。</p><p><strong>语法说明：</strong><br>总之就是用于文章快速定位，点击目录便可直接跳转到指定位置。下面来介绍一下在MarkDown编辑器中怎么使用：</p><p>首先是建立一个跳转的连接。注意符号 # 和 target 参数要设置正确：<br><code>&lt;a href="#jump" target="_self"&gt;说明文字&lt;/a&gt;</code><br>然后标记要跳转到什么位置即可。文字颜色可随意设置，这里以红色为例：</p><p><span id="jump"><font color="red">跳转到这里：</font></span></p><h3 id="2-4-字体设置"><a href="#2-4-字体设置" class="headerlink" title="2.4 字体设置"></a>2.4 字体设置</h3><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式。但是它本身是不支持修改字体、字号与颜色等功能的！</p><p>CSDN-markdown编辑器是其衍生版本，扩展了Markdown的功能（如表格、脚注、内嵌HTML等等）！对，就是内嵌HTML，接下来要讲的功能就需要使用内嵌HTML的方法来实现。</p><p>字体，字号和颜色编辑如下代码</p><p><strong>语法说明：</strong></p><ul><li>字体：<code>&lt;font</code><strong>face</strong><code>= "</code>xxx<code>"&gt;我是</code>xxx<code>体字&lt;/font&gt;</code></li><li>字号：<code>&lt;font</code><strong>size</strong><code>=</code>xxx<code>&gt;我是</code>xxx<code>号字&lt;/font&gt;</code></li><li>颜色：<code>&lt;font</code><strong>color</strong><code>=</code>xxxx<code>&gt;我是</code>xxxx<code>色&lt;/font&gt;</code></li></ul><p><strong>显示效果如下：</strong></p><p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="red">我是红色</font><br><font color="#008000">我是绿色</font><br><font color="Blue">我是蓝色</font><br><font size="5">我是5号字</font><br><font face="等线" color="green" size="5">我是等线字，绿色，字号5</font></p><p><font face="等线">我是等线</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="7" face="YOUYUAN">color=#0099ff size=72 face=”幼圆”</font><br><font color="#00ffff" size="36">color=#00ffff 可以用十六位颜色值</font><br><font color="gray" size="36">color=gray 在这里也可以用已知的颜色名</font></p><h3 id="2-4-反斜杠转义"><a href="#2-4-反斜杠转义" class="headerlink" title="2.4 反斜杠转义"></a>2.4 反斜杠转义</h3><p>Markdown 中可以使用反斜杠转义 Markdown 语法符号为字面量. 例如, 如果你想用星号包围一个单词 (而不是 HTML 的<code>&lt;em&gt;</code>标签), 你可以在星号前面加<code>反斜杠(\)</code>, 就像这样:</p><pre><code>\*literal asterisks\*</code></pre><p><strong>显示效果如下：</strong></p><h3 id="2-5-特殊符号"><a href="#2-5-特殊符号" class="headerlink" title="2.5 特殊符号"></a>2.5 特殊符号</h3><p>‘<a href="https://unicode-table.com/cn/'" target="_blank" rel="noopener">https://unicode-table.com/cn/'</a></p><h3 id="2-6-添加背景色"><a href="#2-6-添加背景色" class="headerlink" title="2.6 添加背景色"></a>2.6 添加背景色</h3><p>Markdown本身不支持背景色设置，需要采用内置html的方式实现：借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色的功能。举例如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span>orange</span><span class="token punctuation">></span></span>背景色是：orange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p><strong>显示效果如下：</strong></p><table><tbody><tr><td bgcolor="orange">背景色是：orange</td></tr></tbody></table><h3 id="2-7-emoji表情"><a href="#2-7-emoji表情" class="headerlink" title="2.7 emoji表情"></a>2.7 emoji表情</h3><h2 id="3-高级用法"><a href="#3-高级用法" class="headerlink" title="3 高级用法"></a>3 高级用法</h2><h3 id="3-1-Latex-数学公式"><a href="#3-1-Latex-数学公式" class="headerlink" title="3.1 Latex 数学公式"></a>3.1 Latex 数学公式</h3><p><strong>语法说明：</strong></p><ul><li>行内公式：使用两个”<code>$</code>”符号引用公式: <code>$公式$</code></li><li>行间公式：使用两对“<code>$$</code>”符号引用公式： <code>$$公式$$</code></li></ul><h3 id="3-2-Todo-List"><a href="#3-2-Todo-List" class="headerlink" title="3.2 Todo List"></a>3.2 Todo List</h3><p><strong>语法说明：</strong></p><pre><code>-[ ] 待办事项1-[ ] 待办事项2-[x] 已办事项1</code></pre><p><strong>显示效果如下：</strong></p><h3 id="3-3-绘制流程图"><a href="#3-3-绘制流程图" class="headerlink" title="3.3 绘制流程图"></a>3.3 绘制流程图</h3><p><strong>语法说明：</strong></p><p><strong>显示效果如下：</strong></p><h3 id="3-4-绘制甘特图"><a href="#3-4-绘制甘特图" class="headerlink" title="3.4 绘制甘特图"></a>3.4 绘制甘特图</h3><h3 id="3-5-绘制序列图"><a href="#3-5-绘制序列图" class="headerlink" title="3.5 绘制序列图"></a>3.5 绘制序列图</h3><h2 id="4-Markdown工具"><a href="#4-Markdown工具" class="headerlink" title="4 Markdown工具"></a>4 Markdown工具</h2><h3 id="4-1-快捷键"><a href="#4-1-快捷键" class="headerlink" title="4.1 快捷键"></a>4.1 快捷键</h3><h2 id="5-Markdown-的大大小小坑"><a href="#5-Markdown-的大大小小坑" class="headerlink" title="5 Markdown 的大大小小坑"></a>5 Markdown 的大大小小坑</h2><h3 id="5-1-Markdown版本演进"><a href="#5-1-Markdown版本演进" class="headerlink" title="5.1 Markdown版本演进"></a>5.1 Markdown版本演进</h3><p><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190926201507.png" alt=""></p><h3 id="5-2-语法差异"><a href="#5-2-语法差异" class="headerlink" title="5.2 语法差异"></a>5.2 语法差异</h3><p>语法差异其实就是看支持的是 Markdown 的哪一种实现，以及对应的配置选择。好消息就是，通用的格式 CommonMark 里面基础的标记是都支持的，只是单纯文字和图片几乎是随处可用，样式一致。</p><p>有兴趣的话，可以看看这个开源项目，它统计了不同Markdown实现的33个版本差异：<br><a href="https://babelmark.github.io/faq/" target="_blank" rel="noopener">https://babelmark.github.io/faq/</a></p><p>举个例子：支持扩展效果不一致</p><p>最典型的就是表格和流程图了。大部分的实现都支持表格的功能，通过 Babelmark 3 可以看到 6 种转换后的 Html，如果表格里面还使用了加粗的话更是惨不忍睹，12 种效果任君猜测在不同网站显示，你绝对想不到的。</p><h3 id="5-3-显示效果"><a href="#5-3-显示效果" class="headerlink" title="5.3 显示效果"></a>5.3 显示效果</h3><p>这也是个天坑，辛苦的写好后，最终是需要面对读者的。引起的原因无非是实现的扩展功能不一致以及网站的 CSS 样式差异影响到了排版。</p><ul><li>实现的扩展功能不一致</li><li>CSS 样式差异影响</li><li>这时候就必须要关注效果了。有预览功能那是最好的，否则需要一次次的发布然后查看，修改。因此选择的工具和你发布的平台的兼容性问题就来了，最好是都是同一个核心源码的变种实现。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Efficiency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Efficiency </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio 最常用的快捷键</title>
      <link href="/2019/09/16/vs-keyboard-shortcuts/"/>
      <url>/2019/09/16/vs-keyboard-shortcuts/</url>
      
        <content type="html"><![CDATA[<h1 id="Visual-Studio-最常用的快捷键"><a href="#Visual-Studio-最常用的快捷键" class="headerlink" title="Visual Studio 最常用的快捷键"></a>Visual Studio 最常用的快捷键</h1><blockquote><p>Microsoft Visual Studio（简称VS）是微软公司的开发工具包系列产品。VS是一个基本完整的开发工具集，它包括了整个软件生命周期中所需要的大部分工具，如UML工具、代码管控工具、集成开发环境（IDE）等等。所写的目标代码适用于微软支持的所有平台，包括Microsoft Windows、Windows Phone、Windows CE、.NET Framework、.NET Compact Framework和Microsoft Silverlight。</p></blockquote><p>有这么一款强悍的IDE工具，再加上一些常用的快捷键，那工作效率地提升不止一点两点！</p><p>每次在网上搜关于VS有哪些常用快捷键的时候，出来的永远是一串长的不能再长的列表，完全没体现出“常用”二字，每次看完前面几个就看不下去了，相信大家都 有这种感觉。其实我们平时用的真的只有很少的一部分，借用一句“二八原则”——其中20%的常用快捷键就可以完成你80%的任务了，当然这里20%不准确，只是说明这样一个事实。下面是我平时用VS编程时真正用的比较多的快捷键，就这么十几个，看完毫无压力，多看几遍就能完全记住了<del>~</del>得意</p><p>当然每个人常用的一般都会有些不一样，欢迎大家评论说出自己常用或最常用的快捷键吧，比比看谁用的巧<del>~</del></p><p>ctrl+-（shift+ctrl+-）：移动光标到上次位置或相反，比如定位一个函数，转到函数定义后想回到函数使用处，则用ctrl+-，若又想回到函数定义处则可以按shift+ctrl+-<br>F12：Go to Definition，到变量或函数定义的地方，如变量声明处，函数实现处。与ctrl+-配合使用非常方便</p><p>Ctrl+]：匹配选中的括号（大括号、小括号都行），在多层循环+判断语句时非常方便</p><p>ctrl+Space：代码补全</p><p>ctrl+tab：在VS中切换打开的窗口，即切换各个文件</p><p>ctrl+I：递增搜索，与ctrl+F不同的是搜索期间不显示搜索对话框，且ctrl+F搜索下一个直接按Enter即可，而ctrl+I搜索下一个按ctrl+I或F3，Escape退出，连续按两次ctrl+I重复上次搜索<br>Ctrl+Shift+F：旧式的文件搜索对话框（与记事本中的搜索替换框差不多，可以替换）<br>Ctrl+F3：为当前选中的部分进行搜索（不需要再输入要搜索的内容）</p><p>Shift+Alt+Enter：最大化代码编写区域（代码全屏模式），即去掉所有其它辅助窗口只留下代码编写窗口，再按一次返回到原来界面</p><p>ctrl+K，Ctrl+C：注释一段代码块（先要选中一段代码）<br>ctrl+K，Ctrl+U：取消注释一段代码块<br>ctrl+K，Ctrl+D：代码自动格式化（整个文档）<br>ctrl+K，Ctrl+F：只格式化你选中的部分</p><p>Ctrl+K，Ctrl+K：在当前行创建一个书签<br>Ctrl+K, Ctrl+N：去下一个书签处</p><p>Ctrl+C, Ctrl+V：在当前行的下一行复制当前行内容（不用选中当前行），即复制当前行并粘贴到下一行，在两行内容差不多时很有用，可以先复制再改<br>Ctrl+L：删除当前行</p><p>Ctrl+M, Ctrl+M：展开或关闭当前的代码</p><ul><li>项目相关</li></ul><table><thead><tr><th align="left">项目相关</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left">Ctrl + Shift + B</td><td align="left">生成项目</td></tr><tr><td align="left">Ctrl + Alt + L</td><td align="left">显示Solution Explorer（解决方案资源管理器）</td></tr><tr><td align="left">Shift + Alt+ C</td><td align="left">添加新类</td></tr><tr><td align="left">Shift + Alt + A</td><td align="left">添加新项目到项目</td></tr></tbody></table><ul><li>编辑相关</li></ul><table><thead><tr><th align="left">编辑相关</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left">Ctrl + Enter</td><td align="left">在当前行插入空行</td></tr><tr><td align="left">Ctrl + Shift + Enter</td><td align="left">在当前行下方插入空行</td></tr><tr><td align="left">Ctrl +空格键</td><td align="left">使用IntelliSense（智能感知）自动完成</td></tr><tr><td align="left">Alt + Shift +箭头键(←,↑,↓,→)</td><td align="left">选择代码的自定义部分</td></tr><tr><td align="left">Ctrl + }</td><td align="left">匹配大括号、括号</td></tr><tr><td align="left">Ctrl + Shift +}</td><td align="left">在匹配的括号、括号内选择文本</td></tr><tr><td align="left">Ctrl + Shift + S</td><td align="left">保存所有文件和项目</td></tr><tr><td align="left">Ctrl + K，Ctrl + C</td><td align="left">注释选定行</td></tr><tr><td align="left">Ctrl + K，Ctrl + U</td><td align="left">取消选定行的注释</td></tr><tr><td align="left">Ctrl + K，Ctrl + D</td><td align="left">正确对齐所有代码</td></tr><tr><td align="left">Shift + End</td><td align="left">从头到尾选择整行</td></tr><tr><td align="left">Shift + Home</td><td align="left">从尾到头选择整行</td></tr><tr><td align="left">Ctrl + Delete</td><td align="left">删除光标右侧的所有字</td></tr></tbody></table><ul><li>导航相关</li></ul><table><thead><tr><th align="left">导航相关</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left">Ctrl +Up/Down</td><td align="left">滚动窗口但不移动光标</td></tr><tr><td align="left">Ctrl + -</td><td align="left">让光标移动到它先前的位置</td></tr><tr><td align="left">Ctrl ++</td><td align="left">让光标移动到下一个位置</td></tr><tr><td align="left">F12</td><td align="left">转到定义</td></tr></tbody></table><ul><li>调试相关</li></ul><table><thead><tr><th align="left">调试相关</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left">Ctrl + Alt + P</td><td align="left">附加到进程</td></tr><tr><td align="left">F10</td><td align="left">调试单步执行</td></tr><tr><td align="left">F5</td><td align="left">开始调试</td></tr><tr><td align="left">Shift + F5</td><td align="left">停止调试</td></tr><tr><td align="left">Ctrl + Alt + Q</td><td align="left">添加快捷匹配</td></tr><tr><td align="left">F9</td><td align="left">设置或删除断点</td></tr></tbody></table><ul><li>搜索相关</li></ul><table><thead><tr><th align="left">搜索相关</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left">Ctrl + K  Ctrl + K</td><td align="left">将当前行添加书签</td></tr><tr><td align="left">Ctrl + K  Ctrl + N</td><td align="left">导航至下一个书签</td></tr><tr><td align="left">Ctrl + .</td><td align="left">若键入一个类，名如<code>Collection&lt;string&gt;</code>，且命名空间导入不正确的话，那么这个快捷方式组合将自动插入导入</td></tr><tr><td align="left">Ctrl + Shift + F</td><td align="left">在文件中查找</td></tr><tr><td align="left">Shift  + F12</td><td align="left">查找所有引用</td></tr><tr><td align="left">Ctrl + F</td><td align="left">显示查找对话框</td></tr><tr><td align="left">Ctrl + H</td><td align="left">显示替换对话框</td></tr><tr><td align="left">Ctrl + G</td><td align="left">跳转到行号或行</td></tr><tr><td align="left">Ctrl + Shift + F</td><td align="left">查找所选条目在整个解决方案中的引用</td></tr></tbody></table><p>有这么一款强悍的IDE工具，再加上一些常用的快捷键，那工作效率地提升不止一点两点！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Efficiency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio </tag>
            
            <tag> Efficiency </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python + Selenium 小技巧之等待</title>
      <link href="/2019/09/14/python-selenium-waiting/"/>
      <url>/2019/09/14/python-selenium-waiting/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Selenium-小技巧之等待"><a href="#Python-Selenium-小技巧之等待" class="headerlink" title="Python + Selenium 小技巧之等待"></a>Python + Selenium 小技巧之等待</h1><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在自动化测试过程中有一种情况很常见，明明你的定位没有问题，代码执行时却直接报了元素不可见。这时就需要考虑下是不是因为程序运行太快，或者由于页面加载太慢造成了元素还没出来就已经报错了。要知道浏览器的渲染加载比不上你代码执行的速度。<br><br><br>为了解决这种情况，就用到了等待，在Selenium中有三种等待方式，分别为强制等待、隐式等待、显式等待。</p><h3 id="强制等待"><a href="#强制等待" class="headerlink" title="强制等待"></a>强制等待</h3><p>第一种等待方式：强制等待，其实指的就是<code>time</code>模块的<code>sleep</code>，示例如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://HGzhao.github.io'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 单位为秒(s)</span>browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="优缺点说明"><a href="#优缺点说明" class="headerlink" title="优缺点说明"></a>优缺点说明</h5><ul><li>优点<br>简单明了，需要等待的时候直接time.sleep()，等待的时长根据执行Case的需要来定。</li><li>缺点<br>不智能。若设置的时间短，元素还没有加载出来，照样会报错；若设置的时间过长，便会加长Case的执行时间，影响整体的运行速度。</li></ul><h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h3><p>第二种等待方式：隐式等待，使用的是<code>webdriver</code>中<code>implicitly_wait()</code>函数，示例如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>  browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 最长等待20秒  </span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://HGzhao.github.io'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这里有两点需要注意：</p><ol><li>隐式等待的设置时全局性的，在开头设置过之后，整个的程序运行过程中都会有效，都会等待页面加载完成；不需要每次设置一遍。</li><li>页面加载完成后新打开的弹窗是没有等待效果的。</li></ol><h5 id="优缺点说明-1"><a href="#优缺点说明-1" class="headerlink" title="优缺点说明"></a>优缺点说明</h5><ul><li>优点<br>相比sleep() ，隐性更加智能，它会在你设置的时间内判断网页是否加载完成，如果完成了，就进行下一步；在设置的时间内没有加载完成，则会报超时加载。</li><li>缺点<br>随着ajax技术的广泛应用，页面的元素往往都可以局部加载，也就是在整个页面没有加载完的时候，可能我们需要的元素已经加载完成了，那就么有必要再等待整个页面的加载。这就引出了第三种等待的方式—显式等待。</li></ul><h3 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h3><p>第三种等待方式：显式等待，使用的是<code>WebDriverWait</code>，配合该类的until()和until_not()方法，就能够根据判断条件而进行灵活地等待了。示例如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> ECbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 为了更好的对比效果，首先我们设置了一个存在的元素，然后在去找一个不存在的元素，同样设置了10s的等待时间</span><span class="token keyword">try</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># kw元素存在</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    element <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 不存在的kwqq元素</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    element <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"kwqq"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>说明：<br>1、<code>until</code>也属于<code>WebDriverWait</code>，代表一直等待，直到某元素可见。而<code>until_not</code>与其相反，判断某个元素直到不存在。<br>2、<code>presence_of_element_located</code>主要判断页面元素kw在页面中存在。</p><h5 id="优缺点说明-2"><a href="#优缺点说明-2" class="headerlink" title="优缺点说明"></a>优缺点说明</h5><ul><li>优点<br>它会不断的根据你设定的条件去判断，直到超过你设置的等待时间，如果设置的条件满足，然后进行下一步操作。<br>如果没有满足会报一个<code>selenium.common.exceptions.TimeoutException: Message:</code>错误。</li></ul><h3 id="多种等待混合使用"><a href="#多种等待混合使用" class="headerlink" title="多种等待混合使用"></a>多种等待混合使用</h3><p>隐性等待和显性等待可以同时用，但要注意：等待的最长时间取两者之中的大者。示例如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> Bybrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://HGzhao.github.io'</span><span class="token punctuation">)</span>locator <span class="token operator">=</span> <span class="token punctuation">(</span>By<span class="token punctuation">.</span>LINK_TEXT<span class="token punctuation">,</span> <span class="token string">'CSDN'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">'CSDN'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>我们在实际使用selenium或appium执行一些自动化操作时，对一个待定位元素的出现特别是web端加载的过程，等待是一种行之有效的方式。设置一种合理地等待方式，是保证脚本稳定有效运行的一个非常重要的手段。此外需要注意的是，对于元素的选择，最好将其独立封装成方法，在每个方法中可以加上日志、显式等待。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code 快捷键最全攻略(附中文释义)</title>
      <link href="/2019/09/11/vscode-keyboard-shortcuts/"/>
      <url>/2019/09/11/vscode-keyboard-shortcuts/</url>
      
        <content type="html"><![CDATA[<h1 id="VS-Code-快捷键最全攻略-附中文释义"><a href="#VS-Code-快捷键最全攻略-附中文释义" class="headerlink" title="VS Code 快捷键最全攻略(附中文释义)"></a>VS Code 快捷键最全攻略(附中文释义)</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Visual Studio Code（简称VS Code）是一个由微软开发，同时支持Windows 、 Linux和macOS等操作系统且开放源代码的代码编辑器，它支持测试，并内置了Git 版本控制功能，同时也具有开发环境功能，例如代码补全（类似于 IntelliSense）、代码片段和代码重构等，该编辑器支持用户个性化配置，例如改变主题颜色、键盘快捷方式等各种属性和参数，同时还在编辑器中内置了扩展程序管理的功能。</p><p>VS Code是介于<code>文本编辑器</code>与<code>IDE</code>之间的工具，我们可以通过这张图来了解VSCode的定位。<br><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190922135830.jpg" alt=""></p><p>VSCode 的快捷键继承了一些IDE风格，有VS的影子，也有Emacs的影子……可以通过下面这张图来了解它的定位。简言之，内置快捷键玩熟了，对效率地提升不是一点两点。</p><p>以下是在Windows系统中VS code快捷键的最全说明，并附有对应的中文释义。</p><p>一点点地码出来，真心不易😅😅😅</p><h2 id="快捷键的组合方式"><a href="#快捷键的组合方式" class="headerlink" title="快捷键的组合方式"></a>快捷键的组合方式</h2><ul><li>Ctrl + Shift + ? : 这种常规组合按钮</li><li>Ctrl + V Ctrl + V : 同时依赖一个按键的组合</li><li>Shift + V c : 先组合后单键的输入</li><li>Ctrl + Click: 键盘 + 鼠标点击</li><li>Ctrl + DragMouse : 键盘 + 鼠标拖动</li></ul><h2 id="Keyboard-shortcuts-for-Windows"><a href="#Keyboard-shortcuts-for-Windows" class="headerlink" title="Keyboard shortcuts for Windows"></a>Keyboard shortcuts for Windows</h2><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><table><thead><tr><th align="left">通用快捷键</th><th align="left">作用</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left"><code>Ctrl+Shift+P</code>, <code>F1</code></td><td align="left">Show Command Palette</td><td align="left">展示全局命令面板</td></tr><tr><td align="left"><code>Ctrl + P</code></td><td align="left">Quick Open, Go to File…</td><td align="left">快速打开最近打开的文件</td></tr><tr><td align="left"><code>Ctrl + Shift + N</code></td><td align="left">New window/instance</td><td align="left">打开新的编辑器窗口</td></tr><tr><td align="left"><code>Ctrl + Shift + W</code></td><td align="left">Close window/instance</td><td align="left">关闭编辑器</td></tr><tr><td align="left"><code>Ctrl +,</code></td><td align="left">User Settings</td><td align="left">用户设置项</td></tr><tr><td align="left"><code>Ctrl+K Ctrl+S</code></td><td align="left">Keyboard Shortcuts</td><td align="left">快捷键设置</td></tr></tbody></table><h3 id="Basic-editing"><a href="#Basic-editing" class="headerlink" title="Basic editing"></a>Basic editing</h3><table><thead><tr><th align="left">基础编辑</th><th align="left">作用</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left"><code>Ctrl + X</code></td><td align="left">Cut line (empty selection)</td><td align="left">剪切</td></tr><tr><td align="left"><code>Ctrl + C</code></td><td align="left">Copy line (empty selection)</td><td align="left">复制</td></tr><tr><td align="left"><code>Alt + ↑ / ↓</code></td><td align="left">Move line up/down</td><td align="left">移动行上下</td></tr><tr><td align="left"><code>Shift + Alt + ↓ / ↑</code></td><td align="left">Copy line up/down</td><td align="left">在当前行上下复制当前行</td></tr><tr><td align="left"><code>Ctrl + Shift + K</code></td><td align="left">Delete line</td><td align="left">删除行</td></tr><tr><td align="left"><code>Ctrl + Enter</code></td><td align="left">Insert line below</td><td align="left">在当前行下插入新的一行</td></tr><tr><td align="left"><code>Ctrl + Shift + Enter</code></td><td align="left">Insert line above</td><td align="left">在当前行上插入新的一行</td></tr><tr><td align="left"><code>Ctrl + Shift + |</code></td><td align="left">Jump to matching bracket</td><td align="left">匹配花括号的闭合处，跳转</td></tr><tr><td align="left"><code>Ctrl + ] / [</code></td><td align="left">Indent/outdent line</td><td align="left">行缩进</td></tr><tr><td align="left"><code>Ctrl + Shift + Enter</code></td><td align="left">Insert line above</td><td align="left">在当前行上插入新的一行</td></tr><tr><td align="left"><code>Home / End</code></td><td align="left">Go to beginning/end of line</td><td align="left">光标跳转到 行头/行尾</td></tr><tr><td align="left"><code>Ctrl + Home / End</code></td><td align="left">Go to beginning/end of file</td><td align="left">跳转到 页头/页尾</td></tr><tr><td align="left"><code>Ctrl+ ↑ / ↓</code></td><td align="left">Scroll line up/down</td><td align="left">行视图上下偏移</td></tr><tr><td align="left"><code>Alt+ PgUp / PgDown</code></td><td align="left">Scroll page up/down</td><td align="left">屏视图上下偏移</td></tr><tr><td align="left"><code>Ctrl + Shift + ] / [</code></td><td align="left">Unfold/Fold (uncollapse) region</td><td align="left">折叠/展开 区域代码</td></tr><tr><td align="left"><code>Ctrl+K Ctrl+[</code></td><td align="left">Fold (collapse) all subregions</td><td align="left">折叠所有子区域代码</td></tr><tr><td align="left"><code>Ctrl+K Ctrl+]</code></td><td align="left">Unfold (uncollapse) all subregions</td><td align="left">展开所有折叠的子区域代码</td></tr><tr><td align="left"><code>Ctrl+K Ctrl+0</code></td><td align="left">Fold (collapse) all regions</td><td align="left">折叠所有区域代码</td></tr><tr><td align="left"><code>Ctrl+K Ctrl+J</code></td><td align="left">Unfold (uncollapse) all regions</td><td align="left">展开所有折叠区域代码</td></tr><tr><td align="left"><code>Ctrl+K Ctrl+C</code></td><td align="left">Add line comment</td><td align="left">添加行注释</td></tr><tr><td align="left"><code>Ctrl+K Ctrl+U</code></td><td align="left">Remove line comment</td><td align="left">删除行注释</td></tr><tr><td align="left"><code>Ctrl + /</code></td><td align="left">Toggle line comment</td><td align="left">添加关闭行注释</td></tr><tr><td align="left"><code>Shift + Alt + A</code></td><td align="left">Toggle block comment</td><td align="left">块区域注释</td></tr><tr><td align="left"><code>Alt + Z</code></td><td align="left">Toggle word wrap</td><td align="left">添加关闭词汇包含</td></tr></tbody></table><h3 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h3><table><thead><tr><th align="left">导航</th><th align="left">作用</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left"><code>Ctrl + T</code></td><td align="left">Show all Symbols</td><td align="left">列出所有符号</td></tr><tr><td align="left"><code>Ctrl + G</code></td><td align="left">Go to Line…</td><td align="left">跳转行</td></tr><tr><td align="left"><code>Ctrl + P</code></td><td align="left">Go to File…</td><td align="left">跳转文件</td></tr><tr><td align="left"><code>Ctrl + Shift + O</code></td><td align="left">Go to Symbol…</td><td align="left">跳转到符号处</td></tr><tr><td align="left"><code>Ctrl + Shift + M</code></td><td align="left">Show Problems panel</td><td align="left">打开问题展示面板</td></tr><tr><td align="left"><code>F8</code></td><td align="left">Go to next error or warning</td><td align="left">跳转到下一个错误或者警告</td></tr><tr><td align="left"><code>Shift + F8</code></td><td align="left">Go to previous error or warning</td><td align="left">跳转到上一个错误或者警告</td></tr><tr><td align="left"><code>Ctrl + Shift + Tab</code></td><td align="left">Navigate editor group history</td><td align="left">切换到最近打开的文件</td></tr><tr><td align="left"><code>Alt+ ← / →</code></td><td align="left">Go back / forward</td><td align="left">向后、向前</td></tr><tr><td align="left"><code>Ctrl + M</code></td><td align="left">Toggle Tab moves focus</td><td align="left">进入用Tab来移动焦点</td></tr></tbody></table><h3 id="Search-and-replace"><a href="#Search-and-replace" class="headerlink" title="Search and replace"></a>Search and replace</h3><table><thead><tr><th align="left">查询与替换</th><th align="left">作用</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left"><code>Ctrl + F</code></td><td align="left">Find</td><td align="left">查询</td></tr><tr><td align="left"><code>Ctrl + H</code></td><td align="left">Replace</td><td align="left">替换</td></tr><tr><td align="left"><code>F3 / Shift + F3</code></td><td align="left">Find next/previous</td><td align="left">查询 下一个/上一个</td></tr><tr><td align="left"><code>Alt + Enter</code></td><td align="left">Select all occurences of Find match</td><td align="left">选中所有出现在查询中的</td></tr><tr><td align="left"><code>Ctrl + D</code></td><td align="left">Add selection to next Find match</td><td align="left">匹配当前选中的词汇或者行，再次选中-可操作</td></tr><tr><td align="left"><code>Ctrl+K Ctrl+D</code></td><td align="left">Move last selection to next Find match</td><td align="left">移动当前选择到下个匹配选择的位置(光标选定)</td></tr><tr><td align="left"><code>Alt + C / R / W</code></td><td align="left">Toggle case-sensitive / regex / whole word</td><td align="left"></td></tr></tbody></table><h3 id="Multi-cursor-and-selection"><a href="#Multi-cursor-and-selection" class="headerlink" title="Multi-cursor and selection"></a>Multi-cursor and selection</h3><table><thead><tr><th align="left">多行光标操作于选择</th><th align="left">作用</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left"><code>Alt + Click</code></td><td align="left">Insert cursor</td><td align="left">插入光标-支持多个</td></tr><tr><td align="left"><code>Ctrl+Alt+ ↑ / ↓</code></td><td align="left">Insert cursor above / below</td><td align="left">上下插入光标-支持多个</td></tr><tr><td align="left"><code>Ctrl + U</code></td><td align="left">Undo last cursor operation</td><td align="left">撤销最后一次光标操作</td></tr><tr><td align="left"><code>Shift + Alt + I</code></td><td align="left">Insert cursor at end of each line selected</td><td align="left">插入光标到选中范围内所有行结束符</td></tr><tr><td align="left"><code>Ctrl + I</code></td><td align="left">Select current line</td><td align="left">选中当前行</td></tr><tr><td align="left"><code>Ctrl + Shift + L</code></td><td align="left">Select all occurrences of current selection</td><td align="left">选择所有出现在当前选中的行-操作</td></tr><tr><td align="left"><code>Ctrl + F2</code></td><td align="left">Select all occurrences of current word</td><td align="left">选择所有出现在当前选中的词汇-操作</td></tr><tr><td align="left"><code>Shift + Alt + →</code></td><td align="left">Expand selection</td><td align="left">从光标处扩展选中全行</td></tr><tr><td align="left"><code>Shift + Alt + ←</code></td><td align="left">Shrink selection</td><td align="left">收缩选择区域</td></tr><tr><td align="left"><code>Shift + Alt + (drag mouse)</code></td><td align="left">Column (box) selection</td><td align="left">鼠标拖动区域，同时在多个行结束符插入光标</td></tr><tr><td align="left"><code>Ctrl + Shift + Alt + (arrow key)</code></td><td align="left">Column (box) selection</td><td align="left">也是插入多行光标的[方向键控制]</td></tr><tr><td align="left"><code>Ctrl + Shift + Alt + PgUp/PgDown</code></td><td align="left">Column (box) selection page up/down</td><td align="left">也是插入多行光标的[整屏生效]</td></tr></tbody></table><h3 id="Rich-languages-editing"><a href="#Rich-languages-editing" class="headerlink" title="Rich languages editing"></a>Rich languages editing</h3><table><thead><tr><th align="left">丰富的语言操作</th><th align="left">作用</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left"><code>Ctrl + Space</code></td><td align="left">Trigger suggestion</td><td align="left">输入建议[智能提示]</td></tr><tr><td align="left"><code>Ctrl + Shift + Space</code></td><td align="left">Trigger parameter hints</td><td align="left">参数提示</td></tr><tr><td align="left"><code>Shift + Alt + F</code></td><td align="left">Format document</td><td align="left">格式化代码</td></tr><tr><td align="left"><code>Ctrl + K Ctrl + F</code></td><td align="left">Format selection</td><td align="left">格式化选中部分的代码</td></tr><tr><td align="left"><code>F12</code></td><td align="left">Go to Definition</td><td align="left">跳转到定义处</td></tr><tr><td align="left"><code>Alt + F12</code></td><td align="left">Peek Definition</td><td align="left">代码片段显示定义</td></tr><tr><td align="left"><code>Ctrl + K F12</code></td><td align="left">Open Definition to the side</td><td align="left">在其他窗口打开定义处</td></tr><tr><td align="left"><code>Ctrl + .</code></td><td align="left">Quick Fix</td><td align="left">快速修复部分可以修复的语法错误</td></tr><tr><td align="left"><code>Shift + F12</code></td><td align="left">Show References</td><td align="left">显示所有引用</td></tr><tr><td align="left"><code>F2</code></td><td align="left">Rename Symbol</td><td align="left">重命名符号</td></tr><tr><td align="left"><code>Ctrl+K Ctrl+X</code></td><td align="left">Trim trailing whitespace</td><td align="left">移除空白字符</td></tr><tr><td align="left"><code>Ctrl + K M</code></td><td align="left">Change file language</td><td align="left">更改页面文档格式</td></tr></tbody></table><h3 id="Editor-Window-management"><a href="#Editor-Window-management" class="headerlink" title="Editor/Window management"></a>Editor/Window management</h3><table><thead><tr><th align="left">编辑器/窗口管理</th><th align="left">作用</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left"><code>Ctrl + F4</code>, <code>Ctrl + W</code></td><td align="left">Close editor</td><td align="left">关闭编辑器</td></tr><tr><td align="left"><code>Ctrl + k F</code></td><td align="left">Close folder</td><td align="left">关闭当前打开的文件夹</td></tr><tr><td align="left"><code>Ctrl + |</code></td><td align="left">Split editor</td><td align="left">切割编辑窗口</td></tr><tr><td align="left"><code>Ctrl+ 1 / 2 / 3</code></td><td align="left">ocus into 1 st , 2 nd or 3 rd editor group</td><td align="left">切换焦点在不同的切割窗口</td></tr><tr><td align="left"><code>Ctrl+K Ctrl+ ←/→</code></td><td align="left">Focus into previous/next editor group</td><td align="left">切换焦点在不同的切割窗口</td></tr><tr><td align="left"><code>Ctrl + Shift + PgUp/PgDown</code></td><td align="left">Move editor left/right</td><td align="left">切换标签页的位置</td></tr><tr><td align="left"><code>Ctrl+K ← / →</code></td><td align="left">Move active editor group</td><td align="left">切割窗口位置调换</td></tr></tbody></table><h3 id="File-management"><a href="#File-management" class="headerlink" title="File management"></a>File management</h3><table><thead><tr><th align="left">文件管理</th><th align="left">作用</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left"><code>Ctrl + N</code></td><td align="left">New File</td><td align="left">新建文件</td></tr><tr><td align="left"><code>Ctrl + O</code></td><td align="left">Open File…</td><td align="left">打开文件</td></tr><tr><td align="left"><code>Ctrl + S</code></td><td align="left">Save</td><td align="left">保存文件</td></tr><tr><td align="left"><code>Ctrl + Shift + S</code></td><td align="left">Save As…</td><td align="left">另存为</td></tr><tr><td align="left"><code>Ctrl + K S</code></td><td align="left">Save All</td><td align="left">保存所有当前已经打开的文件</td></tr><tr><td align="left"><code>Ctrl + F4</code></td><td align="left">Close</td><td align="left">关闭当前编辑窗口</td></tr><tr><td align="left"><code>Ctrl + K Ctrl + W</code></td><td align="left">Close All</td><td align="left">关闭所有编辑窗口</td></tr><tr><td align="left"><code>Ctrl + Shift + T</code></td><td align="left">Reopen closed editor</td><td align="left">撤销最近关闭的一个文件编辑窗口</td></tr><tr><td align="left"><code>Ctrl + K Enter</code></td><td align="left">Keep preview mode editor open</td><td align="left">保持开启</td></tr><tr><td align="left"><code>Ctrl + Shift + Tab</code></td><td align="left">Open previous</td><td align="left">调出最近打开的文件列表，重复按会切换</td></tr><tr><td align="left"><code>Ctrl + Tab</code></td><td align="left">Open next</td><td align="left">与上面一致，顺序不一致</td></tr><tr><td align="left"><code>Ctrl + K P</code></td><td align="left">Copy path of active file</td><td align="left">复制当前打开文件的存放路径</td></tr><tr><td align="left"><code>Ctrl + K R</code></td><td align="left">Reveal active file in Explorer</td><td align="left">打开当前编辑文件存放位置【文件管理器】</td></tr><tr><td align="left"><code>Ctrl + K O</code></td><td align="left">Show active file in new window/instance</td><td align="left">在新的编辑器中打开当前编辑的文件</td></tr></tbody></table><h3 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h3><table><thead><tr><th align="left">显示</th><th align="left">作用</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left"><code>F11</code></td><td align="left">Toggle full screen</td><td align="left">切换全屏模式</td></tr><tr><td align="left"><code>Shift + Alt + 1</code></td><td align="left">Toggle editor layout (horizontal/vertical)</td><td align="left">切换编辑布局【目前无效】</td></tr><tr><td align="left"><code>Ctrl + =/-</code></td><td align="left">Zoom in/out</td><td align="left">放大 / 缩小</td></tr><tr><td align="left"><code>Ctrl + B</code></td><td align="left">Toggle Sidebar visibility</td><td align="left">侧边栏显示隐藏</td></tr><tr><td align="left"><code>Ctrl + Shift + E</code></td><td align="left">Show Explorer / Toggle focus</td><td align="left">资源视图和编辑视图的焦点切换</td></tr><tr><td align="left"><code>Ctrl + Shift + F</code></td><td align="left">Show Search</td><td align="left">打开全局搜索</td></tr><tr><td align="left"><code>Ctrl + Shift + G</code></td><td align="left">Show Source Control</td><td align="left">打开Git可视管理</td></tr><tr><td align="left"><code>Ctrl + Shift + D</code></td><td align="left">Show Debug</td><td align="left">打开DeBug面板</td></tr><tr><td align="left"><code>Ctrl + Shift + X</code></td><td align="left">Show Extensions</td><td align="left">打开插件市场面板</td></tr><tr><td align="left"><code>Ctrl + Shift + H</code></td><td align="left">Replace in files</td><td align="left">在当前文件替换查询替换</td></tr><tr><td align="left"><code>Ctrl + Shift + J</code></td><td align="left">Toggle Search details</td><td align="left">开启详细查询</td></tr><tr><td align="left"><code>Ctrl + Shift + U</code></td><td align="left">Show Output panel</td><td align="left"></td></tr><tr><td align="left"><code>Ctrl + Shift + V</code></td><td align="left">Open Markdown preview</td><td align="left">预览Markdown文件【编译后】</td></tr><tr><td align="left"><code>Ctrl + K v</code></td><td align="left">Open Markdown preview to the side</td><td align="left">在边栏打开渲染后的视图【新建】</td></tr><tr><td align="left"><code>Ctrl+K Z</code></td><td align="left">Zen Mode (Esc Esc to exit)</td><td align="left">禅模式</td></tr></tbody></table><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><table><thead><tr><th align="left">调试</th><th align="left">作用</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left"><code>F9</code></td><td align="left">Toggle breakpoint</td><td align="left">添加解除断点</td></tr><tr><td align="left"><code>F5</code></td><td align="left">Start/Continue</td><td align="left">启动调试、继续</td></tr><tr><td align="left"><code>Shift + F5</code></td><td align="left">Stop</td><td align="left">结束调试</td></tr><tr><td align="left"><code>F11 / Shift + F11</code></td><td align="left">Step into/out</td><td align="left">单步进入 / 单步跳出</td></tr><tr><td align="left"><code>F10</code></td><td align="left">Step over</td><td align="left">单步跳过</td></tr><tr><td align="left"><code>Ctrl + K Ctrl + I</code></td><td align="left">Show hover</td><td align="left">显示悬浮</td></tr></tbody></table><h3 id="Integrated-terminal"><a href="#Integrated-terminal" class="headerlink" title="Integrated terminal"></a>Integrated terminal</h3><table><thead><tr><th align="left">终端集成</th><th align="left">作用</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left"><code>Ctrl + \</code>`</td><td align="left">Show integrated terminal</td><td align="left">打开集成终端</td></tr><tr><td align="left"><code>Ctrl + Shift + \</code>`</td><td align="left">Create new terminal</td><td align="left">创建一个新的终端</td></tr><tr><td align="left"><code>Ctrl + C</code></td><td align="left">Copy selection</td><td align="left">复制所选</td></tr><tr><td align="left"><code>Ctrl + V</code></td><td align="left">Paste into active terminal</td><td align="left">复制到当前激活的终端</td></tr><tr><td align="left"><code>Ctrl+ ↑ / ↓</code></td><td align="left">Scroll up/down</td><td align="left">按行进行上下翻</td></tr><tr><td align="left"><code>Shift+PgUp / PgDn</code></td><td align="left">Scroll page up/down</td><td align="left">页面上下翻屏</td></tr><tr><td align="left"><code>Ctrl+Home / End</code></td><td align="left">Scroll to top/bottom</td><td align="left">滚动到页面头部或尾部</td></tr></tbody></table><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>最后附上官方给出的快捷键排版图片<br><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190913222047.png" alt=""></p><p>以上这些快捷键，仅是针对于Windows系统来做的说明。至于Linux及MacOS系统中VS Code的键盘快捷键和附加功能，详见<a href="aka.ms/vscodekeybindings">aka.ms/vscodekeybindings</a>说明。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Efficiency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Efficiency </tag>
            
            <tag> Windows </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python + Selenium 小技巧之清空输入框文字</title>
      <link href="/2019/09/04/python-selenium-qing-kong-shu-ru-kuang-wen-zi/"/>
      <url>/2019/09/04/python-selenium-qing-kong-shu-ru-kuang-wen-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Selenium-小技巧之清空输入框文字"><a href="#Python-Selenium-小技巧之清空输入框文字" class="headerlink" title="Python + Selenium 小技巧之清空输入框文字"></a>Python + Selenium 小技巧之清空输入框文字</h1><p><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190908221123.gif" alt=""></p><h4 id="思路一：直接使用clear-方法删除文字"><a href="#思路一：直接使用clear-方法删除文字" class="headerlink" title="思路一：直接使用clear()方法删除文字"></a>思路一：直接使用<code>clear()</code>方法删除文字</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span> browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>baidu_input <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span>baidu_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"Python Selenium"</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    baidu_input<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Passed: Clear Success"</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Failed"</span><span class="token punctuation">,</span> format<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="思路二：模拟键盘操作使用全选退格删除文字"><a href="#思路二：模拟键盘操作使用全选退格删除文字" class="headerlink" title="思路二：模拟键盘操作使用全选退格删除文字"></a>思路二：模拟键盘操作使用全选退格删除文字</h4><p>从用户操作出发，若想清除一个输入框中已存在的文字该怎么操作。我会使用<code>Ctrl + A</code>快捷键对输入框的内容进行全选，然后使用退格键，即可清空。 </p><p>在<code>selenium</code>中就为我们提供了一个<code>Keys</code>类，其中提供了很多常用的特殊按键。我们将其导入，看看使用它们是怎么来清除文字的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keysbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span> browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>baidu_input <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span>baidu_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"Python Selenium"</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    baidu_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>CONTROL <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    baidu_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>BACKSPACE<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Passed: Clear Success"</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Failed"</span><span class="token punctuation">,</span> format<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python + Selenium 小技巧之切换浏览器窗口</title>
      <link href="/2019/08/29/python-selenium-qie-huan-liu-lan-qi-chuang-kou/"/>
      <url>/2019/08/29/python-selenium-qie-huan-liu-lan-qi-chuang-kou/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Selenium-小技巧之切换浏览器窗口"><a href="#Python-Selenium-小技巧之切换浏览器窗口" class="headerlink" title="Python + Selenium 小技巧之切换浏览器窗口"></a>Python + Selenium 小技巧之切换浏览器窗口</h1><p><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190908221124.gif" alt=""></p><p>浏览器大多页面中的链接，点击后就会打开一个新的窗口，这时就需要把窗口切换过去，才能继续执行相关的操作。</p><p>这里为了演示方便，我们预先通过执行js来新建出几个窗口。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>js <span class="token operator">=</span> <span class="token string">'window.open("https://cn.bing.com/");'</span>browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>js<span class="token punctuation">)</span></code></pre><p>因为每个窗口都有一个<strong>句柄(handle)</strong>，代表当前窗口，需要操作哪个页面的窗口，切换到窗口对应的句柄。</p><h4 id="思路一：通过句柄来切换窗口"><a href="#思路一：通过句柄来切换窗口" class="headerlink" title="思路一：通过句柄来切换窗口"></a>思路一：通过句柄来切换窗口</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在当前浏览器中访问网易邮箱</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.126.com'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 新开一个窗口，通过执行js来新开一个窗口</span>js <span class="token operator">=</span> <span class="token string">'window.open("https://cn.bing.com/");'</span>browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>js<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出当前窗口句柄（网易邮箱）</span>Netease_handle <span class="token operator">=</span> browser<span class="token punctuation">.</span>current_window_handle<span class="token comment" spellcheck="true"># 获取当前窗口句柄集合（列表类型）</span>handles <span class="token operator">=</span> browser<span class="token punctuation">.</span>window_handles<span class="token keyword">print</span><span class="token punctuation">(</span>handles<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出句柄集合</span><span class="token comment" spellcheck="true"># ['CDwindow-E9B85270B51D42AF7369D81B9AA70FFE',</span><span class="token comment" spellcheck="true"># 'CDwindow-90004FD79A0F59EE057846B34D0E7327']</span><span class="token comment" spellcheck="true"># 获取必应窗口</span>bing_handle <span class="token operator">=</span> None<span class="token keyword">for</span> handle <span class="token keyword">in</span> handles<span class="token punctuation">:</span>    <span class="token keyword">if</span> handle <span class="token operator">!=</span> Netease_handle<span class="token punctuation">:</span>        bing_handle <span class="token operator">=</span> handle<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'switch to '</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出当前窗口句柄（必应）</span>browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>Netease_handle<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 关闭当前窗口（必应）</span><span class="token comment" spellcheck="true"># 切换回网易邮箱窗口</span>browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>bing_handle<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="思路二：根据浏览器页签title进行窗口切换"><a href="#思路二：根据浏览器页签title进行窗口切换" class="headerlink" title="思路二：根据浏览器页签title进行窗口切换"></a>思路二：根据浏览器页签<code>title</code>进行窗口切换</h4><p>其实这种方法也用到了句柄，与前面不同的是，这里使用了浏览器页签的<code>title</code>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在当前浏览器中访问网易邮箱</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.126.com'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 新打开两个窗口</span>js <span class="token operator">=</span> <span class="token string">'window.open("https://www.qq.com/");'</span>browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>js<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>js <span class="token operator">=</span> <span class="token string">'window.open("https://cn.bing.com/");'</span>browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>js<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 拿到所有的窗口</span>allHandles <span class="token operator">=</span> browser<span class="token punctuation">.</span>window_handles<span class="token comment" spellcheck="true"># 根据窗口的title进行URL切换</span><span class="token keyword">for</span> handle <span class="token keyword">in</span> allHandles<span class="token punctuation">:</span>    <span class="token keyword">if</span> browser<span class="token punctuation">.</span>title<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"腾讯"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        browser<span class="token punctuation">.</span>switch_to_window<span class="token punctuation">(</span>handle<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>注：在<code>find()</code>方法中填写的Title，只需填入浏览器页签的部分Title内容即可。例如本例中为了切换至<code>https://www.qq.com/</code>页面，其全称实际是<code>腾讯首页</code>，但这里只输入<code>腾讯</code>即可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/21/hello-world/"/>
      <url>/2019/08/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>From WordPress to Hexo. Hello Hexo, Hello World!</p><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! </p><p>You can check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之制作个性微信好友墙</title>
      <link href="/2019/07/15/pythonapps-wechat-photo-wall/"/>
      <url>/2019/07/15/pythonapps-wechat-photo-wall/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之制作个性微信好友墙"><a href="#Python小应用系列之制作个性微信好友墙" class="headerlink" title="Python小应用系列之制作个性微信好友墙"></a>Python小应用系列之制作个性微信好友墙</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h2><p>前段时间，微信朋友圈开始出现了一种晒照片新形式，微信好友墙，即在一张大图片中展示出自己的所有微信好友的头像。</p><p>效果如下图，出于隐私考虑，这里作了模糊处理。</p><p>﻿﻿</p><p>是不是很炫，而且这还是独一无二的，毕竟每个人的微信好友是不一样的。本文就教大家用Python来实现这种效果。</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h2><p>操作系统：Windows</p><p>Python版本：3.7.3</p><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h2><p>我们需要首先需要获取好友的头像信息，接下来处理图像并完成图像的拼接。</p><h3 id="2-0-准备工作"><a href="#2-0-准备工作" class="headerlink" title="2.0 准备工作"></a>2.0 准备工作</h3><p>在这里，我们登录微信获取好友信息，使用的是 wxpy 模块；处理并生成最终的图像借助 PIL 模块。因为都是第三方模块，如环境中没有可以使用 pip 进行安装。另外涉及路径的处理等，我们需要导入 os 模块和 sys 模块。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> wxpy <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> PIL<span class="token punctuation">.</span>Image <span class="token keyword">as</span> Image<span class="token keyword">import</span> os<span class="token keyword">import</span> sys</code></pre><h3 id="2-1-获取并存储好友头像信息"><a href="#2-1-获取并存储好友头像信息" class="headerlink" title="2.1 获取并存储好友头像信息"></a>2.1 获取并存储好友头像信息</h3><p>我们要获取微信好友的头像，首先需要登录微信</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化机器人，扫码登陆微信，适用于Windows系统</span>bot <span class="token operator">=</span> Bot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># # Linux系统，执行登陆请调用下面的这句</span><span class="token comment" spellcheck="true"># bot = Bot(console_qr=2, cache_path="botoo.pkl"</span></code></pre><p>在获取好友头像信息之前，我们得先在本地创建一个目录，用于后续存储好友头像的文件。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取当前路径信息</span>curr_dir <span class="token operator">=</span> get_dir<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果FriendImgs目录不存在就创建一个</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>curr_dir <span class="token operator">+</span> <span class="token string">"FriendImgs/"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>curr_dir <span class="token operator">+</span> <span class="token string">"FriendImgs/"</span><span class="token punctuation">)</span></code></pre><p>接下来就是获取友头像信息，并将其存储在本地创建的目录中。</p><pre class=" language-python"><code class="language-python">my_friends <span class="token operator">=</span> bot<span class="token punctuation">.</span>friends<span class="token punctuation">(</span>update<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取好友头像信息并存储在FriendImgs目录中</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> friend <span class="token keyword">in</span> my_friends<span class="token punctuation">:</span>    friend<span class="token punctuation">.</span>get_avatar<span class="token punctuation">(</span>curr_dir <span class="token operator">+</span> <span class="token string">"FriendImgs/"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span></code></pre><p>这时你就可以在本地FriendImgs文件夹中，看到保存下来的微信好友头像的图片。</p><p>﻿﻿</p><h3 id="2-2-生成微信好友墙"><a href="#2-2-生成微信好友墙" class="headerlink" title="2.2 生成微信好友墙"></a>2.2 生成微信好友墙</h3><p>制作微信好友墙，就像以前的大字报，把我们下载的好友头像逐一贴上去即可。</p><p>首先设定好微信好友墙的尺寸，使用 Image.new() 方法。</p><pre class=" language-python"><code class="language-python">image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">650</span><span class="token punctuation">,</span> <span class="token number">650</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>接下来，我们需要逐个打开微信好友的图片，使用 Image.open() 方法。</p><pre class=" language-python"><code class="language-python">img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>curr_dir <span class="token operator">+</span> <span class="token string">"FriendImgs/"</span> <span class="token operator">+</span> file_names<span class="token punctuation">)</span></code></pre><p>将微信头像图片，重置为50*50像素尺寸的小图，使用 img.resize() 方法。</p><pre class=" language-python"><code class="language-python">img <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span></code></pre><p>然后将图片黏贴到我们的照片墙中，使用 image.paste() 方法。</p><pre class=" language-python"><code class="language-python">image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">,</span> y <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>最后将制作完成的照片墙保存下来，使用 image.save() 方法。</p><pre class=" language-python"><code class="language-python">img <span class="token operator">=</span> image<span class="token punctuation">.</span>save<span class="token punctuation">(</span>curr_dir <span class="token operator">+</span> <span class="token string">"WeChat_Friends.jpg"</span><span class="token punctuation">)</span></code></pre><p>现在我们将本小节中代码整合到一起，如下所示：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 准备生成微信好友头像墙的尺寸</span>image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">650</span><span class="token punctuation">,</span> <span class="token number">650</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义初始图片的位置</span>x <span class="token operator">=</span> <span class="token number">0</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 获取下载的头像文件</span>curr_dir <span class="token operator">=</span> get_dir<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>curr_dir <span class="token operator">+</span> <span class="token string">'FriendImgs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 遍历文件夹的图片</span><span class="token keyword">for</span> file_names <span class="token keyword">in</span> ls<span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 依次打开图片</span>        img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>curr_dir <span class="token operator">+</span> <span class="token string">"FriendImgs/"</span> <span class="token operator">+</span> file_names<span class="token punctuation">)</span>    <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 重新设置图片的大小</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将图片粘贴到最终的照片墙上</span>        image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">,</span> y <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设置每一行排13个图像</span>        x <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token number">0</span>            y <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 保存图片为WeChat_Friends.jpg       </span>img <span class="token operator">=</span> image<span class="token punctuation">.</span>save<span class="token punctuation">(</span>curr_dir <span class="token operator">+</span> <span class="token string">"WeChat_Friends.jpg"</span><span class="token punctuation">)</span></code></pre><p>代码执行后，最终生成的效果图如下：</p><p>(这里展示的图片做了模糊处理)</p><p>﻿﻿</p><h2 id="3-后记"><a href="#3-后记" class="headerlink" title="3 后记"></a>3 后记</h2><p>本文中设定照片墙尺寸为650*650，而好友头像尺寸为50*50，这样最终制作成的照片墙每行有13位好友，共计容纳13*13位好友。大家可根据自己实际情况，自行调整尺寸参数，以达到最佳效果。大家赶快去生成自己独一无二的照片墙吧~！</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文所涉及的完整代码详见GitHub：<a href="https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Wechat_Photo_Wall/" target="_blank" rel="noopener">https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Wechat_Photo_Wall/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之用Python分析并预测双色球</title>
      <link href="/2019/07/08/pythonapps-ssq-predict/"/>
      <url>/2019/07/08/pythonapps-ssq-predict/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之用Python分析并预测双色球"><a href="#Python小应用系列之用Python分析并预测双色球" class="headerlink" title="Python小应用系列之用Python分析并预测双色球"></a>Python小应用系列之用Python分析并预测双色球</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h2><p>上周被一则新闻震惊到了，《2454万元大奖无人认领！福彩史上第二大弃奖在广东中山产生 》，在2019年5月2日开奖的双色球中，广东中山一位彩民博中2454万元，兑奖时间截至2019年7月1日。令人遗憾的是，中奖者最终未现身领奖，2454万元大奖成为弃奖。经中山市福彩中心查证，这是中国福彩史上金额第二大的弃奖。根据《彩票管理条例实施细则》的有关规定，这次的2454万元弃奖奖金将被纳入彩票公益金。</p><p>一直在为福彩做贡献的我，啥时候能摊上这样的好事啊。于是我用Python生成了一组双色球的号码……</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h2><p>操作系统：Windows</p><p>Python版本：3.7.3</p><h2 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2 需求分析"></a>2 需求分析</h2><p>随机生成一组双色球的号码，我们可以借助random函数，如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">ball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ball_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        a<span class="token operator">=</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> a <span class="token operator">not</span> <span class="token keyword">in</span> ball_list<span class="token punctuation">:</span>            ball_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>ball_list<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    ball_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    ball_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ball_list<span class="token punctuation">)</span>ball<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>但要知道，这么搞的话，丝毫不会有什么中奖的，因为太随机了……</p><p>经历过高考的人，肯定都知道三年模拟五年高考。要知道彩票中奖概率很低的，所以我们在这里先分析下历年的数据，借助往年的数据来“精准”地推算下一期中奖号码。</p><p>我们通过这个网站来查询彩票的历史开奖信息。</p><pre><code>http://kaijiang.zhcw.com/zhcw/html/ssq/list_1.html</code></pre><p>﻿﻿</p><p>我们点击下一页，看看网址链接是否有规律</p><pre><code>http://kaijiang.zhcw.com/zhcw/html/ssq/list_1.htmlhttp://kaijiang.zhcw.com/zhcw/html/ssq/list_2.htmlhttp://kaijiang.zhcw.com/zhcw/html/ssq/list_3.htmlhttp://kaijiang.zhcw.com/zhcw/html/ssq/list_4.htmlhttp://kaijiang.zhcw.com/zhcw/html/ssq/list_5.html</code></pre><p>不难发现，可以将目标网址拆分如下：</p><pre class=" language-python"><code class="language-python">url_part <span class="token operator">=</span> <span class="token string">'http://kaijiang.zhcw.com/zhcw/html/ssq/list'</span>url <span class="token operator">=</span> url_part <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.html'</span></code></pre><p>而 i 对应的正好是页码信息，我们借助<code>F12</code>开发调试工具，来看看页数的信息怎么获取：</p><p>﻿﻿</p><p>记录下这里的元素信息。</p><p>接下来，我们需要抓取每一页中的具体开奖信息。 我们继续通过开发者工具分析出每期开奖信息。</p><p>我们依次记录下每期的开奖日期对应的元素信息：</p><p>﻿﻿</p><p>开奖的批次对应的元素信息：</p><p>﻿﻿</p><p>中奖号码对应的元素信息：</p><p>﻿﻿</p><p>有了这些元素信息之后，接下来就是代码的具体实现。</p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3 代码实现"></a>3 代码实现</h2><p>在这里，我们获取网页的请求使用 requests 模块；解析网址借助 beautifulsoup4 模块。因为都是第三方模块，如环境中没有可以使用 pip 进行安装。</p><pre class=" language-python"><code class="language-python">pip install requestspip install beautifulsoup4pip install lxml</code></pre><p>模块安装好之后，进行导入</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup</code></pre><p>我们需要先在首页中，拿到页数信息</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 发起请求</span>basic_url <span class="token operator">=</span> <span class="token string">'http://kaijiang.zhcw.com/zhcw/html/ssq/list_1.html'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>basic_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>htm <span class="token operator">=</span> response<span class="token punctuation">.</span>text<span class="token comment" spellcheck="true"># 解析内容</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>htm<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取页数信息</span>page <span class="token operator">=</span> int<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"pg"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'strong'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>接下来，我们就可以根据规律组装好我们的URL：</p><pre class=" language-python"><code class="language-python">url_part <span class="token operator">=</span> <span class="token string">'http://kaijiang.zhcw.com/zhcw/html/ssq/list'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> page<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> url_part <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.html'</span></code></pre><p>拿组装后的url发起请求，并获取每页中各期的开奖信息：</p><pre class=" language-python"><code class="language-python">res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>res<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>context <span class="token operator">=</span> res<span class="token punctuation">.</span>textsoups <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span><span class="token keyword">if</span> soups<span class="token punctuation">.</span>table <span class="token keyword">is</span> None<span class="token punctuation">:</span>    <span class="token keyword">continue</span><span class="token keyword">elif</span> soups<span class="token punctuation">.</span>table<span class="token punctuation">:</span>    table_rows <span class="token operator">=</span> soups<span class="token punctuation">.</span>table<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row_num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>table_rows<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        row_tds <span class="token operator">=</span> table_rows<span class="token punctuation">[</span>row_num<span class="token punctuation">]</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span>        ems <span class="token operator">=</span> row_tds<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'em'</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> row_tds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string <span class="token operator">+</span><span class="token string">', '</span><span class="token operator">+</span> row_tds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string <span class="token operator">+</span><span class="token string">', '</span><span class="token operator">+</span>ems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>ems<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>ems<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>ems<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>ems<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>ems<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token operator">+</span><span class="token string">', '</span><span class="token operator">+</span>ems<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>这样，我们就完成了对每一页中各期开奖数据的获取。获取的数据可以保存在本地。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_to_file</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'ssq.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span></code></pre><p>我们在获取每期的开奖数据的同时，记录下红蓝球出现的号码信息。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义两个变量, 用于记录历史开奖信息中的红球、蓝球号码信息</span>red_num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> blue_num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>red_num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 红色球1</span>red_num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ems<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 红色球2</span>red_num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ems<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 红色球3</span>red_num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ems<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 红色球4</span>red_num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ems<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 红色球5</span>red_num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ems<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 红色球6</span>blue_num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ems<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 蓝色球</span></code></pre><p>统计出各个号码出现次数信息：</p><pre class=" language-python"><code class="language-python">red_count <span class="token operator">=</span> Counter<span class="token punctuation">(</span>red_num<span class="token punctuation">)</span>blue_count <span class="token operator">=</span> Counter<span class="token punctuation">(</span>blue_num<span class="token punctuation">)</span></code></pre><p>接下来我们可以根据红蓝号码出现的频率进行排序，并推测出几组双色球号码信息：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 按照出现频率顺序</span>red_sorted <span class="token operator">=</span> sorted<span class="token punctuation">(</span>red_count<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>blue_sorted <span class="token operator">=</span> sorted<span class="token punctuation">(</span>blue_count<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>red <span class="token operator">=</span> red_sorted<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>blue <span class="token operator">=</span> blue_sorted<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>red <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">)</span>blue <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">)</span>red<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>blue<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'号码高频-1注：'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>red<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' | '</span><span class="token operator">+</span>blue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'号码高频-2注：'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>red<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' | '</span><span class="token operator">+</span>blue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'号码高频-3注：'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>red<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' | '</span><span class="token operator">+</span>blue<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>当然了，也可以输出反序输出，中奖号码出现频率较低的几组，只需要设置<code>reverse=True</code>即可。</p><h2 id="4-后记"><a href="#4-后记" class="headerlink" title="4 后记"></a>4 后记</h2><p>这里根据蓝色球各号码出现的次数，作了张直方图，可以很直观到蓝色球各号码出现的频率。</p><p>﻿﻿</p><p>有人会问了，这样预测出的中奖号码，中奖概率究竟有多大呢？这个，我可说不清楚，只有买了才会知道，小心错过一个亿哟！</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文所涉及的完整代码详见GitHub：<a href="https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/SSQ_Predict/" target="_blank" rel="noopener">https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/SSQ_Predict/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之我在B站学会了垃圾分类</title>
      <link href="/2019/07/01/pythonapps-garbage-classification/"/>
      <url>/2019/07/01/pythonapps-garbage-classification/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之我在B站学会了垃圾分类"><a href="#Python小应用系列之我在B站学会了垃圾分类" class="headerlink" title="Python小应用系列之我在B站学会了垃圾分类"></a>Python小应用系列之我在B站学会了垃圾分类</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h2><p>纸巾再湿也是干垃圾？瓜子皮再干也是湿垃圾？？最近大家都被垃圾分类折磨的不行，傻傻的你是否拎得清？😭😭😭自2019.07.01开始，上海已率先实施垃圾分类制度，违反规定的还会面临罚款。</p><p>为了避免巨额损失，我决定来b站学习下垃圾分类的技巧。为什么要来b站，听说这可是当下年轻人最流行的学习途径之一。</p><p>打开b站，搜索了下垃圾分类，上来就被这个标题吓(吸)到(引)了：在上海丢人的正确姿势。</p><p>﻿﻿</p><p>当然，这里的丢人非彼丢人，指的是丢垃圾的丢。</p><p>点开发现，原来是一段对口相声啊，还是两个萌妹子(AI)的对口相声，瞬间就来了兴趣，阐述的是关于如何进行垃圾分类的。</p><p>﻿﻿</p><p>﻿﻿</p><p>﻿﻿</p><p>原视频链接：<a href="https://www.bilibili.com/video/av57129646?from=search&amp;seid=9101123388170190749" target="_blank" rel="noopener">https://www.bilibili.com/video/av57129646?from=search&amp;seid=9101123388170190749</a></p><p>看完一遍又一遍，简直停不下来了，已经开启了洗脑模式，毕竟视频很好玩，视频中的弹幕更是好玩！</p><p>独乐乐不如众乐乐，且不如用Python把弹幕保存下来，做个词云图？就这么愉快地决定了！</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h2><p>操作系统：Windows</p><p>Python版本：3.7.3</p><h2 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2 需求分析"></a>2 需求分析</h2><p>我们先需要通过<code>F12</code>开发调试工具，查询这条视频的弹幕的 cid 数据。</p><p>﻿﻿</p><p>拿到 cid 之后，再填入下面的链接中。</p><pre><code>http://comment.bilibili.com/{cid}.xml</code></pre><p>打开之后，就可以看到该视频的弹幕列表。</p><p>﻿﻿</p><p>有了弹幕数据后，我们需要先将解析好，并保存在本地，方便进一步的加工处理，如制成词云图进行展示。</p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3 代码实现"></a>3 代码实现</h2><p>在这里，我们获取网页的请求使用 requests 模块；解析网址借助 beautifulsoup4 模块；保存为CSV数据，这里借用 pandas 模块。因为都是第三方模块，如环境中没有可以使用 pip 进行安装。</p><pre class=" language-python"><code class="language-python">pip install requestspip install beautifulsoup4pip install lxmlpip install pandas</code></pre><p>模块安装好之后，进行导入</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</code></pre><p>请求、解析、保存弹幕数据</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 请求弹幕数据</span>url <span class="token operator">=</span> <span class="token string">'http://comment.bilibili.com/99768393.xml'</span>html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token comment" spellcheck="true"># 解析弹幕数据</span>html_data <span class="token operator">=</span> str<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>bs4 <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_data<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>results <span class="token operator">=</span> bs4<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span>comments <span class="token operator">=</span> <span class="token punctuation">[</span>comment<span class="token punctuation">.</span>text <span class="token keyword">for</span> comment <span class="token keyword">in</span> results<span class="token punctuation">]</span>comments_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'comments'</span><span class="token punctuation">:</span> comments<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 将弹幕数据保存在本地</span>br <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>comments_dict<span class="token punctuation">)</span>br<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'barrage.csv'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span></code></pre><p>接下来，我们就对保存好的弹幕数据进行深加工。</p><p>制作词云，我们需要用到 wordcloud 模块、matplotlib 模块、jieba 模块，同样都是第三方模块，直接用 pip 进行安装。</p><pre class=" language-python"><code class="language-python">pip install wordcloudpip install matplotlibpip install jieba</code></pre><p>模块安装好之后，进行导入，因为我们读取文件用到了 panda 模块，所以一并导入即可</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud<span class="token punctuation">,</span> ImageColorGenerator<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> jieba</code></pre><p>我们可以自行选择一张图片，并基于此图片来生成一张定制的词云图。我们可以自定义一些词云样式，代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 解析背景图片</span>mask_img <span class="token operator">=</span> plt<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'Bulb.jpg'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''设置词云样式'''</span>wc <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># 设置字体  </span>    font_path<span class="token operator">=</span><span class="token string">'SIMYOU.TTF'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 允许最大词汇量</span>    max_words <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 设置最大号字体大小</span>    max_font_size <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 设置使用的背景图片</span>    mask <span class="token operator">=</span> mask_img<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 设置输出的图片背景色</span>    background_color<span class="token operator">=</span>None<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"RGBA"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 设置有多少种随机生成状态，即有多少种配色方案</span>    random_state<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span></code></pre><p>接下来，我们要读取文本信息（弹幕数据），进行分词并连接起来：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 读取文件内容</span>br <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'barrage.csv'</span><span class="token punctuation">,</span> header<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 进行分词，并用空格连起来</span>text <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> line <span class="token keyword">in</span> br<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    text <span class="token operator">+=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>line<span class="token punctuation">,</span> cut_all<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>最后制作词云并将生成的词云保存下来：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 生成词云</span>wc<span class="token punctuation">.</span>generate_from_text<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#改变字体颜色</span>img_colors <span class="token operator">=</span> ImageColorGenerator<span class="token punctuation">(</span>mask_img<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#字体颜色为背景图片的颜色</span>wc<span class="token punctuation">.</span>recolor<span class="token punctuation">(</span>color_func<span class="token operator">=</span>img_colors<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示词云图</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>wc<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭坐标轴</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将图片保存到本地</span>wc<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">"Garbage_classification.png"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'生成词云成功!'</span><span class="token punctuation">)</span></code></pre><p>最后来看看我们效果图</p><p>﻿﻿</p><p>有没有感受到大家对垃圾分类这个话题的热情，莫名喜感涌上心头。</p><h2 id="4-后记"><a href="#4-后记" class="headerlink" title="4 后记"></a>4 后记</h2><p>这两个AI萌妹子说的相声很不错，就不知道郭德纲看到这个作品会作何感想。回到垃圾分类的话题，目前《上海市生活垃圾管理条例》已正式施行，不在上海的朋友们也不要太开心，住建部表示，全国其它46个重点城市也即将体验到……有没有瑟瑟发抖🤣🤣，讲真，垃圾分一分，环境美十分，行动起来吧！</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文所涉及的完整代码详见GitHub：<a href="https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Garbage_classification/" target="_blank" rel="noopener">https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Garbage_classification/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之用Python(蛇)玩Snake(贪吃蛇)</title>
      <link href="/2019/06/25/pythonapps-pygame-snake/"/>
      <url>/2019/06/25/pythonapps-pygame-snake/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之用Python-蛇-玩Snake-贪吃蛇"><a href="#Python小应用系列之用Python-蛇-玩Snake-贪吃蛇" class="headerlink" title="Python小应用系列之用Python(蛇)玩Snake(贪吃蛇)"></a>Python小应用系列之用Python(蛇)玩Snake(贪吃蛇)</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h2><p>前几天，星球有人提到贪吃蛇，一下子就勾起了我的兴趣，毕竟在那个Nokia称霸的年代，这款游戏可是经典中的经典啊！而用Python(蛇)玩Snake(贪吃蛇)，那再合适不过了🤣🤣🤣</p><p>先通过下面这个效果图来感受下吧！</p><p>﻿﻿</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h2><p>操作系统：Windows</p><p>Python版本：3.7.3</p><h2 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2 需求分析"></a>2 需求分析</h2><p>我们先来回顾下贪吃蛇中的游戏元素及游戏规则。</p><p>首先呢，需要有贪吃蛇、有食物；需要能控制贪吃蛇来上下移动获取食物；贪吃蛇在吃取食物后，自身长度增加，同时食物消失并随机生成新的食物；如果贪吃蛇触碰到四周墙壁或是触碰到自己身体时，则游戏结束。</p><p>游戏规则就是这么简单，接下来我们借助一个第三方库pygame来实现它。</p><p><code>Pygame</code>是一个利用SDL库的游戏库， 是一组用来开发游戏软件的 Python 程序模块。</p><p>SDL（Simple DirectMedia Layer）是一个跨平台库，支持访问计算机多媒体硬件（声音、视频、输入等），SDL非常强大，但美中不足的是它是基于 C 语言的。</p><p>PyGame是 SDL 库的 Python 包装器（wrapper），Pygame 在SDL库的基础上提供了各种接口，从而使用用户能够使用 python 语言创建各种各样的游戏或多媒体程序。</p><p>它的安装方法很简单，如下：</p><pre class=" language-python"><code class="language-python">pip install pygame</code></pre><p>想要了解更多pygame功能的朋友也可以查阅官方的文档。</p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3 代码实现"></a>3 代码实现</h2><p>首先导入我们要用到的模块，除了第三方库pygame外，我们还会用到一些Python内置的模块如sys、random、time等，一并导入即可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pygame<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> random<span class="token punctuation">,</span> time<span class="token comment" spellcheck="true"># 从pygame模块导入常用的函数和常量</span><span class="token keyword">from</span> pygame<span class="token punctuation">.</span>locals <span class="token keyword">import</span> <span class="token operator">*</span>   </code></pre><h3 id="3-1-一些全局参数的初始化"><a href="#3-1-一些全局参数的初始化" class="headerlink" title="3.1  一些全局参数的初始化"></a>3.1  一些全局参数的初始化</h3><p>接下来，我们需要声明一些全局参数。如初始化pygame、定义游戏窗口的大小、窗口的标题、定义全局的颜色变量等信息。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化Pygame库</span>pygame<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 初始化一个游戏界面窗口</span>DISPLAY <span class="token operator">=</span> pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置游戏窗口的标题</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_caption<span class="token punctuation">(</span><span class="token string">'人人都是Pythonista - Snake'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个变量来控制游戏速度</span>FPSCLOCK <span class="token operator">=</span> pygame<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Clock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 初始化游戏界面内使用的字体</span>BASICFONT <span class="token operator">=</span> pygame<span class="token punctuation">.</span>font<span class="token punctuation">.</span>SysFont<span class="token punctuation">(</span><span class="token string">"SIMYOU.TTF"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义颜色变量</span>BLACK <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Color<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>WHITE <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Color<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>RED <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Color<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>GREY <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Color<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span></code></pre><h3 id="3-2-初始化贪吃蛇及食物"><a href="#3-2-初始化贪吃蛇及食物" class="headerlink" title="3.2  初始化贪吃蛇及食物"></a>3.2  初始化贪吃蛇及食物</h3><p>游戏中需要有贪吃蛇及食物，我们给定一个初始值。我们将整个界面看成许多20*20的小方块，每个小方块代表一个标准小格子，贪吃蛇的长度就可以用几个标准小格子表示。我们将贪吃蛇身体用列表的形式存储，方便之后的删减。</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''初始化贪吃蛇及食物'''</span><span class="token comment" spellcheck="true"># 贪吃蛇的的初始位置</span>snake_Head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 初始化贪吃蛇的长度 (注：这里以20*20为一个标准小格子)</span>snake_Body <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 指定蛇初始前进的方向，向右</span>direction <span class="token operator">=</span> <span class="token string">"right"</span><span class="token comment" spellcheck="true"># 给定第一枚食物的位置</span>food_Position <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 食物标记：0代表食物已被吃掉；1代表未被吃掉。</span>food_flag <span class="token operator">=</span> <span class="token number">1</span></code></pre><h3 id="3-3-实现贪吃蛇的上下左右移动"><a href="#3-3-实现贪吃蛇的上下左右移动" class="headerlink" title="3.3  实现贪吃蛇的上下左右移动"></a>3.3  实现贪吃蛇的上下左右移动</h3><p>我们需要控制贪吃蛇的上下左右的移动，这里通过监听键盘输入来实现。利用键盘中的上下左右键或WASD键来控制贪吃蛇的运动。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 检测按键等Pygame事件</span><span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> QUIT<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 接收到退出事件后，退出程序</span>        pygame<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断键盘事件，用 方向键 或 wsad 来表示上下左右</span>    <span class="token keyword">elif</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> KEYDOWN<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_UP <span class="token operator">or</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_w<span class="token punctuation">)</span> <span class="token operator">and</span> direction <span class="token operator">!=</span> DOWN<span class="token punctuation">:</span>            direction <span class="token operator">=</span> UP        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_DOWN <span class="token operator">or</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_s<span class="token punctuation">)</span> <span class="token operator">and</span> direction <span class="token operator">!=</span> UP<span class="token punctuation">:</span>            direction <span class="token operator">=</span> DOWN        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_LEFT <span class="token operator">or</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_a<span class="token punctuation">)</span> <span class="token operator">and</span> direction <span class="token operator">!=</span> RIGHT<span class="token punctuation">:</span>            direction <span class="token operator">=</span> LEFT        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_RIGHT <span class="token operator">or</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_d<span class="token punctuation">)</span> <span class="token operator">and</span> direction <span class="token operator">!=</span> LEFT<span class="token punctuation">:</span>            direction <span class="token operator">=</span> RIGHT</code></pre><p>接下来就是将蛇前进方向按照键盘的输入进行转弯操作，并将蛇的头部当前的位置加入到蛇身的列表中。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 根据键盘的输入，改变蛇的头部，进行转弯操作</span><span class="token keyword">if</span> direction <span class="token operator">==</span> LEFT<span class="token punctuation">:</span>    snake_Head<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">20</span><span class="token keyword">if</span> direction <span class="token operator">==</span> RIGHT<span class="token punctuation">:</span>    snake_Head<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">20</span><span class="token keyword">if</span> direction <span class="token operator">==</span> UP<span class="token punctuation">:</span>    snake_Head<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">20</span><span class="token keyword">if</span> direction <span class="token operator">==</span> DOWN<span class="token punctuation">:</span>    snake_Head<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">20</span><span class="token comment" spellcheck="true"># 将蛇的头部当前的位置加入到蛇身的列表中</span>snake_Body<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> list<span class="token punctuation">(</span>snake_Head<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3-4-判断是否吃到食物"><a href="#3-4-判断是否吃到食物" class="headerlink" title="3.4 判断是否吃到食物"></a>3.4 判断是否吃到食物</h3><p>如果蛇头与食物的位置重合，则判定吃到食物，将食物数量清零；而没吃到食物的话，蛇身就会跟着蛇头运动，蛇身的最后一节将被踢出列表。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断是否吃掉食物</span><span class="token keyword">if</span> snake_Head<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>food_Position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> snake_Head<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>food_Position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    food_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">else</span><span class="token punctuation">:</span>    snake_Body<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3-5-重新生成食物"><a href="#3-5-重新生成食物" class="headerlink" title="3.5 重新生成食物"></a>3.5 重新生成食物</h3><p>当游戏界面中的食物数量为0时，需要重新生成食物。利用random函数来生成随机位置</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 生成新的食物</span><span class="token keyword">if</span> food_flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 随机生成x, y</span>    x <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span>    food_Position <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    food_flag <span class="token operator">=</span> <span class="token number">1</span></code></pre><h3 id="3-6-绘制贪吃蛇、食物、分数等信息"><a href="#3-6-绘制贪吃蛇、食物、分数等信息" class="headerlink" title="3.6 绘制贪吃蛇、食物、分数等信息"></a>3.6 绘制贪吃蛇、食物、分数等信息</h3><p>定义贪吃蛇的绘制函数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 绘制贪吃蛇</span><span class="token keyword">def</span> <span class="token function">drawSnake</span><span class="token punctuation">(</span>snake_Body<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> snake_Body<span class="token punctuation">:</span>        pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>DISPLAY<span class="token punctuation">,</span> WHITE<span class="token punctuation">,</span> Rect<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>定义食物的绘制函数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 绘制食物的位置</span><span class="token keyword">def</span> <span class="token function">drawFood</span><span class="token punctuation">(</span>food_Position<span class="token punctuation">)</span><span class="token punctuation">:</span>    pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>DISPLAY<span class="token punctuation">,</span> RED<span class="token punctuation">,</span> Rect<span class="token punctuation">(</span>food_Position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> food_Position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>定义分数的绘制函数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打印出当前得分</span><span class="token keyword">def</span> <span class="token function">drawScore</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 设置分数的显示颜色</span>    score_Surf <span class="token operator">=</span> BASICFONT<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> GREY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置分数的位置</span>    score_Rect <span class="token operator">=</span> score_Surf<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>    score_Rect<span class="token punctuation">.</span>midtop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 绑定以上设置到句柄</span>    DISPLAY<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>score_Surf<span class="token punctuation">,</span> score_Rect<span class="token punctuation">)</span></code></pre><p>这些都定义好之后，我们需要在游戏主逻辑中调用它们，并刷新Pygame的显示层，贪吃蛇与食物的每一次移动，都会进行刷新显示层的操作来显示。最后我们可以设定一个速度值来合理控制游戏执行的速度。</p><pre class=" language-python"><code class="language-python">DISPLAY<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>BLACK<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画出贪吃蛇</span>drawSnake<span class="token punctuation">(</span>snake_Body<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画出食物的位置</span>drawFood<span class="token punctuation">(</span>food_Position<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印出玩家的分数</span>drawScore<span class="token punctuation">(</span>len<span class="token punctuation">(</span>snake_Body<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 刷新Pygame的显示层，贪吃蛇与食物的每一次移动，都会进行刷新显示层的操作来显示。</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>flip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 控制游戏速度</span>FPSCLOCK<span class="token punctuation">.</span>tick<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></code></pre><h3 id="3-7-定义游戏结束的画面并判断游戏是否结束"><a href="#3-7-定义游戏结束的画面并判断游戏是否结束" class="headerlink" title="3.7 定义游戏结束的画面并判断游戏是否结束"></a>3.7 定义游戏结束的画面并判断游戏是否结束</h3><p>定义函数，用于展示游戏结束的画面并退出程序 </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 游戏结束并退出</span><span class="token keyword">def</span> <span class="token function">GameOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 设置GameOver的显示颜色</span>    GameOver_Surf <span class="token operator">=</span> BASICFONT<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'Game Over!'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> GREY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置GameOver的位置</span>    GameOver_Rect <span class="token operator">=</span> GameOver_Surf<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>    GameOver_Rect<span class="token punctuation">.</span>midtop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 绑定以上设置到句柄</span>    DISPLAY<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>GameOver_Surf<span class="token punctuation">,</span> GameOver_Rect<span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>flip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待3秒</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 退出游戏</span>    pygame<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 退出程序</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在游戏主逻辑中加入判断，游戏是否结束</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''游戏结束的判断'''</span><span class="token comment" spellcheck="true"># 贪吃蛇触碰到边界</span><span class="token keyword">if</span> snake_Head<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> snake_Head<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">620</span><span class="token punctuation">:</span>    GameOver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> snake_Head<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> snake_Head<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">460</span><span class="token punctuation">:</span>    GameOver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 贪吃蛇触碰到自己</span><span class="token keyword">for</span> i <span class="token keyword">in</span> snake_Body<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> snake_Head<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> snake_Head<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        GameOver<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="4-后记"><a href="#4-后记" class="headerlink" title="4 后记"></a>4 后记</h2><p>本文利用Pygame模块实现了最简单的贪吃蛇版本。当然还有很多需要优化的地方，比如随机生成食物时如何避免出现在贪吃蛇的自身上、通过贪吃蛇的长度来自动控制游戏速度等等。更高级一点的有如何通过AI自动玩贪吃蛇、贪吃蛇的双人对战等，期待大家利用Python可以把贪吃蛇玩出一个新的高度！😎😎😎</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文所涉及的完整代码详见GitHub：<a href="https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/PYGame_Snake/" target="_blank" rel="noopener">https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/PYGame_Snake/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之利用Python制作像素图</title>
      <link href="/2019/06/19/pythonapps-convert-img-to-pixel/"/>
      <url>/2019/06/19/pythonapps-convert-img-to-pixel/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之利用Python制作像素图"><a href="#Python小应用系列之利用Python制作像素图" class="headerlink" title="Python小应用系列之利用Python制作像素图"></a>Python小应用系列之利用Python制作像素图</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h2><p>所谓的像素图，就是对图像做一个颗粒化的效果，使其产生一种妙不可言的朦胧感。费话不多说，先来看一张效果图。</p><p>﻿﻿</p><p>▲效果图</p><p>﻿﻿</p><p>▲原图</p><p>怎么样，效果还不错吧？现在，我们用Python来实现这种像素化的效果。</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h2><p>操作系统：Windows</p><p>Python版本：3.7.3</p><h2 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2 需求分析"></a>2 需求分析</h2><p>一个最简单的实现思路，在打开图片后，把图片分割成一些像素块，再对这些像素块中的图像信息进行处理（修改图像中的RGB值）即可。</p><p>这里我们使用Numpy库和PIL库来实现这个需求，后者用来图像的读取与保存，涉及到的所有图像处理动作均借助Numpy来实现。</p><p>有关NumPy模块、PIL模块的介绍，可参考如下。</p><p>NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><p>PIL（Python Imaging Library）是Python常用的图像处理库，而Pillow是PIL的一个友好Fork，提供了了广泛的文件格式支持，强大的图像处理能力，主要包括图像储存、图像显示、格式转换以及基本的图像处理操作等。</p><p>这两个模块非Python内置，都属于第三方模块，可直接采用如下方式进行安装</p><pre class=" language-python"><code class="language-python">pip install numpypip install Pillow</code></pre><p>注意，要想使用PIL模块，是需要直接install Pillow模块的。</p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3 代码实现"></a>3 代码实现</h2><p>首先导入我们要用到的模块 </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image</code></pre><p>接下来，我们要处理图片，首先得打开一张图片，如下</p><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"P:\\Personal\\LuoShen.xpg"</span><span class="token punctuation">)</span></code></pre><p>然后把图像转换化Numpy数组进行下一步的处理</p><pre class=" language-python"><code class="language-python">im1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>这里处理的核心思想，也很简单，主要通过中间值的RGB，对所选范围块的RGB进行重新赋值。</p><pre class=" language-python"><code class="language-python">im1<span class="token punctuation">[</span>y<span class="token punctuation">:</span>y <span class="token operator">+</span> pixel<span class="token punctuation">,</span> x<span class="token punctuation">:</span>x <span class="token operator">+</span> pixel<span class="token punctuation">]</span> <span class="token operator">=</span> im1<span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token punctuation">(</span>pixel <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>pixel <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>这里的<code>x</code>、<code>y</code>是分别指的我们图像的横向、纵向像素点的坐标值、而pixel指的是我们要以多大的像素块，来处理这张图像，我们设置的单位像素块(Pixel数值)越小，生成的像素图越精确。</p><p>当然了，若单位像素块设置的太小，生成图像就看不出效果了，至于多大的数值合适，需要自行尝试。不同尺寸的图像，要达到最佳的像素化的显示效果，所需要设置的单位像素块的大小也是不同的，实践出真知。</p><p>我们需要图像的指定一个处理范围，并对该范围内的每一个坐标(像素)点进行像素化的处理。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>Start_coordinate<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> End_coordinate<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pixel<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>Start_coordinate<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> End_coordinate<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pixel<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><p>在处理完成之后，我们再把Numpy数组转换回图像。</p><pre class=" language-python"><code class="language-python">im2 <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>im1<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>最后展示出处理后的图像</p><pre class=" language-python"><code class="language-python">im2<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="4-代码全景展示"><a href="#4-代码全景展示" class="headerlink" title="4 代码全景展示"></a>4 代码全景展示</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">def</span> <span class="token function">to_pixelBlock</span><span class="token punctuation">(</span>pixel<span class="token punctuation">,</span> Start_coordinate<span class="token punctuation">,</span> End_coordinate<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token triple-quoted-string string">'''         :param pixel: 单位像素块的元素大小            :param Start_coordinate: 处理的起始坐标(像素)点，元组形式          :param End_coordinate: 处理的终止坐标(像素)点，元组形式            :return:            通过中间值的RGB，对所选范围块的RGB进行重新赋值，设置的单位像素块(Pixel数值)越小，生成的像素图越精确    '''</span>    <span class="token comment" spellcheck="true"># 读取图片，并由 PIL image 转换为 NumPy array</span>    im1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"P:\\Personal\\LuoShen.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历所要处理范围内的所有坐标(像素)点</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>Start_coordinate<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> End_coordinate<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pixel<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>Start_coordinate<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> End_coordinate<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pixel<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 通过中间值的RGB，对所选范围块的RGB进行重新赋值</span>            im1<span class="token punctuation">[</span>y<span class="token punctuation">:</span>y <span class="token operator">+</span> pixel<span class="token punctuation">,</span> x<span class="token punctuation">:</span>x <span class="token operator">+</span> pixel<span class="token punctuation">]</span> <span class="token operator">=</span> im1<span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token punctuation">(</span>pixel <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>pixel <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 将NumPy array 转换为 PIL image        </span>    im2 <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>im1<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 展示处理后的图像</span>    im2<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 设置好要处理的像素范围，并以多大的像素块来生成最终效果图</span>    to_pixelBlock<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1280</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="5-后记"><a href="#5-后记" class="headerlink" title="5 后记"></a>5 后记</h2><p>本文使用了PIL加上Numpy的配合，短短几行代码实现了图像像素化的处理。当然这只是一种简单地实现，要想实现更丰富的处理效果，还可以借助CV2来实现。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文所涉及的完整代码详见GitHub：<a href="https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Convert_IMG_to_Pixel/" target="_blank" rel="noopener">https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Convert_IMG_to_Pixel/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之2019.618叠猫猫、Python帮你拿喵币</title>
      <link href="/2019/06/14/pythonapps-2019-618-pickmaomao/"/>
      <url>/2019/06/14/pythonapps-2019-618-pickmaomao/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之2019-618叠猫猫、Python帮你拿喵币"><a href="#Python小应用系列之2019-618叠猫猫、Python帮你拿喵币" class="headerlink" title="Python小应用系列之2019.618叠猫猫、Python帮你拿喵币"></a>Python小应用系列之2019.618叠猫猫、Python帮你拿喵币</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h2><p>最近叠猫猫的活动可真是十分的火爆，每天小伙伴们为了合猫猫忙的可谓是如火如荼。为啥要叠猫猫呢？赚猫币得现金红包！！眼看为实，先来看看我朋友的购物订单。</p><p>﻿﻿</p><p>看到没，优惠力度如此之大！！！</p><p>后知后觉的我，错过了第一波，可不想错过第二波啊！</p><p>活动需要不断的升级自家的猫，其中一个途径是通过逛店铺来获取喵币。每天可逛40店铺，共可领到40*300喵币！！但是，你总不能一直盯着玩吧？想想都累，所以呢，该Python大显身手了。</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h2><p>操作系统：Windows</p><p>Python版本：3.7.2</p><p>手机系统：Android</p><h2 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2 需求分析"></a>2 需求分析</h2><p>我们在手动的操作流程是逛店铺、领喵币，领取成功后，逛下一家店铺。好了，就是这么简单。</p><p>这里我们借助的是「adb」工具，配合Python脚本来完成。</p><h2 id="3-前置准备"><a href="#3-前置准备" class="headerlink" title="3 前置准备"></a>3 前置准备</h2><p>要正常使用「adb」需要打开USB调试，设置项通常出现在手机系统设置中的[开发人员选项]里面。</p><p>﻿﻿</p><p>通过开发者模式中的“指针位置”可以用来获取手机点击时的坐标</p><p>﻿﻿</p><h2 id="4-逛店铺流程回顾"><a href="#4-逛店铺流程回顾" class="headerlink" title="4 逛店铺流程回顾"></a>4 逛店铺流程回顾</h2><p>打开淘宝，在右上角找到合猫猫的入口并进入。</p><p>第一步，点击”合合卡”</p><p>第二步，点击”进店找卡”</p><p>第三步，等待10秒左右，点击”猫猫出现啦，点击得喵币”</p><p>第四步，点击”开心收下”</p><p>第五步，退出此店铺</p><p>因为有些店铺的左上角没有退出的按钮，这里为了统一操作，直接使用手机系统的全面屏手势退出即可，我的Honor9手机，是在屏幕左侧向右滑动可回到上一级。</p><p>第六步，退出店铺后即回到了主界面，如步骤一。</p><p>在这里，我们需要依次记录下”合合卡”、”进店找卡”、”猫猫出现啦，点击得喵币”、”开心收下”的坐标。</p><h2 id="5-代码全景展示"><a href="#5-代码全景展示" class="headerlink" title="5 代码全景展示"></a>5 代码全景展示</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>time<span class="token keyword">def</span> <span class="token function">pick_maomao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"点 合合卡 按钮"</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'adb shell input tap 145 1625'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"点 进店找卡 按钮"</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'adb shell input tap 841 1660'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"猫猫出现啦，点击得喵币"</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'adb shell input tap 967 1134'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"点 开心收下"</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'adb shell input tap 569 1380'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"利用全面屏手势退出店铺"</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'adb shell input swipe 0 1500 500 1500'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pick_maomao<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>短短十几行代码，轻松搞定！</p><p>将写好了代码放到「adb」工具的同路径下执行即可</p><p>﻿﻿</p><p>最后强调一下，手机连上电脑后，在执行脚本前要确保「adb」命令能正常操控手机。</p><h2 id="6-后记"><a href="#6-后记" class="headerlink" title="6 后记"></a>6 后记</h2><p>本文代码中的坐标，是在我的Honor9手机上获取到的，因手机型号众多屏幕大小也不同，大家在执行代码前，根据实际情况记录下自己手机上”合合卡”、”进店找卡”、”猫猫出现啦，点击得喵币”、”开心收下”的坐标即可，替换坐标数据后即可正常使用。留给我们的时间不多喽，抓紧时间搞起来吧~~</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文所涉及的完整代码详见GitHub：<a href="https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/2019_618_PickMaomao/" target="_blank" rel="noopener">https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/2019_618_PickMaomao/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之借助Python抢微信红包</title>
      <link href="/2019/06/10/pythonapps-grab-luckymoney/"/>
      <url>/2019/06/10/pythonapps-grab-luckymoney/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之借助Python抢微信红包"><a href="#Python小应用系列之借助Python抢微信红包" class="headerlink" title="Python小应用系列之借助Python抢微信红包"></a>Python小应用系列之借助Python抢微信红包</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h2><p>提到抢红包，就不得不提Xposed框架，它简直是个抢红包的神器，但使用Xposed框架有一个前提条件：手机需要root，对于苹果手机的话就需要越狱了。现在的手机想要root或越狱并不容易，同时这会对手机安全性带来一些风险，抢红包本身只是个娱乐活动，这样做就得不偿失了。</p><p>为了自动抢红包，python能帮我们实现吗？</p><p>答案是肯定的，本文就带大家一起探索下用Python如何实现自动抢红包。</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h2><p>操作系统：Windows</p><p>Python版本：3.7.2</p><p>手机系统：Android</p><h2 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2 需求分析"></a>2 需求分析</h2><p>这里我们的需求是实现自动抢红包。首先要打开微信，进入到指定的群聊，识别微信红包、执行抢红包的动作。这就是关键的步骤，简单清晰。</p><p>因为电脑版本的微信没有抢红包的功能，我们只能手机微信，那么就需要把手机连上电脑，通过电脑控制手机来自动抢，那就需要确保「adb」命令可正常执行。</p><p>识别微信中的消息，是红包还是普通的信息，这里我们通过聊天消息的元素标识来判断。这里我们借助了「Airtest IDE」工具来实现。</p><h2 id="3-前置准备"><a href="#3-前置准备" class="headerlink" title="3 前置准备"></a>3 前置准备</h2><h3 id="3-1-打开手机的USB调试"><a href="#3-1-打开手机的USB调试" class="headerlink" title="3.1 打开手机的USB调试"></a>3.1 打开手机的USB调试</h3><p>要正常使用「adb」需要打开USB调试，设置项通常出现在手机系统设置中的[开发人员选项]里面。</p><p>在手机上打开USB调试后，接下来我们通过Airttest IDE验证 adb 运行是否正常。</p><h3 id="3-2-下载安装Airtest-IDE"><a href="#3-2-下载安装Airtest-IDE" class="headerlink" title="3.2 下载安装Airtest IDE"></a>3.2 下载安装Airtest IDE</h3><p>开始之前先，先解释下airttest相关概念：</p><p>Airtest 是一个跨平台的、基于图像识别的UI自动化测试框架，适用于游戏和App，支持平台有Windows、Android和iOS。<br>Poco是一款基于UI控件识别的自动化测试框架，目前支持Unity3D/cocos2dx-*/Android原生app/iOS原生app/微信小程序，也可以在其他引擎中自行接入poco-sdk来使用。<br>AirtestIDE 是一个我们配套推出的跨平台的UI自动化测试编辑器，内置了Airtest和Poco的相关插件功能，能够使用它快速简单地编写脚本。<br>Airtest IDE 的下载地址：</p><pre><code>http://airtest.netease.com/</code></pre><p>下载之后，解压打开就可以使用，Airtest IDE的界面如下：</p><p>﻿﻿</p><p>使用AirtestIDE对Android应用进行自动化操作，第一步就需要连接Android设备。</p><p>请使用USB线连接手机，手机上出现的 允许USB调试 弹窗点击 确定。<br>点击连接面板中的 refresh ADB 按钮，设备列表将会刷新。<br>点击列表内对应设备的 Connect 完成连接。<br>若设备未刷出，点击 refresh ADB 按钮。﻿﻿</p><p>若连接遇到问题，请参考Airtest的官方教程：Android真机连接</p><h2 id="4-抢红包流程回顾"><a href="#4-抢红包流程回顾" class="headerlink" title="4 抢红包流程回顾"></a>4 抢红包流程回顾</h2><p>打开微信，在最左侧的Tab页，微信消息列表，我们需要从这里选择指定的群聊来抢红包。</p><p>在AirtestIDE中，我们可以通过暂停功能，冻结当前的UI树形结构来精确地检视UI控件，我们先来分析下这个页面中元素标识。</p><p>﻿﻿</p><p>▲聊天页面中整体的群聊消息的元素标识 com.tencent.mm:id/d1v</p><p>﻿﻿</p><p>▲聊天页面中单个群聊消息的元素标识 com.tencent.mm:id/b6e</p><p>接下来进入我们准备要抢红包的群聊中，识别出红包并执行抢红包的动作。</p><p>我们先来看看红包的标识：</p><p>﻿﻿</p><p>▲红包标识的示例1 com.tencent.mm:id/aql</p><p>﻿﻿</p><p>▲红包标识的示例2  com.tencent.mm:id/aql</p><p>点击红包，记录下弹出的大红包页面中“开”的元素标识</p><p>﻿﻿</p><p>▲大红包页面中”开“的标识 com.tencent.mm:id/d02</p><p>这里我们需要判断是红包是否有效，比如已被领完或是已被自己领取的红包就是无效的，我们在执行时可以跳过这些。</p><p>﻿﻿</p><p>▲已领取红包的标识 com.tencent.mm:id/apk</p><p>﻿﻿</p><p>▲已被领完红包的标识 com.tencent.mm:id/apk</p><p>我们用的各元素的标识都已取到，接下来就是组织我们的代码。</p><h2 id="5-代码梳理"><a href="#5-代码梳理" class="headerlink" title="5 代码梳理"></a>5 代码梳理</h2><p>首先得打开微信，利用Airtest启动app应用，只须一行代码即可搞定，如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开手机微信</span>poco<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">'微信'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>获取当前页面中所有所有群聊的名称</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 群聊消息的元素标识</span>Chat_msg <span class="token operator">=</span> poco<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'com.tencent.mm:id/d1v'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>offspring<span class="token punctuation">(</span><span class="token string">'com.tencent.mm:id/b6e'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取当前页面中所有群聊的名称</span>Chat_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Chat_names <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Chat_msg<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>选择并进入指定的群聊</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 指定抢红包的群聊名称</span>chat <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请指定群聊名称:'</span><span class="token punctuation">)</span><span class="token keyword">if</span> chat <span class="token keyword">in</span> Chat_names<span class="token punctuation">:</span>    index <span class="token operator">=</span> Chat_names<span class="token punctuation">.</span>index<span class="token punctuation">(</span>chat<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 点击进入指定的群聊</span>    Chat_msg<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在微信聊天页面中，获取当前页面中的所有消息元素。</p><pre class=" language-python"><code class="language-python">msg_list <span class="token operator">=</span> poco<span class="token punctuation">(</span><span class="token string">"android.widget.ListView"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>遍历消息并查找红包</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> msg <span class="token keyword">in</span> msg_list<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 微信红包的标识</span>    LuckyMoney <span class="token operator">=</span> msg<span class="token punctuation">.</span>offspring<span class="token punctuation">(</span><span class="token string">'com.tencent.mm:id/aql'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 已失效红包（比如已领取、已被领完）的标识</span>    Invalid <span class="token operator">=</span> msg<span class="token punctuation">.</span>offspring<span class="token punctuation">(</span><span class="token string">'com.tencent.mm:id/aqk'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断红包是否有效并抢起来！</span>    <span class="token keyword">if</span> LuckyMoney<span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><p>在LuckyMoney中定义抢红包的动作</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> Invalid<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>Invalid<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'已领取'</span> <span class="token operator">or</span> Invalid<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'已被领完'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'红包已无效，跳过……'</span><span class="token punctuation">)</span>    <span class="token keyword">continue</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'发现一个新红包，抢起来！'</span><span class="token punctuation">)</span>    poco<span class="token punctuation">(</span><span class="token string">"com.tencent.mm:id/d1v"</span><span class="token punctuation">)</span>    msg<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    click_open <span class="token operator">=</span> poco<span class="token punctuation">(</span><span class="token string">"com.tencent.mm:id/d02"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> click_open<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        click_open<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    keyevent<span class="token punctuation">(</span><span class="token string">'BACK'</span><span class="token punctuation">)</span></code></pre><h2 id="6-后记"><a href="#6-后记" class="headerlink" title="6 后记"></a>6 后记</h2><p>若我们在一台电脑上并不想安装Airtest IDE，还能执行这个脚本吗？</p><p>当然可以，只需要安装好「pocoui」这个第三方库就可以“抛弃”它了！</p><pre class=" language-python"><code class="language-python">pip install pocoui</code></pre><p>利用 AirtestIDE 创建一个项目时，设备类型选中 Android，就会在编码区生成一段初始化的代码。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> airtest<span class="token punctuation">.</span>core<span class="token punctuation">.</span>api <span class="token keyword">import</span> <span class="token operator">*</span>auto_setup<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token keyword">from</span> poco<span class="token punctuation">.</span>drivers<span class="token punctuation">.</span>android<span class="token punctuation">.</span>uiautomation <span class="token keyword">import</span> AndroidUiautomationPocopoco <span class="token operator">=</span> AndroidUiautomationPoco<span class="token punctuation">(</span>use_airtest_input<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> screenshot_each_action<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p>我们自己编写的Python代码中也需要加上这段初始化的代码。</p><p>再次强调，在执行脚本时要确保手机连上电脑，并确保「adb」命令正常运行。</p><p>对Airtest有兴趣的小伙伴，可以参考airtest官方教程：AirtestIDE官方文档</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文所涉及的完整代码详见GitHub：<a href="https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Grab_LuckyMoney" target="_blank" rel="noopener">https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Grab_LuckyMoney</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之Python助你秒杀淘宝大单</title>
      <link href="/2019/06/04/pythonapps-spike-taobao-orders/"/>
      <url>/2019/06/04/pythonapps-spike-taobao-orders/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之Python助你秒杀淘宝大单"><a href="#Python小应用系列之Python助你秒杀淘宝大单" class="headerlink" title="Python小应用系列之Python助你秒杀淘宝大单"></a>Python小应用系列之Python助你秒杀淘宝大单</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h2><p>年中购物618大狂欢开始了，各大电商又开始了大力度的折扣促销，我们的小胖又给大家谋了一波福利，淘宝APP直接搜索：小胖发福利，每天领取三次粉丝专属现金大红包。</p><p>有了现金大红包，如何做到更省钱的剁手呢？今天给大家提供一种思路，用Python实现秒杀订单，借用自动化方式完成最优解。</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h2><p>操作系统：Windows</p><p>Python版本：3.7.2</p><h2 id="2-需求分析-amp-前期准备"><a href="#2-需求分析-amp-前期准备" class="headerlink" title="2 需求分析&amp;前期准备"></a>2 需求分析&amp;前期准备</h2><h3 id="2-0-需求分析"><a href="#2-0-需求分析" class="headerlink" title="2.0 需求分析"></a>2.0 需求分析</h3><p>我们的目标是秒杀淘宝的订单，这里面有几个关键点，首先需要登录淘宝，其次你需要准备好订单，最后要在指定时间快速提交订单。</p><p>登录淘宝，这里就要用到一个爬虫利器Selenium，它是一个自动化测试工具，利用它我们可以驱动浏览器执行特定的动作，如点击、下拉等等操作，所见即所得。另外对于一些 JavaScript 渲染的页面来说，此种抓取方式非常有效。</p><h3 id="2-1-Selenium的安装"><a href="#2-1-Selenium的安装" class="headerlink" title="2.1 Selenium的安装"></a>2.1 Selenium的安装</h3><p>Selenium 的安装很简单，可采用如下方式。</p><pre class=" language-python"><code class="language-python">pip install selenium</code></pre><p>Selenium安装好之后，并不能直接使用，它需要与浏览器进行对接。这里拿Chrome浏览器为例。若想使用Selenium成功调用Chrome浏览器完成相应的操作，需要通过ChromeDriver来驱动。</p><h3 id="2-2-ChromeDriver的安装"><a href="#2-2-ChromeDriver的安装" class="headerlink" title="2.2 ChromeDriver的安装"></a>2.2 ChromeDriver的安装</h3><p>这里是ChromeDriver的官方下载地址。</p><p>链接：<a href="https://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">https://chromedriver.storage.googleapis.com/index.html</a></p><p>我们在下载之前先来确认下我们使用的Chrome浏览器版本。</p><p>﻿﻿</p><p>通过ChromeDriver的下载链接，找到与之对应的Chrome浏览器版本，根据你电脑系统的平台类型进行下载。</p><p>﻿﻿﻿﻿</p><p>下载完成之后，解压，将其放置在Python安装路径下Scripts文件夹中即可</p><p>﻿﻿</p><p>上述操作结束后，我们执行如下命令，测试一下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token comment" spellcheck="true"># 打开Chrome浏览器</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>代码执行后，若成功打开了浏览器，则证明你的ChromeDriver安装的没问题，可以正常愉快地使用Selenium了。</p><p>接下来，我们先来回顾下淘宝购物流程。 </p><h2 id="3-淘宝购物流程回顾"><a href="#3-淘宝购物流程回顾" class="headerlink" title="3 淘宝购物流程回顾"></a>3 淘宝购物流程回顾</h2><h3 id="3-1-首先要打开淘宝网站"><a href="#3-1-首先要打开淘宝网站" class="headerlink" title="3.1 首先要打开淘宝网站"></a>3.1 首先要打开淘宝网站</h3><p><a href="https://www.taobao.com" target="_blank" rel="noopener">https://www.taobao.com</a><br>换作使用Seleuinm方式，代码如下：</p><pre class=" language-python"><code class="language-python">browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.taobao.com"</span><span class="token punctuation">)</span></code></pre><h3 id="3-2-我们登录淘宝才能进行下一步操作"><a href="#3-2-我们登录淘宝才能进行下一步操作" class="headerlink" title="3.2 我们登录淘宝才能进行下一步操作"></a>3.2 我们登录淘宝才能进行下一步操作</h3><p>﻿﻿</p><p>换成Seleuinm方式，代码：</p><pre class=" language-python"><code class="language-python">browser<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">"亲，请登录"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这时我们就要就跳到了一个扫码登录的页面，我们用手机进行扫码，登录成功之后进行下一步。</p><h3 id="3-3-登录成功之后，我们来打开购物车，链接如下："><a href="#3-3-登录成功之后，我们来打开购物车，链接如下：" class="headerlink" title="3.3 登录成功之后，我们来打开购物车，链接如下："></a>3.3 登录成功之后，我们来打开购物车，链接如下：</h3><p><a href="https://cart.taobao.com/cart.htm" target="_blank" rel="noopener">https://cart.taobao.com/cart.htm</a><br>换成Seleuinm方式，代码：</p><pre class=" language-python"><code class="language-python">browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://cart.taobao.com/cart.htm"</span><span class="token punctuation">)</span></code></pre><h3 id="3-4-我们想要全选购物车中的商品，直接点击全选即可"><a href="#3-4-我们想要全选购物车中的商品，直接点击全选即可" class="headerlink" title="3.4 我们想要全选购物车中的商品，直接点击全选即可"></a>3.4 我们想要全选购物车中的商品，直接点击全选即可</h3><p>﻿﻿</p><p>换成Seleuinm方式，代码：</p><pre class=" language-python"><code class="language-python">browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"J_SelectAll1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>注：若你的购物车商品比较多，又不想全选购买，那就 手动 勾选想要下单的商品。</p><h3 id="3-5-勾选好商品后就可以“结算”下单"><a href="#3-5-勾选好商品后就可以“结算”下单" class="headerlink" title="3.5 勾选好商品后就可以“结算”下单"></a>3.5 勾选好商品后就可以“结算”下单</h3><p>﻿﻿</p><p>换成Seleuinm方式，代码即：</p><pre class=" language-python"><code class="language-python">browser<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">"结 算"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3-6-等待提交完订单后才算数"><a href="#3-6-等待提交完订单后才算数" class="headerlink" title="3.6 等待提交完订单后才算数"></a>3.6 等待提交完订单后才算数</h3><p>﻿﻿</p><p>换成Seleuinm方式，代码即：</p><pre class=" language-python"><code class="language-python">browser<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">'提交订单'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3-7-订单成功秒下之后，接下来的付款，慢慢来就好。"><a href="#3-7-订单成功秒下之后，接下来的付款，慢慢来就好。" class="headerlink" title="3.7 订单成功秒下之后，接下来的付款，慢慢来就好。"></a>3.7 订单成功秒下之后，接下来的付款，慢慢来就好。</h3><p>﻿﻿</p><h2 id="4-秒杀的实现"><a href="#4-秒杀的实现" class="headerlink" title="4 秒杀的实现"></a>4 秒杀的实现</h2><p>秒杀的实现，思路也很简单。这里有两个时间点，一是抢购时间，一是当前时间。只需要比较这两个时间点，到了抢购时间立即下单即可。</p><p>记录时间，需要使用<code>datetime</code>这个内置模块，代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimenow <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S.%f'</span><span class="token punctuation">)</span></code></pre><h2 id="5-代码梳理"><a href="#5-代码梳理" class="headerlink" title="5 代码梳理"></a>5 代码梳理</h2><p>首先得登录淘宝，这里我们定义一个login函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 打开淘宝首页，通过扫码登录</span>    browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.taobao.com"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> browser<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">"亲，请登录"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        browser<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">"亲，请登录"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"请尽快扫码登录"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>接下来就是勾选购物车中的商品，这里我们定义一个picking函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">picking</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 打开购物车列表页面</span>    browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://cart.taobao.com/cart.htm"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 是否全选购物车</span>    <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"J_SelectAll1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"J_SelectAll1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"找不到购买按钮"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"请手动勾选需要购买的商品"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><p>等待抢购时间，定时秒杀，这里我们定义一个buy函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">buy</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S.%f'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 对比时间，时间到的话就点击结算</span>        <span class="token keyword">if</span> now <span class="token operator">></span> times<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 点击结算按钮</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> browser<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">"结 算"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        browser<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">"结 算"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"结算成功，准备提交订单"</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span>                <span class="token keyword">except</span><span class="token punctuation">:</span>                    <span class="token keyword">pass</span>            <span class="token comment" spellcheck="true"># 点击提交订单按钮</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> browser<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">'提交订单'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        browser<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">'提交订单'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"抢购成功，请尽快付款"</span><span class="token punctuation">)</span>                <span class="token keyword">except</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"再次尝试提交订单"</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span></code></pre><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h2><p>短短几十行代码就能秒杀淘宝订单，赶紧行动起来吧！记着，每天在淘宝上搜索小胖发福利，领取粉专属福利哟~</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文所涉及的完整代码详见GitHub：<a href="https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Crawl_KingofGlory" target="_blank" rel="noopener">https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Crawl_KingofGlory</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面试题系列之05 遍历目录并筛选指定文件</title>
      <link href="/2019/04/28/interviewquestion-005-bian-li-mu-lu-bing-shai-xuan-zhi-ding-wen-jian/"/>
      <url>/2019/04/28/interviewquestion-005-bian-li-mu-lu-bing-shai-xuan-zhi-ding-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Python面试题系列之05-设计实现遍历目录及子目录，并抓取-txt文件？"><a href="#Python面试题系列之05-设计实现遍历目录及子目录，并抓取-txt文件？" class="headerlink" title="Python面试题系列之05: 设计实现遍历目录及子目录，并抓取.txt文件？"></a>Python面试题系列之05: 设计实现遍历目录及子目录，并抓取.txt文件？</h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>设计实现遍历目录及子目录，并抓取.txt文件？</p><h2 id="知识点详解"><a href="#知识点详解" class="headerlink" title="知识点详解"></a>知识点详解</h2><p>这道题并不难，这里我们用三种思路来实现这个小需求。依次会用到os模块、glob模块、pathlib模块。</p><h3 id="方法一：利用os模块"><a href="#方法一：利用os模块" class="headerlink" title="方法一：利用os模块"></a>方法一：利用os模块</h3><p>python的os库有很多和文件，路径，执行系统命令相关的功能。比如我们可以使用os.listdir()方法来列出目录下的所有文件和目录放入一个列表进行返回，但是listdir()函数不可对目录的子目录进行扫描。  </p><p>很多时候我们需要将某个文件夹下的所有文件都要找出来，那么此时我们就需要os.walk()。它通过在目录树中向下或向上游走，输出目录的文件名。</p><p>os.walk()方法的语法格式如下：</p><p>os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])<br>top – 是你所要遍历的目录的地址<br>topdown –可选，为 True，则优先遍历 top 目录，否则优先遍历 top 的子目录。<br>onerror – 可选，需要一个 callable 对象，当 walk 需要异常时，会调用。<br>followlinks – 可选，若为 True，则会遍历目录下的快捷方式。<br>该函数没有返回值，会使用yield关键字抛出一个存放当前该层目录(dirpath, dirnames, filenames)的三元组，最终将所有目录层的的结果变为一个生成器。</p><p>dirpath是一个string，代表目录的路径；<br>dirnames是一个list，包含了dirpath下所有子目录的名字；<br>filenames是一个list，包含了非目录文件的名字。这些名字不包含路径信息，如果需要得到全路径，需要使用 os.path.join(dirpath, filename)；</p><p>了解了os.walk的语法后，接下来直接上代码，来实现这个需求。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">get_files</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> suffix<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> dirpath<span class="token punctuation">,</span>dirnames<span class="token punctuation">,</span>filenames <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> filename <span class="token keyword">in</span> filenames<span class="token punctuation">:</span>            name<span class="token punctuation">,</span> suf <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>            <span class="token keyword">if</span> suf <span class="token operator">==</span> suffix<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dirpath<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>get_files<span class="token punctuation">(</span><span class="token string">"E:\Pythonista"</span><span class="token punctuation">,</span> <span class="token string">'.txt'</span><span class="token punctuation">)</span></code></pre><h3 id="方法二：利用glob模块"><a href="#方法二：利用glob模块" class="headerlink" title="方法二：利用glob模块"></a>方法二：利用glob模块</h3><p>glob模块可以使用Unix shell风格的通配符匹配符合特定格式的文件和文件夹，跟windows的文件搜索功能差不多。glob模块并非调用一个子shell实现搜索功能，而是在内部调用了os.listdir()和fnmatch.fnmatch()。</p><p>glob模块支持的通配符如下：</p><ul><li>匹配0或多个字符</li><li><ul><li>匹配所有文件、目录、子目录和子目录里的文件（Python 3.5版本新增）<br>?        匹配1个字符，与正则表达式里的?不同<br>[exp]    匹配指定范围内的字符，如：[1-9]匹配1至9范围内的字符<br>[!exp]    匹配不在指定范围内的字符</li></ul></li></ul><p>接下来就利用glob模块来实现这个需求，以下是具体代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> glob <span class="token keyword">import</span> iglob<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> suffix<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> iglob<span class="token punctuation">(</span>f<span class="token string">"{filepath}/**/*{suffix}"</span><span class="token punctuation">,</span> recursive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    suffix <span class="token operator">=</span> <span class="token string">".txt"</span>    func<span class="token punctuation">(</span><span class="token string">"E:\Pythonista"</span><span class="token punctuation">,</span> suffix<span class="token punctuation">)</span></code></pre><p>自从Python 3.5版本新增了**通配符，glob模块变得更加易用，真是太赞了😉</p><h3 id="方法三：利用pathlib模块"><a href="#方法三：利用pathlib模块" class="headerlink" title="方法三：利用pathlib模块"></a>方法三：利用pathlib模块</h3><p>pathlib模块是Python 3.4版本中新增的模块，pathlib绝不仅仅是替换了os.path那么简单，它可以说是路径处理的瑞士军刀。它完全采用面向对象的编程方式，尤其是在处理配置路径方面简直太方便了。</p><p>闲话少说，我们直接用Path().rglob来递归遍历指定的文件。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Pathsrc <span class="token operator">=</span> <span class="token string">"E:\Pythonista"</span><span class="token keyword">for</span> item <span class="token keyword">in</span> Path<span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">.</span>rglob<span class="token punctuation">(</span><span class="token string">'*.txt'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><p>简单几行代码，轻松搞定😎</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>无论用<code>os</code>模块、还是<code>glob</code>模块、或是<code>pathlib</code>模块均可实现这一需求，详细代码见上文内容。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>上述三种方法都能实现这一需求，但哪种方法更加简便已不言而喻。所以还是希望大家能多了解一些Python新版本的特性，紧跟技术前沿😁😁😁</p><p>可通过如下这个链接来了解Python 3中每个版本加入的新特性。</p><p><a href="https://docs.python.org/3.x/whatsnew/3.x.html" target="_blank" rel="noopener">https://docs.python.org/3.x/whatsnew/3.x.html</a></p><p>注：需要把x替换成实际版本号即可。好了，以上就是本篇全部内容。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python面试题精析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面试题系列之04 迭代器、生成器</title>
      <link href="/2019/04/25/interviewquestion-004-die-dai-qi-sheng-cheng-qi/"/>
      <url>/2019/04/25/interviewquestion-004-die-dai-qi-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="Python面试题系列之04-什么是迭代器、生成器？"><a href="#Python面试题系列之04-什么是迭代器、生成器？" class="headerlink" title="Python面试题系列之04: 什么是迭代器、生成器？"></a>Python面试题系列之04: 什么是迭代器、生成器？</h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>什么是迭代器、生成器？</p><h2 id="知识点详解"><a href="#知识点详解" class="headerlink" title="知识点详解"></a>知识点详解</h2><h3 id="1-迭代器"><a href="#1-迭代器" class="headerlink" title="1 迭代器"></a>1 迭代器</h3><p>假如我们自己写了一个数据类型，希望这个数据类型里的东西也可以使用for循环被一个一个地取出来，那我们就必须满足for的要求。这个要求就叫做“协议”。</p><p>可以被迭代要满足的要求就叫做可迭代协议。可迭代协议的定义非常简单，就是内部实现了iter方法。</p><h4 id="1-1-什么是可迭代对象（Iterable）"><a href="#1-1-什么是可迭代对象（Iterable）" class="headerlink" title="1.1 什么是可迭代对象（Iterable）"></a>1.1 什么是可迭代对象（Iterable）</h4><p>如果这个对象中有<code>__iter__()</code>方法，这个对象就是可迭代对象。简单来说就是可以使用<code>for...in...</code>语句进行循环的对象。我们可以使用<code>isinstance()</code>方法进行判断。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterable<span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span><span class="token string">'Pythonista'</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token boolean">False</span></code></pre><h4 id="1-2-什么是迭代器（Iterator）"><a href="#1-2-什么是迭代器（Iterator）" class="headerlink" title="1.2 什么是迭代器（Iterator）"></a>1.2 什么是迭代器（Iterator）</h4><p>迭代器协议是指：对象必须提供一个<code>next</code>方法，执行该方法要么返回迭代中的下一项，要么就引起一个<code>StopIteration</code>异常，以终止迭代。</p><p>迭代器只不过是一个实现迭代器协议的容器对象，它基于两个方法：</p><p><code>next()</code>方法，返回容器的下一个项目<br><code>iter()</code>方法，返回迭代器本身</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> temp <span class="token operator">=</span> iter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'人人都是'</span><span class="token punctuation">,</span> <span class="token string">'Pythonista'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'list_iterator'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span>人人都是<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span>Pythonista<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span> StopIteration</code></pre><h4 id="1-3-迭代器的优势及使用场景"><a href="#1-3-迭代器的优势及使用场景" class="headerlink" title="1.3 迭代器的优势及使用场景"></a>1.3 迭代器的优势及使用场景</h4><p>在构建迭代器时，不是将所有的元素一次性的加载，而是等调用<code>next</code>方法时返回元素，所以不需要考虑内存的问题。</p><p>所以迭代器常用于如下场景中：</p><p>数列的数据规模巨大<br>数列有规律，但是不能使用列表推导式描述。</p><h3 id="2-生成器"><a href="#2-生成器" class="headerlink" title="2. 生成器"></a>2. 生成器</h3><h4 id="2-1-什么是生成器（Generator）"><a href="#2-1-什么是生成器（Generator）" class="headerlink" title="2.1 什么是生成器（Generator）"></a>2.1 什么是生成器（Generator）</h4><p>生成器类似于一种数据类型，这种数据类型自动实现了迭代器协议（其他的数据类型需要调用自己内置的<code>__iter__</code>方法）。生成器在Python中的表现形式分为生成器函数、生成器表达式两种。</p><h4 id="2-1-生成器函数"><a href="#2-1-生成器函数" class="headerlink" title="2.1 生成器函数"></a>2.1 生成器函数</h4><p>生成器函数和常规函数一样，都采用<code>def</code>语句进行定义。但在返回结果时，生成器函数中使用的是<code>yield</code>语句而不是<code>return</code>语句。<code>yield</code>语句一次返回一个结果，在每个结果中间，挂起函数的状态，以便下次重它离开的地方继续执行。</p><p>当需要一个将返回一个序列或在循环中执行的函数时，就可以使用生成器，因为当这些元素被传递到另一个函数中进行后续处理时，一次返回一个元素可以有效的提升整体性能。</p><h4 id="2-2-生成器表达式"><a href="#2-2-生成器表达式" class="headerlink" title="2.2 生成器表达式"></a>2.2 生成器表达式</h4><p>生成式表达式，类似于列表推导。它只是按需返回产生结果的一个对象，而不是构建一个结果列表，即按需取出对象。</p><p>生成式表达式是一种实现生成器的便捷方式，将列表推导式的中括号替换为圆括号。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>s <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>g <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>g<span class="token operator">&lt;</span>generator object <span class="token operator">&lt;</span>genexpr<span class="token operator">></span> at <span class="token number">0x000001B670D4A408</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span>next<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span>next<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token number">1</span></code></pre><p>生成器表达式是一种边循环边计算，使得列表的元素可以在循环过程中一个个的推算出来，不需要创建完整的列表，从而节省了大量的空间。</p><h4 id="2-3-关于生成器的总结"><a href="#2-3-关于生成器的总结" class="headerlink" title="2.3 关于生成器的总结"></a>2.3 关于生成器的总结</h4><p>语法上和函数类似：生成器函数和常规函数几乎是一样的。它们都是使用<code>def</code>语句进行定义，差别在于生成器使用<code>yield</code>语句返回一个值，而常规函数使用<code>return</code>语句返回一个值。<br>自动实现迭代器协议：由于生成器自动实现了迭代器协议，所以我们可以调用它的<code>next</code>方法，并且在没有值可以返回的时候，生成器自动产生<code>StopIteration</code>异常。<br>状态挂起：生成器使用<code>yield</code>语句返回一个值。<code>yield</code>语句挂起该生成器的状态，保留足够的信息，以便之后从它离开的地方继续执行。<br>生成器只能遍历一次，不能重复使用：在程序中如果已经使用生成器遍历过一次得到结果，那么第二次遍历生成器将得不到任何结果，因为在第一次遍历生成器时，生成器已经遍历到头，它的特性决定它无法遍历第二次。</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>迭代器<br>可被next()函数调用并不断返回下一个值的对象就是迭代器。简单来说：凡是可以被for循环访问的都是迭代器，这是因为迭代器里面实现了iter协议和next方法。</p><p>生成器<br>生成器就是特殊的迭代器，它在迭代器的基础上再次进行了封装。<br>因为自动创建了iter()和 next()方法，使得生成器显得特别简洁；使用生成器表达式取代列表解析可以同时节省内存，所以生成器也很高效。<br>另外生成器是协程的基础，协程是通过上下文切换进行任务协作的，而生成器挂起状态的特性很好地满足了协程的需求。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>最后再通过这张图来理解生成器(Generator)、迭代器(Iterator)、可迭代对象(Iterable)之间关系。欢迎大家在评论区留言说出自己的理解。</p><p>﻿﻿</p><p>好了，以上就是本篇全部内容。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python面试题精析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面试题系列之03 进程、线程、协程</title>
      <link href="/2019/04/24/interviewquestion-003-jin-cheng-xian-cheng-xie-cheng/"/>
      <url>/2019/04/24/interviewquestion-003-jin-cheng-xian-cheng-xie-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Python面试题系列之03-谈谈你对进程，线程，协程的理解？"><a href="#Python面试题系列之03-谈谈你对进程，线程，协程的理解？" class="headerlink" title="Python面试题系列之03: 谈谈你对进程，线程，协程的理解？"></a>Python面试题系列之03: 谈谈你对进程，线程，协程的理解？</h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>谈谈你对<code>进程</code>，<code>线程</code>，<code>协程</code>的理解？</p><h2 id="知识点详解"><a href="#知识点详解" class="headerlink" title="知识点详解"></a>知识点详解</h2><h3 id="一个小故事"><a href="#一个小故事" class="headerlink" title="一个小故事"></a>一个小故事</h3><p>我们先从一个故事讲起。从前有座山，山上有座庙，庙里……</p><p>有兄弟俩，估且称他们旺财和小强吧，旺财和小强是两个很庞大的程序，每个都是十几万行的代码量级。 他们两个的人生价值就是到CPU上去运行，把运行结果告诉人类。</p><p>CPU是稀缺资源，只有一个，他们俩必须排着队，轮流使用。旺财从头到尾执行结束后，让出CPU， 让小强从头开始去执行。</p><p>﻿﻿</p><p>人类把这种处理方式叫做批处理。</p><p>长久以来，两人相安无事。 后来CPU的速度越来越快， 远远超过了内存，硬盘的速度。人类想到，这批处理系统的效率有点低啊，你看当小强需要从硬盘上读取数据的时候，CPU也一直在等待，这是多大的浪费啊！这时候完全可以让旺财来运行一下嘛！</p><p>当然得保存好小强的执行现场：具体执行到那一行程序指令了，函数调用到什么层次了，每个函数调用都有什么样的参数，CPU寄存器中的值….. 等等一系列东西。</p><p>如果不把小强的执行现场给保存下来，等到小强的数据从银盘读完了，就没法回到中断处来继续执行了。</p><p>这个执行现场再加上小强的代码，就是一个执行中的程序，被称为“进程” 。</p><p>旺财和小强在运行的时候，也被改造成了进程。</p><p>人类还规定：进程不能长时间占据CPU， 只能在CPU上执行一小会儿，然后马上切换到别的进程去执行。</p><p>旺财和小强不以为意：不就是执行一会儿，歇一会儿，然后继续执行嘛！</p><p>但是他们不知道的是，由于CPU运行速度超快，旺财和小强虽然在不断地切换运行，在人类那缓慢的世界里看来，旺财和小强好像是同时在执行一样。  这就是并发。</p><p>﻿﻿</p><p>（在人类看来，小强和旺财似乎是在同时执行）</p><p>多年以后，他们俩才真正地实现了并行： 在一个豪华电脑中，每人都被分配了一个CPU ， 真正地同时执行， 这是后话了。</p><p>这时候旺财已经有了界面，还能访问网络，每当它联网的时候（这也是个非常非常耗时的操作），就得把CPU让给小强。</p><p>即使旺财再次被调度执行，由于网络数据还没有返回，他必须等待，什么事情都做不了，在人类看来，界面根本无法操作，旺财不响应了！  气得人类经常把旺财 kill 掉。</p><p>旺财心里苦，他很纳闷小强怎么就没有问题，小强不是要读写硬盘吗？ 那也是很慢的操作啊。</p><p>小强说：“你傻啊，内部只有一个执行的流程，一遇到耗时的操作就得等待，你看看我，内部搞了两个执行流程（线程），一个用来读写硬盘（T1)，另外一个处理界面(T2)。我和操作系统商量好了，如果T1在读写硬盘， 就可以调度我的T2来执行，这样界面至少还可以操作。 ”</p><p>﻿﻿</p><p>旺财觉得很有意思，也采用了类似办法。于是，一个进程中至少有一个执行的流程（主线程），也可以开启新的执行流程（线程）。线程变成了最小的调度单位。</p><p>这一天，旺财被一个叫做生产者和消费者的问题折腾地死去活来，两个线程，一个线程向队列中放数据，另外一个从队列中取数据，处理起两个线程的协作就显得很麻烦，不但需要加锁，还得做好线程的通知和等待。</p><p>正在感慨多线程编程之难的时候， 旺财震惊地发现，小强用了一个极为简单的办法把生产者，消费者问题给解决了。代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 生产者</span><span class="token keyword">def</span> <span class="token function">producer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 其他代码  </span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                  value <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>生成数据<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        c<span class="token punctuation">.</span>send<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 消费者</span><span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 其他代码      </span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> <span class="token keyword">yield</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>c <span class="token operator">=</span> consumer<span class="token punctuation">(</span><span class="token punctuation">)</span>producer<span class="token punctuation">(</span>c<span class="token punctuation">)</span></code></pre><p>“这….这怎么执行啊，那个yield是怎么回事？”  旺财表示不解。</p><p>“简单啊，你看那个生产者，是不是向消费者发送了数据？ ” 小强说。</p><p>“对啊，然后呢，生产者发送了数据以后，会马上进行下一轮循环吗？”</p><p>“这就是关键所在了，”小强说，“ 它们是这么执行的：”</p><p>生产者发送数据，暂停运行，不进行下一轮循环<br>消费者其实一直在value = yield 那里等待，直到数据到来，现在数据来了，取出处理（value就是生产者发送过来的数据）。<br>消费者在循环中再次yield， 暂停执行。<br>生产者继续下一轮的循环，生成新的消息，发送给消费者。﻿﻿</p><p>旺财觉得很吃惊，小强竟然可以让一个正在执行的程序暂停，他不由得问道：“你这个暂停是真的停止了了，还是说只是像Java的yield那样，让出CPU进入了就绪状态？ 等待下次调度运行？”</p><p>“是真的暂停了，程序就停在那里，等待运行控制权从对方那里转移过来。”</p><p>“这不是操作系统干的事情吗？ ” 旺财更加吃惊了。</p><p>“正是这样，” 小强得意地说：“我打算把类似生产者，消费者这样的代码称为‘协程’， 这个协程有个重要的特点，就是完全被我所调度和掌控， 不用操作系统介入。”</p><p>“这个协程和线程似乎很像啊。每次协程停止执行的时候，也得保存现场，要不然没法恢复执行。” 旺财说。</p><p>“是啊，只是他们比线程更加轻量级，操作系统内核不用参与，相当于用户态线程了，协程的开销极小，可以轻松地创建大量的协程来做事情。 对了，也许你注意到了，我这两个协程是’合作式’的，它们两个同一时刻只能有一个在运行。 实际上，我在底层可以用一个线程去执行这两个协程。  ”</p><p>旺财表示同意：“不错，既然两个程序可以’合作’，那就不用加锁了，也不用在代码里写什么wait和notify了，在程序层面，可以用同步的方式实现异步的功能了！ 代码很清晰，我也搞个协程来玩玩吧！”     </p><p>[本故事引自微信公共号 - 码农翻身]</p><p>故事讲完了，接下来看看具体的概念吧！</p><p>进程<br>进程是对资源进行分配和调度的最小单位，是操作系统结构的基础，是线程的容器（就像是一幢房子，一个空壳子，并不能运动）。</p><p>线程的概念主要有两点：</p><p>进程是一个实体，每个进程都有自己的地址空间，一般包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。<br>文本区域存储处理器执行的代码；<br>数据区域存储变量和进程在执行期间所使用的动态分配的内存；<br>堆栈区域存储在活动过程中所调用的指令和本地变量。<br>进程是一个“执行中的程序”。程序是一个没有生命的实体，只有在操作系统调用时，他才会成为一个活动的实体：进程。<br>线程<br>线程被称为轻量级进程，是操作系统能够运算调度的最小单位，线程被包含在进程中，是进程中实际处理单位。</p><p>一个标准的线程由线程ID，当前指令指针(PC），寄存器集合和堆栈组成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个 进程的其它线程共享进程所拥有的全部资源。</p><p>一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。由于线程之间的相互制约，致使线程在运行中呈现出间断性。</p><p>线程也有就绪、阻塞和运行三种基本状态。</p><p>就绪状态是指线程具备运行的所有条件，逻辑上可以运行，在等待处理机；<br>运行状态是指线程占有处理机正在运行；<br>阻塞状态是指线程在等待一个事件（如某个信号量），逻辑上不可执行。<br>每一个程序都至少有一个线程，若程序只有一个线程，那就是程序本身。</p><p>进程与线程的区别<br>进程是资源分配的最小单位，线程是系统调度（程序执行）的最小单位。<br>进程有自己独占的地址空间，每启动一个进程，系统就需要为它分配地址空间；<br> 而一个进程下所有线程共享该进程的所有资源，使用相同的地址空间，因此CPU在线程之间切换远远比在进城之间切换花费小，而且创建一个线程的开销也远远比开辟一个进程小得多。<br>线程之间通信更加方便，同一进程下所有线程共享全局变量、静态变量等数据。而进程之间通信需要借助第三方。<br>线程只能归属于一个进程并且它只能访问该进程所拥有的资源。当操作系统创建一个进程后，该进程会自动申请一个名为主线程或首要线程的线程。<br>处理IO密集型任务或函数用线程；处理计算密集型任务或函数用进程。<br>协程<br>协程又叫微线程，一个程序可以包含多个协程，就好比一个进程包含多个线程。协程的调度完全由用户控制。</p><p>协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p><p>协程和线程的阻塞是有本质区别的。协程的暂停完全由程序控制，线程的阻塞状态是由操作系统内核来进行切换。因此，协程的开销远远小于线程的开销。</p><p>线程和协程的区别<br>一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。<br>线程进程都是同步机制，而协程则是异步。<br>协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态。 </p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p><code>进程</code>：<br>一个运行的程序（代码）就是一个进程，没有运行的代码叫程序，进程是系统资源分配的最小单位，进程拥有自己独立的内存空间，所以进程间数据不共享，开销大。</p><p><code>线程</code>：<br>调度执行的最小单位，也叫执行路径，不能独立存在，依赖进程存在。一个进程至少有一个线程，叫主线程，而多个线程共享内存(数据共享，共享全局变量)，从而极大地提高了程序的运行效率。</p><p><code>协程</code>：<br>是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。 协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>好了，故事讲完了、概念介绍了、三者的区别也给大家列举了。想必大家对进程、线程、协程已经有了很深的印象，最后再通过这张图回顾下，欢迎大家在评论区留言说出自己的对进程、线程、协程的理解。</p><p>好了，以上就是本篇全部内容。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python面试题精析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面试题系列之02 Python2 与 Python3 的区别</title>
      <link href="/2019/04/23/interviewquestion-002-python2-yu-python3-de-qu-bie/"/>
      <url>/2019/04/23/interviewquestion-002-python2-yu-python3-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="Python面试题系列之02-Python2-与-Python3-的区别"><a href="#Python面试题系列之02-Python2-与-Python3-的区别" class="headerlink" title="Python面试题系列之02: Python2 与 Python3 的区别"></a>Python面试题系列之02: Python2 与 Python3 的区别</h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>请简述下<code>Python2</code>与<code>Python3</code>的区别？</p><h2 id="知识点详解"><a href="#知识点详解" class="headerlink" title="知识点详解"></a>知识点详解</h2><p>这里主要从基本语法角度来谈谈python2与python3的差异：</p><h3 id="1-核心差异"><a href="#1-核心差异" class="headerlink" title="1 核心差异"></a>1 核心差异</h3><h4 id="1-1-Python3-对-Unicode-字符的原生支持"><a href="#1-1-Python3-对-Unicode-字符的原生支持" class="headerlink" title="1.1 Python3 对 Unicode 字符的原生支持"></a>1.1 Python3 对 Unicode 字符的原生支持</h4><p>Python2 中使用 ASCII 码作为默认编码方式导致 string 有两种类型 str 和 unicode，Python3 只支持 unicode 的 string。</p><p>Python2 和 Python3 字节和字符对应关系为：</p><p>Python2</p><p>Python3</p><p>表现</p><p>转换</p><p>作用</p><p>str</p><p>bytes</p><p>字节</p><p>encode</p><p>存储</p><p>unicode</p><p>str</p><p>字符</p><p>decode</p><p>显示</p><h4 id="1-2-Python3-采用绝对路径方式进行-import"><a href="#1-2-Python3-采用绝对路径方式进行-import" class="headerlink" title="1.2 Python3 采用绝对路径方式进行 import"></a>1.2 Python3 采用绝对路径方式进行 import</h4><p>在Python2中相对路径的import会导致标准库导入变得困难（设想一下，同一目录下有file.py，如何同时导入这个文件和标准库file）。在Python3中这一点将被修改，如果还需要导入同一目录的文件必须使用绝对路径，否则只能使用相关导入的方式来进行导入。</p><h4 id="1-3-新式类与老式类"><a href="#1-3-新式类与老式类" class="headerlink" title="1.3 新式类与老式类"></a>1.3 新式类与老式类</h4><p>Python2中存在老式类和新式类的区别，Python3统一采用新式类。</p><p>在Python2中新式类声明要求继承object，必须用新式类应用多重继承。在Python3中已经把旧类型去掉了，也就是说已经隐式继承了object。</p><h4 id="1-4-Python3-使用更加严格的缩进"><a href="#1-4-Python3-使用更加严格的缩进" class="headerlink" title="1.4 Python3 使用更加严格的缩进"></a>1.4 Python3 使用更加严格的缩进</h4><p>关于代码缩进，PEP-8中建议使用空格：</p><p>Spaces are the preferred indentation method.<br>Python2 的缩进机制中，1 个 tab 和 4 个 space 是等价的，所以在缩进中可以同时允许 tab 和 space 在代码中共存。</p><p>Python3 中使用了更加严格的缩进，不允许 tab 和 space 共存，否则会导致报错：</p><p>TabError:inconsistent use of tabs and spaces in indentation.</p><p>在缩进时混用tab和space会导致部分 IDE 使用存在问题，如Vim编辑器。不过像PyCharm、VS Code这些编辑器可以自动转换tab为space，参考如下配置。</p><p>﻿﻿</p><h3 id="2-废弃的特性"><a href="#2-废弃的特性" class="headerlink" title="2 废弃的特性"></a>2 废弃的特性</h3><h4 id="2-1-print-语句被-Python3-废弃"><a href="#2-1-print-语句被-Python3-废弃" class="headerlink" title="2.1 print 语句被 Python3 废弃"></a>2.1 print 语句被 Python3 废弃</h4><p>统一使用 print 函数</p><h4 id="2-2-exec-语句被-Python3-废弃"><a href="#2-2-exec-语句被-Python3-废弃" class="headerlink" title="2.2 exec 语句被 Python3 废弃"></a>2.2 exec 语句被 Python3 废弃</h4><p>统一使用 exec 函数</p><h4 id="2-3-execfile-语句被-Python3-废弃"><a href="#2-3-execfile-语句被-Python3-废弃" class="headerlink" title="2.3 execfile 语句被 Python3 废弃"></a>2.3 execfile 语句被 Python3 废弃</h4><p>推荐使用 exec(open(“./filename”).read())</p><h4 id="2-4-不相等操作符”-lt-gt-”被-Python3-废弃"><a href="#2-4-不相等操作符”-lt-gt-”被-Python3-废弃" class="headerlink" title="2.4 不相等操作符”<>”被 Python3 废弃"></a>2.4 不相等操作符”&lt;&gt;”被 Python3 废弃</h4><p>统一使用 “!=”</p><h4 id="2-5-long-整数类型被-Python3-废弃"><a href="#2-5-long-整数类型被-Python3-废弃" class="headerlink" title="2.5 long 整数类型被 Python3 废弃"></a>2.5 long 整数类型被 Python3 废弃</h4><p>统一使用<code>int</code></p><h4 id="2-6-xrange-函数被-Python3-废弃"><a href="#2-6-xrange-函数被-Python3-废弃" class="headerlink" title="2.6 xrange 函数被 Python3 废弃"></a>2.6 xrange 函数被 Python3 废弃</h4><p>统一使用<code>range</code><br>Python2中range的返回值是list，这意味着内存将会分布相应的长度的空间给list。python3中返回的是一个对象，并没有将数据完全实例化，所以内存中只有一个对象的空间。Python3 中 range 的这种机制，极大程度上提升了大数据集下的生成效率。</p><p>在python3中 要想使用range()获得一个list，必须显式调用： </p><pre class=" language-python"><code class="language-python">list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span> </code></pre><h4 id="2-7-在Python3-中与dictionary关联的方法已不再返回-list-对象"><a href="#2-7-在Python3-中与dictionary关联的方法已不再返回-list-对象" class="headerlink" title="2.7 在Python3 中与dictionary关联的方法已不再返回 list 对象"></a>2.7 在Python3 中与dictionary关联的方法已不再返回 list 对象</h4><p>涉及的方法有keys()、values()、items()、zip()、map()、filter()，它们是可以通过 list 强行转换。</p><pre class=" language-python"><code class="language-python">mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span>mydict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># &lt;built-in method keys of dict object at 0x000000000040B4C8></span>list<span class="token punctuation">(</span>mydict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['a', 'c', 'b']</span></code></pre><h4 id="2-8-迭代器-iterator-的-next-函数被-Python3-废弃"><a href="#2-8-迭代器-iterator-的-next-函数被-Python3-废弃" class="headerlink" title="2.8 迭代器 iterator 的 next()函数被 Python3 废弃"></a>2.8 迭代器 iterator 的 next()函数被 Python3 废弃</h4><p>统一使用 next(iterator)</p><h4 id="2-9-raw-input-函数被-Python3-废弃"><a href="#2-9-raw-input-函数被-Python3-废弃" class="headerlink" title="2.9 raw_input 函数被 Python3 废弃"></a>2.9 raw_input 函数被 Python3 废弃</h4><p>统一使用 input 函数</p><h4 id="2-10-cPickle-模块被-Python3-抛弃"><a href="#2-10-cPickle-模块被-Python3-抛弃" class="headerlink" title="2.10 cPickle 模块被 Python3 抛弃"></a>2.10 cPickle 模块被 Python3 抛弃</h4><p>统一使用 pickle 模块</p><h4 id="2-11-字典变量的-has-key-函数被-Python3-废弃"><a href="#2-11-字典变量的-has-key-函数被-Python3-废弃" class="headerlink" title="2.11 字典变量的 has_key 函数被 Python3 废弃"></a>2.11 字典变量的 has_key 函数被 Python3 废弃</h4><p>统一使用 in 关键词</p><h4 id="2-12-file-函数被-Python3-废弃"><a href="#2-12-file-函数被-Python3-废弃" class="headerlink" title="2.12 file 函数被 Python3 废弃"></a>2.12 file 函数被 Python3 废弃</h4><p>统一使用 open 来处理文件，可以通过 io.IOBase 检查文件类型</p><h4 id="2-13-apply-、execfile-都被去除了被-Python3-废弃"><a href="#2-13-apply-、execfile-都被去除了被-Python3-废弃" class="headerlink" title="2.13 apply()、execfile()都被去除了被 Python3 废弃"></a>2.13 apply()、execfile()都被去除了被 Python3 废弃</h4><h4 id="2-14-异常-StandardError-被-Python3-废弃"><a href="#2-14-异常-StandardError-被-Python3-废弃" class="headerlink" title="2.14 异常 StandardError 被 Python3 废弃"></a>2.14 异常 StandardError 被 Python3 废弃</h4><p>统一使用 Exception</p><h3 id="3-修改的特性"><a href="#3-修改的特性" class="headerlink" title="3 修改的特性"></a>3 修改的特性</h3><h4 id="3-1-浮点数除法操作符“-”和“-”的区别"><a href="#3-1-浮点数除法操作符“-”和“-”的区别" class="headerlink" title="3.1 浮点数除法操作符“/”和“//”的区别"></a>3.1 浮点数除法操作符“/”和“//”的区别</h4><p>Python2中的”/“：</p><p>若为两个整形数进行运算，结果为整形；但若两个数中有一个为浮点数，则结果为浮点数；<br>Python3中的”/“：</p><p>为真除法，运算结果不再根据参加运算的数的类型。</p><p>Python2中的”//“：</p><p>返回小于除法运算结果的最大整数；从类型上讲，与”/“运算符返回类型逻辑一致。<br>Python3中的”//“：</p><p>和 Python2 运算结果一样。</p><p>还是有点绕？那就来看看下面的例子：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># python2</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">3</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">=</span> <span class="token number">1.5</span><span class="token number">3</span> <span class="token operator">//</span> <span class="token number">2.0</span> <span class="token operator">=</span> <span class="token number">1.0</span><span class="token comment" spellcheck="true"># python3</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1.5</span><span class="token number">3</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">=</span> <span class="token number">1.5</span><span class="token number">3</span> <span class="token operator">//</span> <span class="token number">2.0</span> <span class="token operator">=</span> <span class="token number">1.0</span></code></pre><h4 id="3-2-异常抛出和捕捉机制区别"><a href="#3-2-异常抛出和捕捉机制区别" class="headerlink" title="3.2 异常抛出和捕捉机制区别"></a>3.2 异常抛出和捕捉机制区别</h4><p>在Python2 中的写法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">raise</span> IOError<span class="token punctuation">,</span> <span class="token string">"file error"</span> <span class="token comment" spellcheck="true"># 抛出异常</span><span class="token keyword">except</span> NameError<span class="token punctuation">,</span> err<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 捕捉异常</span></code></pre><p>在Python3 中的写法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">raise</span> IOError<span class="token punctuation">(</span><span class="token string">"file error"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 抛出异常</span><span class="token keyword">except</span> NameError <span class="token keyword">as</span> err<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 捕捉异常</span></code></pre><h4 id="3-3-列表表达式对外部同名变量的影响"><a href="#3-3-列表表达式对外部同名变量的影响" class="headerlink" title="3.3 列表表达式对外部同名变量的影响"></a>3.3 列表表达式对外部同名变量的影响</h4><p>Python2，列表表达式会修改外部相同名称变量的值</p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span> <span class="token string">'comprehension: '</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">'after: i ='</span><span class="token punctuation">,</span> i  <span class="token comment" spellcheck="true"># i=4</span></code></pre><p>Python3，列表表达式不会修改外部相同名称变量的值</p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'comprehension: '</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after: i ='</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># i=1</span></code></pre><p>注意：在这里若不使用列表表达式，直接使用for逻辑，在Python3得到的结果与Python2也是一致的。</p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after: i ='</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># i=4</span></code></pre><h4 id="3-4-round-函数返回值区别"><a href="#3-4-round-函数返回值区别" class="headerlink" title="3.4 round 函数返回值区别"></a>3.4 round 函数返回值区别</h4><p>Python2，round 函数返回 float 类型值</p><pre class=" language-python"><code class="language-python">isinstance<span class="token punctuation">(</span>round<span class="token punctuation">(</span><span class="token number">15.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Flase</span></code></pre><p>Python3，round 函数返回 int 类型值</p><pre class=" language-python"><code class="language-python">isinstance<span class="token punctuation">(</span>round<span class="token punctuation">(</span><span class="token number">15.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> float<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Flase</span></code></pre><h4 id="3-5-比较操作符区别"><a href="#3-5-比较操作符区别" class="headerlink" title="3.5 比较操作符区别"></a>3.5 比较操作符区别</h4><p>Python2 中任意两个对象都可以比较</p><pre class=" language-python"><code class="language-python"><span class="token number">101</span> <span class="token operator">></span> <span class="token string">'Pythonista'</span> <span class="token comment" spellcheck="true"># False</span></code></pre><p>Python3 中只有同一数据类型的对象可以比较</p><pre class=" language-python"><code class="language-python"><span class="token number">101</span> <span class="token operator">></span> <span class="token string">'Pythonista'</span> <span class="token comment" spellcheck="true"># TypeError: '>' not supported between instances of 'int' and 'str'</span></code></pre><h3 id="4-新增的特性"><a href="#4-新增的特性" class="headerlink" title="4 新增的特性"></a>4 新增的特性</h3><p>在Python3.X中增加的新特性在Python2中都不支持，这些新特性的说明在官网中有详细的说明：</p><p>3.1 <a href="https://docs.python.org/3.1/whatsnew/3.1.html" target="_blank" rel="noopener">https://docs.python.org/3.1/whatsnew/3.1.html</a><br>3.2 <a href="https://docs.python.org/3.2/whatsnew/3.2.html" target="_blank" rel="noopener">https://docs.python.org/3.2/whatsnew/3.2.html</a><br>3.3 <a href="https://docs.python.org/3.3/whatsnew/3.3.html" target="_blank" rel="noopener">https://docs.python.org/3.3/whatsnew/3.3.html</a><br>3.4 <a href="https://docs.python.org/3.4/whatsnew/3.4.html" target="_blank" rel="noopener">https://docs.python.org/3.4/whatsnew/3.4.html</a><br>3.5 <a href="https://docs.python.org/3.5/whatsnew/3.5.html" target="_blank" rel="noopener">https://docs.python.org/3.5/whatsnew/3.5.html</a><br>3.6 <a href="https://docs.python.org/3.6/whatsnew/3.6.html" target="_blank" rel="noopener">https://docs.python.org/3.6/whatsnew/3.6.html</a><br>3.7 <a href="https://docs.python.org/3.7/whatsnew/3.7.html" target="_blank" rel="noopener">https://docs.python.org/3.7/whatsnew/3.7.html</a><br>3.8 <a href="https://docs.python.org/3.8/whatsnew/3.8.html" target="_blank" rel="noopener">https://docs.python.org/3.8/whatsnew/3.8.html</a><br>在博客园上有一篇对这些新增特性中重要的点进行介绍的文章，可以作为参考：<a href="http://www.cnblogs.com/animalize/p/5633215.html" target="_blank" rel="noopener">http://www.cnblogs.com/animalize/p/5633215.html</a></p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>在面试中可根据实际情况，并结合上述列出的特性差异有选择地进行回答即可。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本文给大家整理了Python3与python2这么多区别，最后还是希望大家果断放弃Python2🤣，拥抱Python3😁，欢迎大家在评论区留言说出自己的看法。此外据说在2023年某个时间段就能看到Python4😉了。</p><p>好了，以上就是本篇全部内容。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python面试题精析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面试题系列之01 is 与 == 的区别</title>
      <link href="/2019/04/13/interviewquestion-001-is-yu-de-qu-bie/"/>
      <url>/2019/04/13/interviewquestion-001-is-yu-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="Python面试题系列之01-is-与-的区别"><a href="#Python面试题系列之01-is-与-的区别" class="headerlink" title="Python面试题系列之01: is 与 == 的区别"></a>Python面试题系列之01: is 与 == 的区别</h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>请简述下<code>is</code>与<code>==</code>的区别？</p><h2 id="知识点详解"><a href="#知识点详解" class="headerlink" title="知识点详解"></a>知识点详解</h2><p>我们先从下面这三个例子入手</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"Pythonista"</span>b <span class="token operator">=</span> <span class="token string">"Pythonista"</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b，a <span class="token operator">==</span> b<span class="token punctuation">)</span></code></pre><p>输出的布尔值依次为<code>True</code>、<code>True</code></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b，a <span class="token operator">==</span> b<span class="token punctuation">)</span></code></pre><p>输出的布尔值依次为<code>False</code>、<code>True</code></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b，a <span class="token operator">==</span> b<span class="token punctuation">)</span></code></pre><p>输出的布尔值依次为<code>True</code>、<code>True</code></p><p>上面的输出结果中为什么有的<code>is</code>和<code>==</code>的结果相同，有的不相同呢？</p><p>我们来看下官方文档中对于<code>is</code>和<code>==</code>的解释。</p><blockquote><p>is表达的是对象标识符，object identity，它的作用是用来检查对象的标识符是否一致，也就是比较两个对象在内存中的地址是否一样。<br>== 表达的是相等，equality，则是用来检查两个对象是否相等。</p></blockquote><p>我们在执行<code>a is b</code>的时候，其实相当于检查<code>id(a) == id(b)</code>。</p><p>而执行<code>a == b</code>的时候，实际是调用了对象 <code>a</code> 的<code>__eq()__</code>方法，即<code>a == b</code>相当于 <code>a.__eq__(b)</code>。</p><p>一般情况下，如果<code>a is b</code>返回<code>True</code>的话，即<code>a</code>和<code>b</code>指向同一块内存地址的话，<code>a == b</code>也返回<code>True</code>，即<code>a</code>和<code>b</code>的值也相等。</p><p>了解这些概念后，再来回顾下上面的三组例子：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"Pythonista"</span>b <span class="token operator">=</span> <span class="token string">"Pythonista"</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2788006878712</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2788006878712</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True </span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2787978142344</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2787978142408</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 False</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True </span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2788006947720</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2788006947720</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True </span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True</span></code></pre><p>打印出<code>id(a)</code>和<code>id(b)</code>后就很清楚了。只要<code>a</code>和<code>b</code>的值相等，<code>a == b</code>就会返回<code>True</code>，而只有<code>id(a)</code>和<code>id(b)</code>相等时，<code>a is b</code>才返回<code>True</code>。</p><p>总结一下，<code>is</code>是检查两个对象是否指向同一块内存空间，而<code>==</code>是检查他们的值是否相等。可以看出，<code>is</code>是比<code>==</code>更严格的检查，<code>is</code>返回<code>True</code>表明这两个对象指向同一块内存，值也一定相同。</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p><code>is</code>是对比地址,而<code>==</code>是对比值</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>搞懂了<code>is</code>与<code>==</code>的区别，那我们来思考一下下面这个问题：<br>Python中与<code>None</code>比较时，为什么是<code>is None</code>而不是<code>== None</code>呢？<br>欢迎大家在评论区留言说出自己的看法。好了，以上就是本篇全部内容。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python面试题精析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面试题系列之01 is 与 == 的区别</title>
      <link href="/2019/04/13/interviewquestion-001-is-yu-de-qu-bie-copy-2/"/>
      <url>/2019/04/13/interviewquestion-001-is-yu-de-qu-bie-copy-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Python面试题系列之01-is-与-的区别"><a href="#Python面试题系列之01-is-与-的区别" class="headerlink" title="Python面试题系列之01: is 与 == 的区别"></a>Python面试题系列之01: is 与 == 的区别</h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>请简述下<code>is</code>与<code>==</code>的区别？</p><h2 id="知识点详解"><a href="#知识点详解" class="headerlink" title="知识点详解"></a>知识点详解</h2><p>我们先从下面这三个例子入手</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"Pythonista"</span>b <span class="token operator">=</span> <span class="token string">"Pythonista"</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b，a <span class="token operator">==</span> b<span class="token punctuation">)</span></code></pre><p>输出的布尔值依次为<code>True</code>、<code>True</code></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b，a <span class="token operator">==</span> b<span class="token punctuation">)</span></code></pre><p>输出的布尔值依次为<code>False</code>、<code>True</code></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b，a <span class="token operator">==</span> b<span class="token punctuation">)</span></code></pre><p>输出的布尔值依次为<code>True</code>、<code>True</code></p><p>上面的输出结果中为什么有的<code>is</code>和<code>==</code>的结果相同，有的不相同呢？</p><p>我们来看下官方文档中对于<code>is</code>和<code>==</code>的解释。</p><blockquote><p>is表达的是对象标识符，object identity，它的作用是用来检查对象的标识符是否一致，也就是比较两个对象在内存中的地址是否一样。<br>== 表达的是相等，equality，则是用来检查两个对象是否相等。</p></blockquote><p>我们在执行<code>a is b</code>的时候，其实相当于检查<code>id(a) == id(b)</code>。</p><p>而执行<code>a == b</code>的时候，实际是调用了对象 <code>a</code> 的<code>__eq()__</code>方法，即<code>a == b</code>相当于 <code>a.__eq__(b)</code>。</p><p>一般情况下，如果<code>a is b</code>返回<code>True</code>的话，即<code>a</code>和<code>b</code>指向同一块内存地址的话，<code>a == b</code>也返回<code>True</code>，即<code>a</code>和<code>b</code>的值也相等。</p><p>了解这些概念后，再来回顾下上面的三组例子：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"Pythonista"</span>b <span class="token operator">=</span> <span class="token string">"Pythonista"</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2788006878712</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2788006878712</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True </span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2787978142344</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2787978142408</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 False</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True </span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2788006947720</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2788006947720</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True </span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True</span></code></pre><p>打印出<code>id(a)</code>和<code>id(b)</code>后就很清楚了。只要<code>a</code>和<code>b</code>的值相等，<code>a == b</code>就会返回<code>True</code>，而只有<code>id(a)</code>和<code>id(b)</code>相等时，<code>a is b</code>才返回<code>True</code>。</p><p>总结一下，<code>is</code>是检查两个对象是否指向同一块内存空间，而<code>==</code>是检查他们的值是否相等。可以看出，<code>is</code>是比<code>==</code>更严格的检查，<code>is</code>返回<code>True</code>表明这两个对象指向同一块内存，值也一定相同。</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p><code>is</code>是对比地址,而<code>==</code>是对比值</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>搞懂了<code>is</code>与<code>==</code>的区别，那我们来思考一下下面这个问题：<br>Python中与<code>None</code>比较时，为什么是<code>is None</code>而不是<code>== None</code>呢？<br>欢迎大家在评论区留言说出自己的看法。好了，以上就是本篇全部内容。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python面试题精析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面试题系列之01 is 与 == 的区别</title>
      <link href="/2019/04/13/interviewquestion-001-is-yu-de-qu-bie-copy-3/"/>
      <url>/2019/04/13/interviewquestion-001-is-yu-de-qu-bie-copy-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Python面试题系列之01-is-与-的区别"><a href="#Python面试题系列之01-is-与-的区别" class="headerlink" title="Python面试题系列之01: is 与 == 的区别"></a>Python面试题系列之01: is 与 == 的区别</h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>请简述下<code>is</code>与<code>==</code>的区别？</p><h2 id="知识点详解"><a href="#知识点详解" class="headerlink" title="知识点详解"></a>知识点详解</h2><p>我们先从下面这三个例子入手</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"Pythonista"</span>b <span class="token operator">=</span> <span class="token string">"Pythonista"</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b，a <span class="token operator">==</span> b<span class="token punctuation">)</span></code></pre><p>输出的布尔值依次为<code>True</code>、<code>True</code></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b，a <span class="token operator">==</span> b<span class="token punctuation">)</span></code></pre><p>输出的布尔值依次为<code>False</code>、<code>True</code></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b，a <span class="token operator">==</span> b<span class="token punctuation">)</span></code></pre><p>输出的布尔值依次为<code>True</code>、<code>True</code></p><p>上面的输出结果中为什么有的<code>is</code>和<code>==</code>的结果相同，有的不相同呢？</p><p>我们来看下官方文档中对于<code>is</code>和<code>==</code>的解释。</p><blockquote><p>is表达的是对象标识符，object identity，它的作用是用来检查对象的标识符是否一致，也就是比较两个对象在内存中的地址是否一样。<br>== 表达的是相等，equality，则是用来检查两个对象是否相等。</p></blockquote><p>我们在执行<code>a is b</code>的时候，其实相当于检查<code>id(a) == id(b)</code>。</p><p>而执行<code>a == b</code>的时候，实际是调用了对象 <code>a</code> 的<code>__eq()__</code>方法，即<code>a == b</code>相当于 <code>a.__eq__(b)</code>。</p><p>一般情况下，如果<code>a is b</code>返回<code>True</code>的话，即<code>a</code>和<code>b</code>指向同一块内存地址的话，<code>a == b</code>也返回<code>True</code>，即<code>a</code>和<code>b</code>的值也相等。</p><p>了解这些概念后，再来回顾下上面的三组例子：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"Pythonista"</span>b <span class="token operator">=</span> <span class="token string">"Pythonista"</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2788006878712</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2788006878712</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True </span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2787978142344</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2787978142408</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 False</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True </span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2788006947720</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 2788006947720</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True </span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 True</span></code></pre><p>打印出<code>id(a)</code>和<code>id(b)</code>后就很清楚了。只要<code>a</code>和<code>b</code>的值相等，<code>a == b</code>就会返回<code>True</code>，而只有<code>id(a)</code>和<code>id(b)</code>相等时，<code>a is b</code>才返回<code>True</code>。</p><p>总结一下，<code>is</code>是检查两个对象是否指向同一块内存空间，而<code>==</code>是检查他们的值是否相等。可以看出，<code>is</code>是比<code>==</code>更严格的检查，<code>is</code>返回<code>True</code>表明这两个对象指向同一块内存，值也一定相同。</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p><code>is</code>是对比地址,而<code>==</code>是对比值</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>搞懂了<code>is</code>与<code>==</code>的区别，那我们来思考一下下面这个问题：<br>Python中与<code>None</code>比较时，为什么是<code>is None</code>而不是<code>== None</code>呢？<br>欢迎大家在评论区留言说出自己的看法。好了，以上就是本篇全部内容。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python面试题精析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python排错集之WordCloud模块的正确“打开方式”</title>
      <link href="/2019/03/29/pythonerror-for-wordcloud/"/>
      <url>/2019/03/29/pythonerror-for-wordcloud/</url>
      
        <content type="html"><![CDATA[<h1 id="Python排错集之WordCloud模块的正确“打开方式”"><a href="#Python排错集之WordCloud模块的正确“打开方式”" class="headerlink" title="Python排错集之WordCloud模块的正确“打开方式”"></a>Python排错集之WordCloud模块的正确“打开方式”</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h2><p>WordCloud模块可以对文章中出现频率较高的“关键词”予以视觉化的展现，在生成的词云图时，过滤掉大量的低频低质的文本信息，使得浏览者只要一眼扫过文本就可领略文章的主旨。</p><p>无图不真相，下图为《数据可视化之用Python制作词云图》文章中的一个效果图，这是通过对19年政府工作报告进行解析并生成的词云图，大家感受下。</p><p>﻿﻿</p><p>由WordCloud模块生成的词云图，功能强大实用自不必说，但若想正常的用起来，还是需要先解决一些麻烦。本文以Windows系统为例，进行一遍扫雷，帮大家快速用上WordCloud模块。</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h2><p>操作系统：Windows</p><p>Python版本：3.7.2</p><h2 id="2-开始排雷"><a href="#2-开始排雷" class="headerlink" title="2 开始排雷"></a>2 开始排雷</h2><h3 id="2-1-模块安装时遇C-Error"><a href="#2-1-模块安装时遇C-Error" class="headerlink" title="2.1 模块安装时遇C++ Error"></a>2.1 模块安装时遇C++ Error</h3><p>WordCloud模块，同其它第三方模块一样，可直接使用pip命令进行安装，但是很快就踩上了第一颗雷。安装过程出现Error被中止，Microsoft Visual C++ 14.0 is required. 如下图：</p><p>﻿﻿</p><p>这个报错的原因及解决方案，在之前文章中已有详细说明，这里就不再赘述。参见：</p><p>《装Python第三方库遇Error：C++ 14.0 is required. 》</p><h3 id="2-2-使用过程中报OS-Error"><a href="#2-2-使用过程中报OS-Error" class="headerlink" title="2.2 使用过程中报OS Error"></a>2.2 使用过程中报OS Error</h3><p>在模块安装好之后，我们就可以利用WordCloud模块生成自己的词云图了。相关代码写好之后，运行一下试试。呀！一不小心就会踩上第二颗雷。运行时出现了<code>OSError</code>，提示Cannot open resource，如图：</p><p>﻿﻿</p><h4 id="2-2-1-问题原因"><a href="#2-2-1-问题原因" class="headerlink" title="2.2.1 问题原因"></a>2.2.1 问题原因</h4><p>出现这个错误的原因是在调用WordCloud模块时设置的字体，系统找不到，所以报出了Cannot open resource. 所以解决办法就有了，正确设置WordCloud模块使用的字体即可。</p><p>那问题来了，WordCloud模块调用的字体，要怎么设置、以及去哪里设置呢？</p><p>先来看看我们代码中设置词云参数的地方：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 设置词云参数</span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># 设置字体 </span>    font_path <span class="token operator">=</span> <span class="token string">'SIMYOU.TTF'</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 设置输出的图片宽高像素值</span>    width <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">700</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 设置输出的图片背景色</span>    background_color <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">)</span></code></pre><p>这个<code>SIMYOU.TTF</code>就是字体的名称，它代表了幼圆字体。但是这个名称又是从哪里来的呢？</p><h4 id="2-2-2-追根溯源"><a href="#2-2-2-追根溯源" class="headerlink" title="2.2.2 追根溯源"></a>2.2.2 追根溯源</h4><p>我们先来寻找下Windows系统的字体的位置，找找问题的“源头”。因为字体是系统级的东西，直接在系统盘检索一下，很容易找到答案。</p><p>﻿﻿</p><p>打开Fonts文件夹看看，这里存放了windows系统已安装的所有字体，如下图：</p><p>﻿﻿</p><p>我们在这个文件夹下仔细找寻一番，不难发现幼圆字体，但是它的名字为什么是SIMYOU.TTF，而不是SIMYOU.TTC呢？这里不再卖关子了，直接放大招。把幼圆Copy出来瞅瞅，你就明白了。</p><p>﻿﻿</p><p>好了，我们知道了字体的源头，那就可以解决问题了。</p><h4 id="2-2-3-解决方法一"><a href="#2-2-3-解决方法一" class="headerlink" title="2.2.3 解决方法一"></a>2.2.3 解决方法一</h4><p>从Windows字体目录中直接Copy出来一个字体，把字体名字填在配置词云参数中的<code>font_path</code>即可。</p><pre class=" language-python"><code class="language-python">font_path <span class="token operator">=</span> <span class="token string">'SIMYOU.TTF'</span></code></pre><p>此时再运行代码，就不会出现<code>OSError</code>报错了。</p><h4 id="2-2-4-解决方法二"><a href="#2-2-4-解决方法二" class="headerlink" title="2.2.4 解决方法二"></a>2.2.4 解决方法二</h4><p>其实与方法一是一个思路，只是不同的书写方式，如下：</p><p>即直接在<code>font_path</code>处填上Windows字体的绝对路径。</p><pre class=" language-python"><code class="language-python">font_path <span class="token operator">=</span> <span class="token string">'C:\\Windows\\Fonts\\SIMYOU.TTF'</span><span class="token punctuation">,</span> </code></pre><h3 id="2-3-生成的词云出现乱码"><a href="#2-3-生成的词云出现乱码" class="headerlink" title="2.3 生成的词云出现乱码"></a>2.3 生成的词云出现乱码</h3><p>解决了OS Error问题，并不代表生成的词云就没有问题了。如果你是对中文的材料制作词云，很容易踩上第三颗雷，如下图，是不是很绝望🤣🤣🤣</p><p>﻿﻿</p><h4 id="2-3-1-问题原因"><a href="#2-3-1-问题原因" class="headerlink" title="2.3.1 问题原因"></a>2.3.1 问题原因</h4><p>出现上述方块乱码，不要怀疑是自己代码哪里出现了问题。这个问题原因很简单，只是由于你使用的字体不支持中文导致的。</p><h4 id="2-3-2-从源头说起"><a href="#2-3-2-从源头说起" class="headerlink" title="2.3.2 从源头说起"></a>2.3.2 从源头说起</h4><p>我们还是先看看Windows字体这个文件夹，切换为列表显示方式</p><p>﻿﻿</p><p>看到了没？这些字体都有自己对应的语言，不支持中文的当然不会给你正常显示的。我们直接下拉到列表的底部，我们要用到的字体都在这里。</p><p>﻿﻿</p><h4 id="2-3-3-解决方法"><a href="#2-3-3-解决方法" class="headerlink" title="2.3.3 解决方法"></a>2.3.3 解决方法</h4><p>了解问题的根源之后，我们在这里直接挑选支持中文的字体来使用即可。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p>好了，WordCloud在使用过程中遇到的雷，到此就排的差不多了，赶快去生成自己漂亮的词云图吧~！若在使用词云过程中还有遇到其它问题，欢迎留言出来！</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
            <tag> Python排错集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之数据可视化之用Python制作词云图</title>
      <link href="/2019/03/27/pythonapps-wordcloud/"/>
      <url>/2019/03/27/pythonapps-wordcloud/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之数据可视化之用Python制作词云图"><a href="#Python小应用系列之数据可视化之用Python制作词云图" class="headerlink" title="Python小应用系列之数据可视化之用Python制作词云图"></a>Python小应用系列之数据可视化之用Python制作词云图</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h2><p>词云图，也叫文字云，是对文本中出现频率较高的“关键词”予以视觉化的展现，词云图过滤掉大量的低频低质的文本信息，使得浏览者只要一眼扫过文本就可领略文章的主旨。</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h2><p>操作系统：Windows</p><p>Python版本：3.7.2</p><h2 id="2-模块准备"><a href="#2-模块准备" class="headerlink" title="2 模块准备"></a>2 模块准备</h2><p>本文涉及到的Python第三方模块，共计四个：分词模块jieba，文字云模块wordcloud，画图模块matplotlib，用来处理背景图片的模块scipy。这些模块均可通过pip方式进行安装：</p><pre class=" language-python"><code class="language-python">pip install jiebapip install wordcloudpip install matplotlibpip install scipy</code></pre><p>注：在安装wordcloud时，可能会遇到报错，解决方案见：《装Python第三方库遇Error：C++ 14.0 is required.》</p><p>模块的导入：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 分词模块</span><span class="token keyword">import</span> jieba<span class="token comment" spellcheck="true"># 画图模块</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 文字云模块</span><span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud<span class="token comment" spellcheck="true"># 这是一个处理图像的函数，用于读取并处理背景图片</span><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>misc <span class="token keyword">import</span> imread</code></pre><h2 id="3-实现思路"><a href="#3-实现思路" class="headerlink" title="3 实现思路"></a>3 实现思路</h2><p>准备好一份自己需要分析的文本材料，这里选用的是19年两会新鲜出炉的政府工作报告。我们首先得通过jieba模块对文本材料进行分词处理，然后对处理后的材料使用wordcloud文字云模块生成相应的词云图片即可。</p><p>当然了你可以选择一个背景图片，并以此为基础生成特定的云图，这时就用到了上面提到的另外两个模块scipy和matplotlib。</p><p>好了，思路有了，那就开始实践吧~</p><h2 id="4-小试牛刀"><a href="#4-小试牛刀" class="headerlink" title="4 小试牛刀"></a>4 小试牛刀</h2><p>小试牛刀章节教你仅用9行代码，来生成一个词云图，先欣赏下最终的效果图。</p><h3 id="4-1-效果图"><a href="#4-1-效果图" class="headerlink" title="4.1 效果图"></a>4.1 效果图</h3><p>﻿﻿</p><h3 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h3><p>制作云图的思路，上文已作说明，这些就不再赘述了，直接看代码，代码中已添加详细注释说明。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">import</span> wordcloud<span class="token comment" spellcheck="true"># 读取词源文件</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"govreport.txt"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    t <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 进行分词</span>ls <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把分词用空格连起来</span>txt <span class="token operator">=</span> <span class="token string">' '</span> <span class="token punctuation">.</span>join<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置词云参数</span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># 设置字体 </span>    font_path <span class="token operator">=</span> <span class="token string">'SIMYOU.TTF'</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 设置输出的图片宽高像素值</span>    width <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">700</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 设置输出的图片背景色</span>    background_color <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成词云</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将图片保存到本地</span>w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'2019GovReport.png'</span><span class="token punctuation">)</span></code></pre><p>除去注释、导入模块占用的两行，剩下仅7行的代码，你来说说Python强大不？</p><p>小试牛刀不够牛？上面做出的云图不够完美？那就继续看下去，这里来实现一个定制图案的云图。</p><h2 id="5-中试牛刀"><a href="#5-中试牛刀" class="headerlink" title="5 中试牛刀"></a>5 中试牛刀</h2><p>我们这里有一张祖国地图，是否可以定制生成一个祖国版图样式的词云图呢？</p><p>﻿﻿</p><p>答案是肯定的，只因为Python太强大，实现思路直接看代码。</p><h3 id="5-1-代码实现"><a href="#5-1-代码实现" class="headerlink" title="5.1 代码实现"></a>5.1 代码实现</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 分词模块</span><span class="token keyword">import</span> jieba<span class="token comment" spellcheck="true"># 画图模块</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 文字云模块</span><span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud<span class="token comment" spellcheck="true"># 这是一个处理图像的函数，读取背景图片</span><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>misc <span class="token keyword">import</span> imread<span class="token comment" spellcheck="true"># 词源的文本文件</span>wf <span class="token operator">=</span> <span class="token string">'govreport.txt'</span><span class="token comment" spellcheck="true"># 读取文件内容</span>word_content <span class="token operator">=</span> open<span class="token punctuation">(</span>wf<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置背景图片</span>img_file <span class="token operator">=</span> <span class="token string">'China.jpg'</span><span class="token comment" spellcheck="true"># 解析背景图片</span>mask_img <span class="token operator">=</span> imread<span class="token punctuation">(</span>img_file<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 进行分词</span>word_cut <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>word_content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把分词用空格连起来</span>word_cut_join <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>word_cut<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置词云参数</span>wc <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># 设置字体  </span>    font_path<span class="token operator">=</span><span class="token string">'SIMYOU.TTF'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 允许最大词汇量</span>    max_words <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 设置最大号字体大小</span>    max_font_size <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 设置使用的背景图片，这个参数不为空时，width和height会被忽略</span>    mask <span class="token operator">=</span> mask_img<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 设置输出的图片背景色</span>    background_color <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成词云</span>wc<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>word_cut_join<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用于显示图片，需配合plt.show()一起使用</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>wc<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 去掉坐标轴</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将图片保存到本地</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'2019GovReport.jpg'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="5-2-效果图"><a href="#5-2-效果图" class="headerlink" title="5.2 效果图"></a>5.2 效果图</h3><p>﻿﻿</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h2><p>是不是又被强大的Python给震撼了？如引言所述，通过生成词云图，对文章中出现频率较高的“关键词”予以视觉化的展现，帮助读者快速领略文章的主旨，既方便又高效！</p><p>不过呢，不要高兴地太早，这里给大家暗暗地埋了几颗雷，词云图功能强大实用自不必说，但是若想正常的用起来，除了上面提到的在安装wordcloud模块时会遇到麻烦之外，还有更多的麻烦在等着大家。请关注后续Python排错集的系列文章。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文涉及的完整代码Github链接：<a href="https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Wordcloud/" target="_blank" rel="noopener">https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Wordcloud/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之装第三方库遇Error：C++ 14.0 is required.</title>
      <link href="/2019/03/19/pythonerror-c-14.0-is-required/"/>
      <url>/2019/03/19/pythonerror-c-14.0-is-required/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之装第三方库遇Error：C-14-0-is-required"><a href="#Python小应用系列之装第三方库遇Error：C-14-0-is-required" class="headerlink" title="Python小应用系列之装第三方库遇Error：C++ 14.0 is required."></a>Python小应用系列之装第三方库遇Error：C++ 14.0 is required.</h1><h2 id="0-问题引入"><a href="#0-问题引入" class="headerlink" title="0 问题引入"></a>0 问题引入</h2><p>最近在使用pip 安装WordCloud模块时，遇到了如下错误。</p><p>﻿﻿</p><p>网上查询了下这个Error，并不是个例，很多模块在安装时都可能会遇到这个错误。所以很有必要写篇文章排个雷。</p><p>﻿﻿</p><h2 id="1-问题原因"><a href="#1-问题原因" class="headerlink" title="1 问题原因"></a>1 问题原因</h2><p>从执行的报错中，我们提取出关键信息如下：</p><pre><code>error: Microsoft Visual C++ 14.0 is required. Get it with "Microsoft Visual C++ Build Tools": https://visualstudio.microsoft.com/downloads/</code></pre><p>通过提示，我们可以得知是由于c++依赖库不存在，所以在对包进行编译的时候出错，我们需要安装一个C++14.0的库。</p><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2 解决方案"></a>2 解决方案</h2><h3 id="2-1-方案一"><a href="#2-1-方案一" class="headerlink" title="2.1 方案一"></a>2.1 方案一</h3><p>直接使用提示中的链接，点进去去下载C++14.0的库<br>解压安装<br>安装完毕再次执行pip install xx<br>但是这个库差不多有4G大小，下载并解压安装？不现实，尤其是时间上划不来。那么就有了第二种解决方案，也是推荐使用的。</p><h3 id="2-2-方案二"><a href="#2-2-方案二" class="headerlink" title="2.2 方案二"></a>2.2 方案二</h3><p>根据提示我们知道c++依赖库不存在，所以在对包进行编译的时候出错。那我们可以去直接下载该模块对应的二进制安装包进行安装。</p><p>首先打开如下这个链接：</p><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a><br>这个网站给我们提供了大量的Python第三方库的二进制安装包。</p><p>﻿﻿</p><p>全英文，看不懂怎么办？那就强行Google翻译下。</p><p>﻿﻿</p><p>通过翻译软件的帮助，我们已经了解了这个网站是做什么的了，现在就开始干正事。</p><h4 id="2-2-1-检索模块名称"><a href="#2-2-1-检索模块名称" class="headerlink" title="2.2.1 检索模块名称"></a>2.2.1 检索模块名称</h4><p>直接在网页中<code>Ctrl + F</code>搜索我们要安装的模块的名字，比如我这里的WordCloud模块。</p><p>﻿﻿</p><h4 id="2-2-2-选择版本并下载"><a href="#2-2-2-选择版本并下载" class="headerlink" title="2.2.2 选择版本并下载"></a>2.2.2 选择版本并下载</h4><p>该网站中列出的模块的命名规则如下，这里要选择你自身系统对应的版本进行下载。</p><ul><li>cp后接python版本， 请与你的python版本对应</li><li>win32，标识32位架构，适用于32位系统</li><li>win_amd64，指64位架构，适用于64位系统<br>如果你电脑上安装有VS Code，你可以打开，直接通过左下角的信息，来获取你安装的Python版本信息，如下图：</li></ul><p>﻿﻿</p><p>我所使用的环境是Python3.6.3、32位的版本，所以直接下载wordcloud-1.5.0-cp36-cp36m-win32.whl</p><h4 id="2-2-3-安装whl文件"><a href="#2-2-3-安装whl文件" class="headerlink" title="2.2.3 安装whl文件"></a>2.2.3 安装whl文件</h4><p>下载好之后，直接执行pip install xxxx进行安装即可。</p><p>﻿﻿</p><p>安装好之后，你可以进行一下验证，查看导入模块是否正常。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p>一个问题通常有多种解决方法，并不是官方推荐的方法就一定适合，要根据实际使用场景来选择使用。比如本文中我们仅是为了使用WordCloud库，而去安装C++ 14.0这么大的库，很显然不值得，要灵活选择解决方案来达到最大效益。</p><p>好了，以上就是本篇全部内容。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
            <tag> Python排错集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之定时发送天气信息给微信好友</title>
      <link href="/2019/03/17/pythonapps-wechatrobot-sendweatherinfo/"/>
      <url>/2019/03/17/pythonapps-wechatrobot-sendweatherinfo/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之定时发送天气信息给微信好友"><a href="#Python小应用系列之定时发送天气信息给微信好友" class="headerlink" title="Python小应用系列之定时发送天气信息给微信好友"></a>Python小应用系列之定时发送天气信息给微信好友</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0.引言"></a>0.引言</h2><p>前段时间找到了一个免费的天气预报API，费了好段时间把这个API解析并组装成自己想用的格式了，就想着如何实现每天发送天气信息给自己。最近无意中发现了wxpy库，用它来做再合适不过了。以下是wxpy库的简介：</p><p>wxpy基于itchat，使用了 Web 微信的通讯协议，通过大量接口优化提升了模块的易用性，并进行丰富的功能扩展。实现了微信登录、收发消息、搜索好友、数据统计、微信公众号、微信好友、微信群基本信息获取等功能。<br>废话不多说，代码写起来。</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>操作系统：Windows /  Linux</p><p>Python版本：3.7.2</p><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><p>我们要实现用Python来发微信，发送的内容是每天最新的天气信息。很明显我们需要完成两部分的准备，先来看看获取天气信息这部分内容。</p><h3 id="2-0-准备工作"><a href="#2-0-准备工作" class="headerlink" title="2.0 准备工作"></a>2.0 准备工作</h3><p>本文我们用到的第三方库有requests、wxpyy，若环境还没有，按如下方式进行安装即可。</p><pre class=" language-python"><code class="language-python">pip install wxpypip install requests</code></pre><h3 id="2-1-获取天气信息"><a href="#2-1-获取天气信息" class="headerlink" title="2.1 获取天气信息"></a>2.1 获取天气信息</h3><p>这里我使用的API的请求链接如下：</p><p><a href="http://t.weather.sojson.com/api/weather/city/city_code" target="_blank" rel="noopener">http://t.weather.sojson.com/api/weather/city/city_code</a><br>请求方式是GET方法，使用时注意更换为自己城市对应的city_code，除此之外不用带任何参数。请求是restfull风格，city_code为9位数字，如下示例：</p><pre class=" language-json"><code class="language-json">    <span class="token punctuation">{</span>      <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token number">58</span><span class="token punctuation">,</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">59</span><span class="token punctuation">,</span>      <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"city_code"</span><span class="token operator">:</span> <span class="token string">"101230201"</span><span class="token punctuation">,</span>      <span class="token property">"city_name"</span><span class="token operator">:</span> <span class="token string">"厦门"</span>    <span class="token punctuation">}</span></code></pre><p>大家可以从_city.json文件中获取各个城市对应的编号。该文件我已经放在Github本文章对应的目录下了，大家可自行查询使用。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># weather API的URL，此处的城市编号，参看_city.json</span>url <span class="token operator">=</span> <span class="token string">'http://t.weather.sojson.com/api/weather/city/101010200'</span>header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 请求Weather API并拿到服务器返回的数据</span>rep <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>rep<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>result <span class="token operator">=</span> <span class="token string">''</span>weather <span class="token operator">=</span> rep<span class="token punctuation">.</span>text</code></pre><p>这个API接口的返回值内容很多，以下仅展示返回的部分信息。实际使用中仅用到三块内容，首先是城市信息。</p><pre class=" language-json"><code class="language-json"><span class="token property">"cityInfo"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"海淀区"</span><span class="token punctuation">,</span>  //请求城市    <span class="token property">"cityId"</span><span class="token operator">:</span> <span class="token string">"101010200"</span><span class="token punctuation">,</span>  //城市ID    <span class="token property">"parent"</span><span class="token operator">:</span> <span class="token string">"北京市"</span><span class="token punctuation">,</span>  //上级，一般是省份    <span class="token property">"updateTime"</span><span class="token operator">:</span> <span class="token string">"09:02"</span>  //天气更新时间<span class="token punctuation">}</span></code></pre><p>其次是，该城市当前天气的空气相关指数。</p><pre class=" language-json"><code class="language-json"><span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"shidu"</span><span class="token operator">:</span> <span class="token string">"32%"</span><span class="token punctuation">,</span>  //湿度    <span class="token property">"pm25"</span><span class="token operator">:</span> <span class="token number">35.0</span><span class="token punctuation">,</span>  //pm2<span class="token number">.5</span>    <span class="token property">"pm10"</span><span class="token operator">:</span> <span class="token number">97.0</span><span class="token punctuation">,</span>  //pm10    <span class="token property">"quality"</span><span class="token operator">:</span> <span class="token string">"良"</span><span class="token punctuation">,</span>  //空气质量    <span class="token property">"wendu"</span><span class="token operator">:</span> <span class="token string">"7"</span><span class="token punctuation">,</span>  //温度    <span class="token property">"ganmao"</span><span class="token operator">:</span> <span class="token string">"极少数敏感人群应减少户外活动"</span><span class="token punctuation">,</span>  //感冒提醒（指数）</code></pre><p>第三部分，该城市当前天气的温度风力等另外一些指数。</p><pre class=" language-json"><code class="language-json"><span class="token property">"forecast"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  //今天+未来<span class="token number">14</span>天    <span class="token punctuation">{</span>        <span class="token property">"date"</span><span class="token operator">:</span> <span class="token string">"16"</span><span class="token punctuation">,</span>  //日期        <span class="token property">"sunrise"</span><span class="token operator">:</span> <span class="token string">"06: 28"</span><span class="token punctuation">,</span>        <span class="token property">"high"</span><span class="token operator">:</span> <span class="token string">"高温 20.0℃"</span><span class="token punctuation">,</span>        <span class="token property">"low"</span><span class="token operator">:</span> <span class="token string">"低温 2.0℃"</span><span class="token punctuation">,</span>        <span class="token property">"sunset"</span><span class="token operator">:</span> <span class="token string">"18: 21"</span><span class="token punctuation">,</span>        <span class="token property">"aqi"</span><span class="token operator">:</span> <span class="token number">48.0</span><span class="token punctuation">,</span>         <span class="token property">"ymd"</span><span class="token operator">:</span> <span class="token string">"2019-03-16"</span><span class="token punctuation">,</span>  //年月日        <span class="token property">"week"</span><span class="token operator">:</span> <span class="token string">"星期六"</span><span class="token punctuation">,</span>        <span class="token property">"fx"</span><span class="token operator">:</span> <span class="token string">"西北风"</span><span class="token punctuation">,</span>  //风向        <span class="token property">"fl"</span><span class="token operator">:</span> <span class="token string">"3-4级"</span><span class="token punctuation">,</span>  //风力        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"晴"</span><span class="token punctuation">,</span>        <span class="token property">"notice"</span><span class="token operator">:</span> <span class="token string">"愿你拥有比阳光明媚的心情"</span>    <span class="token punctuation">}</span></code></pre><p>注：这个API接口返回值完整的示例，请见Github中本文章目录下的weather.json文件。</p><p>拿到返回值之后，需要解析，并转换组装成我们想要的格式。 </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 解析服务器返回的数据，具体可参考weather.json文件</span>index_cityInfo <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"cityInfo"</span><span class="token punctuation">)</span>index_cityId <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"cityId"</span><span class="token punctuation">)</span>index_shidu <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"shidu"</span><span class="token punctuation">)</span>index_pm25 <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"pm25"</span><span class="token punctuation">)</span>index_pm10 <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"pm10"</span><span class="token punctuation">)</span>index_quality <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"quality"</span><span class="token punctuation">)</span>index_wendu <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"wendu"</span><span class="token punctuation">)</span>index_ganmao <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"ganmao"</span><span class="token punctuation">)</span>index_forecast <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"forecast"</span><span class="token punctuation">)</span>index_ymd <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"ymd"</span><span class="token punctuation">,</span> index_forecast<span class="token punctuation">)</span>index_week <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"week"</span><span class="token punctuation">,</span> index_forecast<span class="token punctuation">)</span>index_sunset <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"sunset"</span><span class="token punctuation">,</span> index_forecast<span class="token punctuation">)</span>index_high <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"high"</span><span class="token punctuation">,</span> index_forecast<span class="token punctuation">)</span>index_low <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"low"</span><span class="token punctuation">,</span> index_forecast<span class="token punctuation">)</span>index_fx <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"fx"</span><span class="token punctuation">,</span> index_forecast<span class="token punctuation">)</span>index_fl <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"fl"</span><span class="token punctuation">,</span> index_forecast<span class="token punctuation">)</span>index_aqi <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"aqi"</span><span class="token punctuation">,</span> index_forecast<span class="token punctuation">)</span>index_type <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> index_forecast<span class="token punctuation">)</span>index_notice <span class="token operator">=</span> weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"notice"</span><span class="token punctuation">,</span> index_forecast<span class="token punctuation">)</span></code></pre><p>这是我最终想达到的效果如下：</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''# 今日天气预报# 年月日 + 星期 + 所在地城市# 天气类型 + 风向 + 风力# 温度范围（最低温度~最高温度）# 污染指数：PM2.5/PM10/AQI# 空气质量# 当前温度 + 空气湿度# Notice信息'''</span></code></pre><p>转换化具体代码就是这样子的：</p><pre class=" language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token string">'今日天气预报'</span> <span class="token operator">+</span> <span class="token string">'\n'</span> \    <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_ymd <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">:</span>index_week <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span> \    <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_week <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">:</span>index_fx <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span> \    <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_cityInfo <span class="token operator">+</span> <span class="token number">19</span><span class="token punctuation">:</span>index_cityId <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span> \    <span class="token operator">+</span> <span class="token string">"天气: "</span> <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_type <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">:</span>index_notice <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span> \    <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_fx <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">:</span>index_fl <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> \    <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_fl <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">:</span>index_type <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span> \    <span class="token operator">+</span> <span class="token string">"温度范围:"</span> <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_low <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">:</span>index_sunset <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" ~"</span> \    <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_high <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">:</span>index_low <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span> \    <span class="token operator">+</span> <span class="token string">"污染指数: PM2.5:"</span> <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_pm25 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">:</span>index_pm10 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">""</span> \    <span class="token operator">+</span> <span class="token string">"PM10:"</span> <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_pm10 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">:</span>index_quality <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span> \    <span class="token operator">+</span> <span class="token string">"AQI:"</span> <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_aqi <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">:</span>index_ymd <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span> \    <span class="token operator">+</span> <span class="token string">"空气质量:"</span> <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_quality <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">:</span>index_wendu <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span> \    <span class="token operator">+</span> <span class="token string">"当前温度:"</span> <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_wendu <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">:</span>index_ganmao <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span> \    <span class="token operator">+</span> <span class="token string">"空气湿度:"</span> <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_shidu <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">:</span>index_pm25 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span> \    <span class="token operator">+</span> weather<span class="token punctuation">[</span>index_notice <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">:</span>weather<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'}'</span><span class="token punctuation">,</span> index_notice<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><p>这样我们的第一步，获取天气信息就完成了。接下来就是登录微信定时发送消息了。</p><h3 id="2-2-登录微信定时发送消息"><a href="#2-2-登录微信定时发送消息" class="headerlink" title="2.2 登录微信定时发送消息"></a>2.2 登录微信定时发送消息</h3><p>首先要登录微信，一行代码就搞定了。这里实际上是扫二维码登录了一个Web版的微信。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化机器人，扫码登陆微信，适用于Windows系统</span>bot <span class="token operator">=</span> Bot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># # Linux系统，执行登陆请调用下面的这句</span><span class="token comment" spellcheck="true"># bot = Bot(console_qr=2, cache_path="botoo.pkl")</span></code></pre><p>然后我们需要定义一个发送消息的函数，将获取并解析好的天气信息发送给指定微信好友。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 调用get_weather函数</span>GW <span class="token operator">=</span> get_weather<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 填入你朋友的微信昵称，注意这里不是备注，也不是微信帐号</span>my_friend <span class="token operator">=</span> bot<span class="token punctuation">.</span>friends<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>search<span class="token punctuation">(</span>u<span class="token string">'一个昵称'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 发送微信消息</span>my_friend<span class="token punctuation">.</span>send<span class="token punctuation">(</span>u<span class="token string">"早上好Y(^o^)Y，这里是今日份的天气信息请查收!"</span><span class="token punctuation">)</span>my_friend<span class="token punctuation">.</span>send<span class="token punctuation">(</span>GW<span class="token punctuation">)</span>        my_friend<span class="token punctuation">.</span>send<span class="token punctuation">(</span>u<span class="token string">"Have a Nice Day!"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 每隔86400秒（1天），发送1次</span>t <span class="token operator">=</span> Timer<span class="token punctuation">(</span><span class="token number">86400</span><span class="token punctuation">,</span> auto_send<span class="token punctuation">)</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>接下来，你可以使用try…except…语句来实现在消息失败时发出告警：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''此处为发送消息的代码，即上一段内容'''</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 你的微信昵称，注意这里不是备注，也不是微信帐号</span>    my_friend <span class="token operator">=</span> bot<span class="token punctuation">.</span>friends<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&amp;娴敲棋子&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    my_friend<span class="token punctuation">.</span>send<span class="token punctuation">(</span>u<span class="token string">"报告老板，今日份的信息发送失败了！"</span><span class="token punctuation">)</span></code></pre><p>最后运行主函数，调用发送消息的函数即可。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 调用函数进行消息发送</span>auto_send<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="3-效果展示"><a href="#3-效果展示" class="headerlink" title="3.效果展示"></a>3.效果展示</h1><p>这是我清晨收到的微信消息截图，看上去还不错。没白忙活😉</p><p>﻿﻿</p><h1 id="4-后记"><a href="#4-后记" class="headerlink" title="4.后记"></a>4.后记</h1><p>我把这个脚本丢在了我的树莓上，挂在后台一直运行，简直完美😁。这里仅是实现一个最简单的定时发送，后续考虑如何实现多个时间点的定时发送，还准备加上早间新闻资讯以及火车放票信息等内容。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文涉及的完整代码Github链接：<a href="https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/WechatRobot_SendWeatherInfo" target="_blank" rel="noopener">https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/WechatRobot_SendWeatherInfo</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之用Python爬取&quot;农药&quot;英雄皮肤</title>
      <link href="/2019/03/12/pythonapps-crawl-kingofglory/"/>
      <url>/2019/03/12/pythonapps-crawl-kingofglory/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之用Python爬取”农药”英雄皮肤"><a href="#Python小应用系列之用Python爬取”农药”英雄皮肤" class="headerlink" title="Python小应用系列之用Python爬取”农药”英雄皮肤"></a>Python小应用系列之用Python爬取”农药”英雄皮肤</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0.引言"></a>0.引言</h2><p>作为一款现象级游戏，王者荣耀，想必大家都玩过或听过，游戏里中各式各样的英雄，每款皮肤都非常精美，用做电脑壁纸再合适不过了。本篇就来教大家如何使用Python来爬取这些精美的英雄皮肤。</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>操作系统：Windows /  Linux</p><p>Python版本：3.7.2</p><h2 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2.需求分析"></a>2.需求分析</h2><p>我们打开《王者荣耀》官网，找定位到英雄列表的页面（可直接点此链接：<a href="https://pvp.qq.com/web201605/herolist.shtml" target="_blank" rel="noopener">https://pvp.qq.com/web201605/herolist.shtml</a> ）。</p><p>﻿﻿</p><p>在这个网页中包含了所有的英雄，头像及英雄名称。点击其中一个英雄的头像，如“嫦娥”，进去后如下图：</p><p>﻿﻿</p><p>我们记下此时的网址。</p><p><a href="https://pvp.qq.com/web201605/herodetail/515.shtml" target="_blank" rel="noopener">https://pvp.qq.com/web201605/herodetail/515.shtml</a><br>再后退到英雄列表页面，点“甄姬”进去查看：</p><p><a href="https://pvp.qq.com/web201605/herodetail/127.shtml" target="_blank" rel="noopener">https://pvp.qq.com/web201605/herodetail/127.shtml</a><br>可以看到这些网址几乎是固定不变的，变化的只是515、127这些数字，这些其实就是代表的英雄数字编号。那么第一个关键点就来了，怎么找出各个英雄所对应的数字编号呢？</p><p>我们回到最初的英雄列表页面，打开浏览器的开发者工具<code>F12</code>，刷新页面、仔细观察，你会找到一个herolist.json的文件，如图所示：</p><p>﻿﻿</p><p>这里记录了各个英雄的信息，其中就包含了每个英雄对应的数字编号了，请忽略这里截图中的乱码显示。我们切到herolist.json中的Headers，就可以拿到该请求的URL地址，进而就可以把英雄及其对应的数字，编号都提取出来了。</p><p>有了英雄编号的对应关系，再找寻下英雄皮肤的链接规律。</p><p>现在重新进入一个英雄的网址，打开浏览器的开发者工具，刷新页面，在Network下刷新并找到英雄的皮肤图片，如图所示：</p><p>﻿﻿</p><p>在Headers中查看该图片的网址，查看即Request URL处的链接：</p><p><a href="https://game.gtimg.cn/images/yxzj/img201606/skin/hero-info/515/515-bigskin-1.jpg" target="_blank" rel="noopener">https://game.gtimg.cn/images/yxzj/img201606/skin/hero-info/515/515-bigskin-1.jpg</a><br>找寻一个看看</p><p><a href="https://game.gtimg.cn/images/yxzj/img201606/skin/hero-info/529/529-bigskin-1.jpg" target="_blank" rel="noopener">https://game.gtimg.cn/images/yxzj/img201606/skin/hero-info/529/529-bigskin-1.jpg</a><br>继续寻一个看看</p><p><a href="https://game.gtimg.cn/images/yxzj/img201606/skin/hero-info/127/127-bigskin-4.jpg" target="_blank" rel="noopener">https://game.gtimg.cn/images/yxzj/img201606/skin/hero-info/127/127-bigskin-4.jpg</a><br>仔细分析如上三个链接，我们可以把英雄皮肤的URL拆分开来看。它是由一个固定前缀（我们可以记为base_url），再加上英雄数字编号、”bigskin”、皮肤编号、”.jpg”组合而成，如下：</p><p>base_url / hero_num / hero_num - bigskin - heroskin_num .jpg<br>拿到了各个英雄皮肤的URL地址后，我们就可以进行图片的下载并保存在本地了。</p><h2 id="3-代码演示"><a href="#3-代码演示" class="headerlink" title="3.代码演示"></a>3.代码演示</h2><p>首先导入我们所用到的模块</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> os</code></pre><p>注：requests是非内置模块，若环境中没有，需自行安装：</p><pre class=" language-python"><code class="language-python">pip install requests</code></pre><h3 id="3-1-提取英雄名字及数字"><a href="#3-1-提取英雄名字及数字" class="headerlink" title="3.1 提取英雄名字及数字"></a>3.1 提取英雄名字及数字</h3><p>使用herolist.json拿到herolist，并提取出我们关心的内容</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 英雄的名字json</span>url <span class="token operator">=</span> <span class="token string">'http://pvp.qq.com/web201605/js/herolist.json'</span>head <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36'</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>head<span class="token punctuation">)</span>hero_list <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 提取英雄名字和数字</span>hero_name<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token string">'cname'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hero_list<span class="token punctuation">)</span><span class="token punctuation">)</span> hero_number<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token string">'ename'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hero_list<span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre><h3 id="3-2-构造英雄皮肤的URL"><a href="#3-2-构造英雄皮肤的URL" class="headerlink" title="3.2 构造英雄皮肤的URL"></a>3.2 构造英雄皮肤的URL</h3><p>首先准备好我们的BASE_URL，即英雄皮肤的固定前缀。</p><pre><code>h_l = 'http://game.gtimg.cn/images/yxzj/img201606/skin/hero-info/'</code></pre><p>接下来构造好英雄皮肤的URL，同时我们需要对每一个英雄的所有皮肤进行遍历，如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 逐一遍历英雄</span><span class="token keyword">for</span> i <span class="token keyword">in</span> hero_number<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 逐一遍历皮肤，此处假定一个英雄最多有15个皮肤</span>    <span class="token keyword">for</span> sk_num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        hsl <span class="token operator">=</span> h_l <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-bigskin-'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>sk_num<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.jpg'</span>        hl <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>hsl<span class="token punctuation">)</span></code></pre><h3 id="3-3-存储图片"><a href="#3-3-存储图片" class="headerlink" title="3.3 存储图片"></a>3.3 存储图片</h3><p>最后我们就只需将获取到的图片保存在本地即可。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将图片保存下来，并以"英雄名称_皮肤序号"方式命名</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>hero_name<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>sk_num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>hl<span class="token punctuation">.</span>content<span class="token punctuation">)</span></code></pre><h2 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h2><p>最终的爬取效果如下图所示。</p><p>﻿﻿</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>短短几十行代码就可以把心爱英雄的精美皮肤保存下来，赶快实操起来吧！更多有趣、好玩的Python应用、实战，请关注知识星球「人人都是Pythonista」。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文所涉及的完整代码详见GitHub：<a href="https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Crawl_KingofGlory" target="_blank" rel="noopener">https://github.com/MiracleYoung/You-are-Pythonista/tree/master/PythonExercise/Tool/Crawl_KingofGlory</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之迷你爬虫之15行代码搞定热门歌单</title>
      <link href="/2019/02/14/pythonapps-crawl-163playlist/"/>
      <url>/2019/02/14/pythonapps-crawl-163playlist/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之迷你爬虫之15行代码搞定热门歌单"><a href="#Python小应用系列之迷你爬虫之15行代码搞定热门歌单" class="headerlink" title="Python小应用系列之迷你爬虫之15行代码搞定热门歌单"></a>Python小应用系列之迷你爬虫之15行代码搞定热门歌单</h1><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><p>今天是国际著名的214情人节，你过的是情人节还是正月初十呢？是否需要一首歌来抚慰你，受伤或躁动的心灵。来吧，今天教你用15行代码搞定热门歌单。学起来并听起来吧。</p><p>本文使用的是Selenium模块，它是一个自动化测试工具，利用它我们可以驱动浏览器执行特定的动作，如点击、下拉等等操作，对于一些 JavaScript 渲染的页面来说，此种抓取方式非常有效。另外采用了Chrome浏览器配合Selenium工作。</p><h2 id="2-环境"><a href="#2-环境" class="headerlink" title="2 环境"></a>2 环境</h2><p>操作系统：Windows</p><p>Python版本：3.7.2</p><h2 id="3-准备工作"><a href="#3-准备工作" class="headerlink" title="3 准备工作"></a>3 准备工作</h2><h3 id="3-1、若你的环境中没有selenium模块，直接使用pip安装即可。"><a href="#3-1、若你的环境中没有selenium模块，直接使用pip安装即可。" class="headerlink" title="3.1、若你的环境中没有selenium模块，直接使用pip安装即可。"></a>3.1、若你的环境中没有selenium模块，直接使用pip安装即可。</h3><pre class=" language-python"><code class="language-python">pip install selenium</code></pre><h3 id="3-2、打开谷歌浏览器，检查Chrome的版本："><a href="#3-2、打开谷歌浏览器，检查Chrome的版本：" class="headerlink" title="3.2、打开谷歌浏览器，检查Chrome的版本："></a>3.2、打开谷歌浏览器，检查Chrome的版本：</h3><p>在浏览器地址中输入 chrome://settings/help 回车即可看到。</p><p>﻿﻿</p><h3 id="3-3、准备ChromeDriver"><a href="#3-3、准备ChromeDriver" class="headerlink" title="3.3、准备ChromeDriver"></a>3.3、准备ChromeDriver</h3><p>打开ChromeDriver 的官方网站：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="noopener">https://sites.google.com/a/chromium.org/chromedriver/downloads</a> ，寻找与你当前浏览器版本相对应的ChromeDriver下载。</p><p>﻿﻿</p><h3 id="3-4、选择你自己的操作系统类型进行下载即可。"><a href="#3-4、选择你自己的操作系统类型进行下载即可。" class="headerlink" title="3.4、选择你自己的操作系统类型进行下载即可。"></a>3.4、选择你自己的操作系统类型进行下载即可。</h3><p>﻿﻿</p><h3 id="3-5、以Windows为例，下载结束后，将ChromeDriver-放置在python安装目录下的Scripts文件夹即可。"><a href="#3-5、以Windows为例，下载结束后，将ChromeDriver-放置在python安装目录下的Scripts文件夹即可。" class="headerlink" title="3.5、以Windows为例，下载结束后，将ChromeDriver 放置在python安装目录下的Scripts文件夹即可。"></a>3.5、以Windows为例，下载结束后，将ChromeDriver 放置在python安装目录下的Scripts文件夹即可。</h3><p>﻿﻿</p><p>准备工作完成，代码写起来吧~</p><h2 id="4-迷你爬虫的实现"><a href="#4-迷你爬虫的实现" class="headerlink" title="4 迷你爬虫的实现"></a>4 迷你爬虫的实现</h2><p>我们这次的目标是爬取热门歌单，比如网易云音乐中播放量大于1000万的歌单信息（歌单名称、链接）。</p><h3 id="4-1、我们先来打开网易云的歌单第一页："><a href="#4-1、我们先来打开网易云的歌单第一页：" class="headerlink" title="4.1、我们先来打开网易云的歌单第一页："></a>4.1、我们先来打开网易云的歌单第一页：</h3><p><a href="https://music.163.com/#/discover/playlist/?order=hot&amp;cat=%E5%85%A8%E9%83%A8&amp;limit=35&amp;offset=0" target="_blank" rel="noopener">https://music.163.com/#/discover/playlist/?order=hot&amp;cat=%E5%85%A8%E9%83%A8&amp;limit=35&amp;offset=0</a></p><h3 id="4-2、使用Chrome的开发者工具F12进行分析。"><a href="#4-2、使用Chrome的开发者工具F12进行分析。" class="headerlink" title="4.2、使用Chrome的开发者工具F12进行分析。"></a>4.2、使用Chrome的开发者工具<code>F12</code>进行分析。</h3><p>﻿﻿</p><p>我们想要拿的信息全在这里：</p><p>msk,封面[mask]：有歌单的名称及链接</p><p>nb,播放数[number broadcast]：135万</p><h3 id="4-3、我们还需要遍历所有的页，使用工具继续分析，找到“下一页”的URL。"><a href="#4-3、我们还需要遍历所有的页，使用工具继续分析，找到“下一页”的URL。" class="headerlink" title="4.3、我们还需要遍历所有的页，使用工具继续分析，找到“下一页”的URL。"></a>4.3、我们还需要遍历所有的页，使用工具继续分析，找到“下一页”的URL。</h3><p>﻿﻿</p><h3 id="4-4、切换至最后一页，拿到最后一页的URL。"><a href="#4-4、切换至最后一页，拿到最后一页的URL。" class="headerlink" title="4.4、切换至最后一页，拿到最后一页的URL。"></a>4.4、切换至最后一页，拿到最后一页的URL。</h3><p>﻿﻿</p><h3 id="4-5、等我们爬取完所有符合的歌单信息后，将其保存在本地。"><a href="#4-5、等我们爬取完所有符合的歌单信息后，将其保存在本地。" class="headerlink" title="4.5、等我们爬取完所有符合的歌单信息后，将其保存在本地。"></a>4.5、等我们爬取完所有符合的歌单信息后，将其保存在本地。</h3><h3 id="4-6、全部工作结束，最后再通过下面的伪代码回顾下整体思路。"><a href="#4-6、全部工作结束，最后再通过下面的伪代码回顾下整体思路。" class="headerlink" title="4.6、全部工作结束，最后再通过下面的伪代码回顾下整体思路。"></a>4.6、全部工作结束，最后再通过下面的伪代码回顾下整体思路。</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token comment" spellcheck="true"># 网易云音乐歌单列表第一页地址</span>url <span class="token operator">=</span> <span class="token string">'163muisc'</span><span class="token comment" spellcheck="true"># 用Chrome接口创建一个Selenium的WebDriver</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 逐页解析，直至歌单列表的最后一页</span><span class="token keyword">while</span> url <span class="token operator">!=</span> <span class="token string">'javacript:void(0)'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 用WebDriver加载页面</span>    browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 切换至内容的iframe</span>    browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定位歌单标签</span>    data <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_elements_by_tag_name<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析当前页中所有的歌单详情</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取歌单的播放量</span>        num <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">"nb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">'万'</span> <span class="token keyword">in</span> num <span class="token operator">and</span> int<span class="token punctuation">(</span>num<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'万'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 获取播放量大于1000万的歌单封面</span>            msk <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 把歌单封面中的标题、链接以及播放量，存储在TXT文件中</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"163playlist.txt"</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'msk.title'</span><span class="token punctuation">,</span> <span class="token string">'msk.num'</span><span class="token punctuation">,</span> <span class="token string">'msk.href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定位'下一页'的URL</span>    url <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结束调用</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="4-7、爬取的效果如下："><a href="#4-7、爬取的效果如下：" class="headerlink" title="4.7、爬取的效果如下："></a>4.7、爬取的效果如下：</h3><p>﻿﻿</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><p>本文旨在安抚你因情人节受伤的小心灵，同时带你入个爬虫的门，感受下python的强大。更多有趣、好玩的Python应用、实战，请关注知识星球「人人都是Pythonista」。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文所涉及的完整代码详见GitHub：MiracleYoung/You-are-Pythonista/PythonExercise/Tool/Mini_Crawl/crawl_163playlist.py</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之用Python写个邮件提醒</title>
      <link href="/2019/02/12/pythonapps-sendemail/"/>
      <url>/2019/02/12/pythonapps-sendemail/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之用Python写个邮件提醒"><a href="#Python小应用系列之用Python写个邮件提醒" class="headerlink" title="Python小应用系列之用Python写个邮件提醒"></a>Python小应用系列之用Python写个邮件提醒</h1><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><p>春节假期已结束，患上了节后综合征？不想工作偷个懒，又不想错过重要事情被老板逮个正着，这时邮件提醒就派上用场了。本文教你如何使用Python来发邮件。</p><h2 id="2-环境"><a href="#2-环境" class="headerlink" title="2 环境"></a>2 环境</h2><p>操作系统：Windows /  Linux</p><p>Python版本：3.7.2</p><h2 id="3-邮件收发流程"><a href="#3-邮件收发流程" class="headerlink" title="3 邮件收发流程"></a>3 邮件收发流程</h2><p>邮件收发，很自然地涉及两个阶段：邮件发送过程、邮件接收过程。发邮件用的是SMTP(Simple Mail Transfer Protocol)即简单邮件传输协议，它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件中转方式。SMTP协议只能用来发送邮件，不能用来接收邮件，而大多数的邮件发送服务器都是使用SMTP协议，SMTP协议的默认TCP端口号是25。收邮件最常用的两种协议是POP3协议(TCP 110)和IMAP(TCP 143)。</p><p>﻿﻿</p><p>在python中我们利用Python中smtplib模块和email模块来进行邮件的发送。smtplib模块提供了一种很方便的途径发送电子邮件，它对smtp协议进行了简单的封装。而email模块，则是用来处理邮件消息的。</p><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4 代码实现"></a>4 代码实现</h2><p>首先导入用到的模块</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>utils <span class="token keyword">import</span> formataddr<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header</code></pre><p>接下来，先看看一封邮件中涉及哪些内容。</p><p>﻿﻿</p><p>邮件由<code>邮件头</code>、<code>邮件体</code>两部分组成。发件人(from)、收件人(to)、邮件主题(subject)、MIME版本、邮件内容类型等属于邮件头；邮件体则指的是邮件的正文，有text/plain(纯文本)和text/html(超文本)之分，由邮件头中的“connect type”域指出。</p><p>转成代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 邮件主题/标题</span>mail_title <span class="token operator">=</span> <span class="token string">'Email Reminder'</span><span class="token comment" spellcheck="true"># 邮件正文</span>mail_content <span class="token operator">=</span> <span class="token string">'This is an email reminder from Python.'</span><span class="token comment" spellcheck="true"># 发件人邮箱账号</span>Sender <span class="token operator">=</span> <span class="token string">'*********@qq.com'</span><span class="token comment" spellcheck="true"># 收件人邮箱账号</span>Receiver <span class="token operator">=</span> <span class="token string">'***********@126.com'</span><span class="token comment" spellcheck="true"># 发送邮件正文内容</span>msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>mail_content<span class="token punctuation">,</span> <span class="token string">"plain"</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 发送邮件主题/标题</span>msg<span class="token punctuation">[</span><span class="token string">"Subject"</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>mail_title<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 发件人姓名  </span>msg<span class="token punctuation">[</span><span class="token string">"From"</span><span class="token punctuation">]</span> <span class="token operator">=</span> formataddr<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'＆娴敲棋子＆'</span><span class="token punctuation">,</span> Sender<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 收件人姓名  </span>msg<span class="token punctuation">[</span><span class="token string">"To"</span><span class="token punctuation">]</span> <span class="token operator">=</span> formataddr<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'＆娴敲棋子＆'</span><span class="token punctuation">,</span> Receiver<span class="token punctuation">]</span><span class="token punctuation">)</span> 实际上邮件正文的文本格式有三种，如下图，上述代码中<span class="token string">"plain"</span>对应的就是纯文本格式。</code></pre><p>﻿﻿</p><p><strong>HTML</strong>，这是Outlook中的默认邮件格式。HTML 也是要使用要为其创建邮件看起来像传统的文档，使用各种字体、 颜色以及项目符号和编号列表，以及您希望显示在您的消息内的图片时的最佳格式。</p><p><strong>纯文本</strong>，此格式适用于所有电子邮件程序，但它不支持粗体或斜体文本、 彩色的字体或其他文本格式。纯文本格式也不支持在邮件中，显示图片，虽然您可以包括附件的形式的图片。</p><p><strong><code>RTF</code>格式</strong>，丰富文本格式 (RTF) 是一种只能由这些电子邮件应用程序支持的 Microsoft 格式：Microsoft Exchange Client 版本 4.0 和 5.0、所有版本的Outlook。</p><p>邮件准备好了，接下来就是登录、发送邮件、登出，如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 邮箱的传输协议，端口默认25</span>e <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token string">"smtp.qq.com"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 登录邮箱，第二个参数为发件人的邮箱授权码</span>e<span class="token punctuation">.</span>login<span class="token punctuation">(</span>Sender<span class="token punctuation">,</span> <span class="token string">'xxxxxxxxx'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 发送邮件，参数依次：发件人、收件人、发送消息</span>e<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>Sender<span class="token punctuation">,</span> <span class="token punctuation">[</span>Receiver<span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 退出邮箱</span>e<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>注意：登录邮箱时填写不是邮箱的密码，而是授权码。</p><p>授权码是用于登录第三方邮件客户端的专用密码。适用于登录以下服务: POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务。</p><p>网易邮箱的设置入口：设置-客户端授权码</p><p>﻿﻿</p><p>QQ邮箱的设置入口：邮箱设置-账户-生成授权码</p><p>﻿﻿</p><p>最后可以添加try…except…语句，捕获异常并打印邮件发送状态。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''此处放置登录邮箱、发送邮件、登出邮箱的代码'''</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Email Send Successful!'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Email Send Failed!'</span><span class="token punctuation">)</span></code></pre><p>执行一下，看看邮件是否发送成功了？</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><p>在实际使用时，可将上述发送邮件的代码，用函数封装起来，封装在各种场景中，如：服务器出现异常时的提醒、自动化执行结束后，火车票抢票成功后等等。</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文所涉及的完整代码详见GitHub：MiracleYoung/You-are-Pythonista/PythonExercise/Tool/send_Email/send_email.py</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之拿Python给自己做个UI界面</title>
      <link href="/2019/02/03/pythonapps-make-a-simple-gui/"/>
      <url>/2019/02/03/pythonapps-make-a-simple-gui/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之拿Python给自己做个UI界面"><a href="#Python小应用系列之拿Python给自己做个UI界面" class="headerlink" title="Python小应用系列之拿Python给自己做个UI界面"></a>Python小应用系列之拿Python给自己做个UI界面</h1><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><p>学Python这么久了，一直想做个界面出来，最近发现Python有个内置库tkinter，利用它可以很轻松做出一些简易的UI界面，首先来看Python官方对Tkinter的说明：</p><blockquote><p>The tkinter package (“Tk interface”) is the standard Python interface to the Tk GUI toolkit. Both Tk and tkinter are available on most Unix platforms, as well as on Windows systems. </p></blockquote><p>从上面描述中我们不难看出，不管你是 Mac OS 系统，还是 Windows 系统，它都可以生成相对应的操作界面，这就是所谓的跨平台。</p><h2 id="2-调用关系说明"><a href="#2-调用关系说明" class="headerlink" title="2 调用关系说明"></a>2 调用关系说明</h2><p>其原理就是我们使用 Python代码去调用 Tkinter， Tkinter 已经封装了访问TK的接口，这个接口是一个图形库，支持多跨平台操作系统，进而通过它，我们就可以调用我们系统本身的GUI接口了。</p><p>﻿﻿</p><h2 id="3-环境"><a href="#3-环境" class="headerlink" title="3 环境"></a>3 环境</h2><p>操作系统：Windows /  Linux /  Mac OS</p><p>Python版本：3.6.6</p><h2 id="4-小试牛刀"><a href="#4-小试牛刀" class="headerlink" title="4 小试牛刀"></a>4 小试牛刀</h2><p>有了概念并了解原理之后，接下来就小试牛刀一下~</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter<span class="token comment" spellcheck="true"># 定义一个窗体</span>top <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将其加入主循环</span>top<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>﻿﻿</p><p>运行一下，biu<del>，三行代码就把一个窗口弹出来了，有没有很神奇</del></p><h2 id="5-中试牛刀"><a href="#5-中试牛刀" class="headerlink" title="5 中试牛刀"></a>5 中试牛刀</h2><p>接下来我们要来点复杂的：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">import</span> tkinter<span class="token punctuation">.</span>messagebox <span class="token keyword">as</span> mbox<span class="token comment" spellcheck="true"># 定义MainUI类表示应用/窗口，继承Frame类</span><span class="token keyword">class</span> <span class="token class-name">MainUI</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Application构造函数，master为窗口的父控件</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> master <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 初始化Application的Frame部分 </span>        tk<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> master<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 显示窗口，并使用grid布局</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建控件</span>        self<span class="token punctuation">.</span>createWidgets<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建控件</span>    <span class="token keyword">def</span> <span class="token function">createWidgets</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建一个标签，输出要显示的内容</span>        self<span class="token punctuation">.</span>firstLabel <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"「人人都是Pythonista」专注Python领域，做最专业的Python星球。"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设定使用grid布局</span>        self<span class="token punctuation">.</span>firstLabel<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建一个按钮，用来触发answer方法</span>        self<span class="token punctuation">.</span>clickButton <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"点一下瞧瞧？"</span><span class="token punctuation">,</span>command<span class="token operator">=</span>self<span class="token punctuation">.</span>answer<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设定使用grid布局</span>        self<span class="token punctuation">.</span>clickButton<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">answer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 我们通过 messagebox 来显示一个提示框</span>        mbox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span><span class="token string">"「人人都是Pythonista」"</span><span class="token punctuation">,</span><span class="token triple-quoted-string string">'''        这是一个专注Python的星球，我们提供「从零单排」、「实战项目」、「大航海」、「技术沙龙」、「技术分享」、「大厂内推」等系列供你选择及学习，当然也会有周边技术沿伸。        本星球会不定期开展各类实战项目，阶段性组织线上技术沙龙、分享等；对于职业发展路线不明确的，我们会邀请到一些大厂hr及高级开发、经理等给大家解惑。        加入我们，和千人一起玩Python，To be a Pythonista！        '''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个MainUI对象</span>app <span class="token operator">=</span> MainUI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置窗口标题</span>app<span class="token punctuation">.</span>master<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'「人人都是Pythonista」'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置窗体大小</span>app<span class="token punctuation">.</span>master<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'400x100'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 主循环开始</span>app<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在这里：</p><p>我们导入了<code>tkinter</code>的相关模块<br>定义了初始化函数，通过<code>grid()</code>方法将我们的组件传给父容器<br>自定义一个创建组件的方法，我们创建了一个标签和一个按钮，这个按钮被点击后就会触发<code>answer</code>这个方法<br>我们通过<code>messagebox</code>来显示一个提示框<br>实例化我们的 APP，然后通过主线程来监听我们的界面操作<br>运行后如下：</p><p>﻿﻿</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h2><p>想要做出漂亮的UI界面，还是需要深入地学习下Tkinter这个模块。上文中的我们只用到了框架、按钮、标签、文本这四种控件，而在Tkinter中给我们提供了15种控件供大家使用。此外Tkinter控件布局有三种方式：包装pack()、网格grid()、位置place()，本文中选用了grid，大家也可以逐一尝试下有什么区别，期待大家的大试牛刀~</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文所涉及的完整代码详见GitHub：MiracleYoung/You-are-Pythonista/PythonExercise/Tool/make_a_simple_GUI/make_a_simple_GUI.py</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小应用系列之用拍摄时间重命名你的照片</title>
      <link href="/2019/01/30/pythonapps-rename-img-use-exif/"/>
      <url>/2019/01/30/pythonapps-rename-img-use-exif/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小应用系列之用拍摄时间重命名你的照片"><a href="#Python小应用系列之用拍摄时间重命名你的照片" class="headerlink" title="Python小应用系列之用拍摄时间重命名你的照片"></a>Python小应用系列之用拍摄时间重命名你的照片</h1><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h2><p>操作系统：Windows</p><p>Python版本：3.6.6</p><h2 id="2-背景"><a href="#2-背景" class="headerlink" title="2 背景"></a>2 背景</h2><p>使用单反或是用iphone手机拍摄后的照片名字都是以“IMG_数字.jpg”的命名，当有在大量照片时，查找某一时间段拍摄的照片就很不方便，并且在归档管理上很容易出现重名的问题。若是采用“拍摄年月日_时分秒.jpg”的方式来命名，那么就能避免上述问题的出现，毕竟1秒钟拍多张照片的场景不会很多。那么问题来了，如何得到照片的拍摄等信息呢？</p><h2 id="3-引入"><a href="#3-引入" class="headerlink" title="3 引入"></a>3 引入</h2><p>首先随便打开一张照片来一探究竟，现在的图片处理工具都会提供[图片信息]之类的功能菜单来查看详情。如下图：</p><p>﻿﻿</p><p>可以看到一张图片中竟记录了这么多信息，如：曝光度，光圈，焦距，快门，机身等，同时也发现了我们关心的字段，照片的拍摄时间。这些信息是什么？又是记录在哪里的呢？</p><h3 id="3-1-Exif信息"><a href="#3-1-Exif信息" class="headerlink" title="3.1 Exif信息"></a>3.1 Exif信息</h3><p>如上图所示的数码照片中的信息诸如拍摄时的光圈、快门、白平衡、ISO、焦距、日期时间等各种和拍摄条件以及相机品牌、型号、色彩编码、拍摄时录制的声音以及全球定位系统(GPS)、缩略图等统称之为<code>EXIF</code>信息。</p><blockquote><p>所有的JPEG文件以字符串“0xFFD8”开头，并以字符串“0xFFD9”结束。文件头中有一系列“0xFF??”格式的字符串，称为“标识”，用来标记JPEG文件的信息段。“0xFFD8”表示图像信息开始，“0xFFD9”表示图像信息结束，这两个标识后面没有信息，而其它标识紧跟一些信息字符。0xFFE0 — 0xFFEF之间的标识符称为“应用标记”，没有被常规JPEG文件利用，Exif正是利用这些信息串记录拍摄信息的。</p></blockquote><p>了解完上述信息后，接下来就看看在Python中是如何读取Exif信息的？</p><h3 id="3-2-exifread模块"><a href="#3-2-exifread模块" class="headerlink" title="3.2 exifread模块"></a>3.2 exifread模块</h3><p>这里就要用到exifread模块，直接使用pip就可以安装：</p><pre class=" language-python"><code class="language-python">pip install exifread</code></pre><p>我们可以使用这个模块去读取图片中的信息，由于我们只关心照片的拍摄时间，它对应Exif信息中的标签名称如下：<code>EXIF DateTimeOriginal</code></p><p>我们只需要拿到这个字段对应的值之后，就得到了照片的拍摄时间。接下来便可以用拍摄时间对照片进行重命名的操作了。</p><p>好了，整体的思路有了，现在下面就是具体的代码实现。</p><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4 代码实现"></a>4 代码实现</h2><p>首先指定好路径，并拿到要处理的文件：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 修改要处理的目录</span>IMGPath <span class="token operator">=</span> <span class="token string">"P:\\Personal\\Python\\"</span><span class="token keyword">for</span> IMGName <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>IMGPath<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 拼接出原文件路径</span>    full_name <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>IMGPath<span class="token punctuation">,</span> IMGName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断是否为文件</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>full_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 调用opExif函数对文件进行处理操作</span>        opExif<span class="token punctuation">(</span>IMGPath<span class="token punctuation">,</span> IMGName<span class="token punctuation">)</span></code></pre><p>使用二进制方式打开文件，读取文件头部的EXIF信息：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span>old_full_name<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    tags <span class="token operator">=</span> exifread<span class="token punctuation">.</span>process_file<span class="token punctuation">(</span>f<span class="token punctuation">)</span></code></pre><p>若读取的文件头部信息匹配了EXIF信息中拍摄时间的标签，则进行处理并组成新的名字：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 先拿到原文件的后缀</span>file_suffix <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># EXIF信息中拍摄时间的标签</span>Tag <span class="token operator">=</span> <span class="token string">"EXIF DateTimeOriginal"</span><span class="token keyword">if</span> Tag <span class="token keyword">in</span> tags<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 调整原始的时间格式为"年月日_时分秒"</span>    file_stem <span class="token operator">=</span> str<span class="token punctuation">(</span>tags<span class="token punctuation">[</span>Tag<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 新文件名：年月日_时分秒.原后缀名   </span>    new_name <span class="token operator">=</span> file_stem <span class="token operator">+</span> file_suffix</code></pre><p>当然了，你还可以加个序号以防重名：</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>new_name<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 年月日_时分秒_序号.原后缀名</span>     new_name <span class="token operator">=</span> file_stem <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> file_suffix      num <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>接下来就是重命名的操作：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 拼接出新文件路径</span>new_full_name <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> new_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{old_full_name} >>> {new_full_name}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 执行重命名操作</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>old_full_name<span class="token punctuation">,</span> new_full_name<span class="token punctuation">)</span></code></pre><p>实际执行的效果如下：</p><p>﻿﻿</p><p>不足30行代码就搞定它了，是不是很开心？赶快操作起来吧~</p><p>备注：本篇首发于知识星球「人人都是Pythonista」。本文所涉及的完整代码详见GitHub：MiracleYoung/You-are-Pythonista/PythonExercise/Tool/rename_IMG_use_Exif/rename_IMG_use_Exif.py</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python小应用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python小应用系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Git初始化配置</title>
      <link href="/2018/08/05/windows-git-chu-shi-hua-pei-zhi/"/>
      <url>/2018/08/05/windows-git-chu-shi-hua-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-Git初始化配置"><a href="#Windows-Git初始化配置" class="headerlink" title="Windows Git初始化配置"></a>Windows Git初始化配置</h1><p>1、Git安装完毕后，从开始菜单中找到Git Bash，双击进入Git Shell界面</p><p>2、配置Name和Email</p><p>命令格式参考：<br><code>git config --global user.name "your name"</code><br><code>git config --global user.email "your email address"</code></p><p>3、生成Public/Private RSA Key</p><p>命令格式参考：<br><code>ssh-keygen -C "your email address" -t rsa</code><br><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190828192708.png" alt=""></p><p>这里有一些注意事项：</p><ul><li>设置Public RSA Key的保存位置，直接回车采用默认地址；</li><li>设置一个密码，并再次输入确认(<font color="#dd00dd"><strong>这里不建议设置，方便本地使用</strong></font>)</li><li>Public RSA Key的保存路径：c:\users\username.ssh\id_rsa.pub<br><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190828192736.png" alt=""></li></ul><p>4、将Public Key告知Github</p><ul><li>Home Page：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> 。</li><li>进入Account Settings页面，打开SSH Keys，点击“Add SSH Key”。</li><li>在本地打开c:\users\username.ssh\id_rsa.pub，把里面的内容全部Copy到Key对应的输入框内，点击“Add Key”。</li></ul><p>5、添加SSH信任<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>站点<br><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190828192744.png" alt=""></p><p>6、Clone Repositories<br><img src="https://raw.githubusercontent.com/HGzhao/CloudIMG/master/2019IMG/20190828192750.png" alt=""></p><p>需要注意的是：</p><ul><li>版本库地址格式：<code>git@github.com:your_resp_address</code>；</li><li>保存目录的最后一级不能Exist； </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
